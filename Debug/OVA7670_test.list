
OVA7670_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f54  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  080061f4  080061f4  000161f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08006274  08006274  00016274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08006278  08006278  00016278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000006c  24000000  0800627c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000ab20  2400006c  080062e8  0002006c  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400ab8c  080062e8  0002ab8c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000fa0d  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000020f0  00000000  00000000  0002faea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000e38  00000000  00000000  00031be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b01  00000000  00000000  00032a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00037b33  00000000  00000000  00033519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000153f6  00000000  00000000  0006b04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00160e84  00000000  00000000  00080442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000435c  00000000  00000000  001e12c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000057  00000000  00000000  001e5624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080061dc 	.word	0x080061dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	080061dc 	.word	0x080061dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <check_memory_usage>:
#include <stdio.h>

extern char _flash_start, _flash_end;
extern char _ram_start, _ram_end;

void check_memory_usage() {
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
    size_t flash_total = (size_t)(&_flash_end - &_flash_start);
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <check_memory_usage+0x30>)
 8000388:	4b0a      	ldr	r3, [pc, #40]	; (80003b4 <check_memory_usage+0x34>)
 800038a:	1ad3      	subs	r3, r2, r3
 800038c:	607b      	str	r3, [r7, #4]
    size_t ram_total = (size_t)(&_ram_end - &_ram_start);
 800038e:	4a0a      	ldr	r2, [pc, #40]	; (80003b8 <check_memory_usage+0x38>)
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <check_memory_usage+0x3c>)
 8000392:	1ad3      	subs	r3, r2, r3
 8000394:	603b      	str	r3, [r7, #0]

    printf("Flash: %lu bytes total\n", flash_total);
 8000396:	6879      	ldr	r1, [r7, #4]
 8000398:	4809      	ldr	r0, [pc, #36]	; (80003c0 <check_memory_usage+0x40>)
 800039a:	f005 f8ab 	bl	80054f4 <iprintf>
    printf("RAM: %lu bytes total\n", ram_total);
 800039e:	6839      	ldr	r1, [r7, #0]
 80003a0:	4808      	ldr	r0, [pc, #32]	; (80003c4 <check_memory_usage+0x44>)
 80003a2:	f005 f8a7 	bl	80054f4 <iprintf>
}
 80003a6:	bf00      	nop
 80003a8:	3708      	adds	r7, #8
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	08020000 	.word	0x08020000
 80003b4:	08000000 	.word	0x08000000
 80003b8:	24080000 	.word	0x24080000
 80003bc:	24000000 	.word	0x24000000
 80003c0:	080061f4 	.word	0x080061f4
 80003c4:	0800620c 	.word	0x0800620c

080003c8 <main>:
static void MX_DMA_Init(void);
static void MX_I2C1_Init(void);
static void MX_TIM1_Init(void);
static void MX_DCMI_Init(void);

int main(void) {
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
    HAL_Init();
 80003cc:	f000 fc58 	bl	8000c80 <HAL_Init>
    SystemClock_Config();
 80003d0:	f000 f82c 	bl	800042c <SystemClock_Config>

    MX_GPIO_Init();
 80003d4:	f000 f866 	bl	80004a4 <MX_GPIO_Init>
    MX_DMA_Init();
 80003d8:	f000 f8c2 	bl	8000560 <MX_DMA_Init>
    MX_I2C1_Init();
 80003dc:	f000 f8e0 	bl	80005a0 <MX_I2C1_Init>
    MX_TIM1_Init();
 80003e0:	f000 f900 	bl	80005e4 <MX_TIM1_Init>
    MX_DCMI_Init();
 80003e4:	f000 f936 	bl	8000654 <MX_DCMI_Init>
    printf("Hello World");
 80003e8:	480b      	ldr	r0, [pc, #44]	; (8000418 <main+0x50>)
 80003ea:	f005 f883 	bl	80054f4 <iprintf>
    // Start TIM1 to provide XCLK for OV7670
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80003ee:	2100      	movs	r1, #0
 80003f0:	480a      	ldr	r0, [pc, #40]	; (800041c <main+0x54>)
 80003f2:	f004 fa0b 	bl	800480c <HAL_TIM_PWM_Start>

    // Initialize OV7670 camera
    OV7670_Init(&hi2c1, OV7670_QVGA);
 80003f6:	2100      	movs	r1, #0
 80003f8:	4809      	ldr	r0, [pc, #36]	; (8000420 <main+0x58>)
 80003fa:	f000 f94b 	bl	8000694 <OV7670_Init>

    while (1) {
        // Start capturing frame to buffer
        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)frameBuffer, FRAME_BUFFER_SIZE / 4);
 80003fe:	4a09      	ldr	r2, [pc, #36]	; (8000424 <main+0x5c>)
 8000400:	f642 2330 	movw	r3, #10800	; 0x2a30
 8000404:	2100      	movs	r1, #0
 8000406:	4808      	ldr	r0, [pc, #32]	; (8000428 <main+0x60>)
 8000408:	f000 fe86 	bl	8001118 <HAL_DCMI_Start_DMA>

        // Simulate streaming by processing or sending the buffer here
        // For example, you can send frameBuffer via UART or store it

        HAL_DCMI_Stop(&hdcmi); // Stop DCMI after frame capture
 800040c:	4806      	ldr	r0, [pc, #24]	; (8000428 <main+0x60>)
 800040e:	f000 ff45 	bl	800129c <HAL_DCMI_Stop>
        check_memory_usage();
 8000412:	f7ff ffb5 	bl	8000380 <check_memory_usage>
        HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_CONTINUOUS, (uint32_t)frameBuffer, FRAME_BUFFER_SIZE / 4);
 8000416:	e7f2      	b.n	80003fe <main+0x36>
 8000418:	08006224 	.word	0x08006224
 800041c:	2400a99c 	.word	0x2400a99c
 8000420:	2400a948 	.word	0x2400a948
 8000424:	24000088 	.word	0x24000088
 8000428:	2400a9e8 	.word	0x2400a9e8

0800042c <SystemClock_Config>:

    }
}

void SystemClock_Config(void) {
 800042c:	b580      	push	{r7, lr}
 800042e:	b09c      	sub	sp, #112	; 0x70
 8000430:	af00      	add	r7, sp, #0
    // Configure the system clock to 64 MHz
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000436:	224c      	movs	r2, #76	; 0x4c
 8000438:	2100      	movs	r1, #0
 800043a:	4618      	mov	r0, r3
 800043c:	f005 f8af 	bl	800559e <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000440:	1d3b      	adds	r3, r7, #4
 8000442:	2220      	movs	r2, #32
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f005 f8a9 	bl	800559e <memset>

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800044c:	2301      	movs	r3, #1
 800044e:	627b      	str	r3, [r7, #36]	; 0x24
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000454:	62bb      	str	r3, [r7, #40]	; 0x28
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000456:	2302      	movs	r3, #2
 8000458:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800045a:	2302      	movs	r3, #2
 800045c:	64fb      	str	r3, [r7, #76]	; 0x4c
    RCC_OscInitStruct.PLL.PLLM = 1;
 800045e:	2301      	movs	r3, #1
 8000460:	653b      	str	r3, [r7, #80]	; 0x50
    RCC_OscInitStruct.PLL.PLLN = 8;
 8000462:	2308      	movs	r3, #8
 8000464:	657b      	str	r3, [r7, #84]	; 0x54
    RCC_OscInitStruct.PLL.PLLP = 2;
 8000466:	2302      	movs	r3, #2
 8000468:	65bb      	str	r3, [r7, #88]	; 0x58
    RCC_OscInitStruct.PLL.PLLQ = 2;
 800046a:	2302      	movs	r3, #2
 800046c:	65fb      	str	r3, [r7, #92]	; 0x5c
    RCC_OscInitStruct.PLL.PLLR = 2;
 800046e:	2302      	movs	r3, #2
 8000470:	663b      	str	r3, [r7, #96]	; 0x60
    HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8000472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000476:	4618      	mov	r0, r3
 8000478:	f003 f9e6 	bl	8003848 <HAL_RCC_OscConfig>

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK |
 800047c:	231b      	movs	r3, #27
 800047e:	607b      	str	r3, [r7, #4]
                                  RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000480:	2303      	movs	r3, #3
 8000482:	60bb      	str	r3, [r7, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000484:	2300      	movs	r3, #0
 8000486:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000488:	2309      	movs	r3, #9
 800048a:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800048c:	2308      	movs	r3, #8
 800048e:	61fb      	str	r3, [r7, #28]

    HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2);
 8000490:	1d3b      	adds	r3, r7, #4
 8000492:	2102      	movs	r1, #2
 8000494:	4618      	mov	r0, r3
 8000496:	f003 fe31 	bl	80040fc <HAL_RCC_ClockConfig>
}
 800049a:	bf00      	nop
 800049c:	3770      	adds	r7, #112	; 0x70
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 80004a4:	b480      	push	{r7}
 80004a6:	b08b      	sub	sp, #44	; 0x2c
 80004a8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004aa:	f107 0314 	add.w	r3, r7, #20
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
 80004b2:	605a      	str	r2, [r3, #4]
 80004b4:	609a      	str	r2, [r3, #8]
 80004b6:	60da      	str	r2, [r3, #12]
 80004b8:	611a      	str	r2, [r3, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004ba:	4b28      	ldr	r3, [pc, #160]	; (800055c <MX_GPIO_Init+0xb8>)
 80004bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c0:	4a26      	ldr	r2, [pc, #152]	; (800055c <MX_GPIO_Init+0xb8>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004ca:	4b24      	ldr	r3, [pc, #144]	; (800055c <MX_GPIO_Init+0xb8>)
 80004cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d0:	f003 0301 	and.w	r3, r3, #1
 80004d4:	613b      	str	r3, [r7, #16]
 80004d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d8:	4b20      	ldr	r3, [pc, #128]	; (800055c <MX_GPIO_Init+0xb8>)
 80004da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <MX_GPIO_Init+0xb8>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e8:	4b1c      	ldr	r3, [pc, #112]	; (800055c <MX_GPIO_Init+0xb8>)
 80004ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004ee:	f003 0302 	and.w	r3, r3, #2
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80004f6:	4b19      	ldr	r3, [pc, #100]	; (800055c <MX_GPIO_Init+0xb8>)
 80004f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004fc:	4a17      	ldr	r2, [pc, #92]	; (800055c <MX_GPIO_Init+0xb8>)
 80004fe:	f043 0304 	orr.w	r3, r3, #4
 8000502:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <MX_GPIO_Init+0xb8>)
 8000508:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800050c:	f003 0304 	and.w	r3, r3, #4
 8000510:	60bb      	str	r3, [r7, #8]
 8000512:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000514:	4b11      	ldr	r3, [pc, #68]	; (800055c <MX_GPIO_Init+0xb8>)
 8000516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800051a:	4a10      	ldr	r2, [pc, #64]	; (800055c <MX_GPIO_Init+0xb8>)
 800051c:	f043 0308 	orr.w	r3, r3, #8
 8000520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <MX_GPIO_Init+0xb8>)
 8000526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800052a:	f003 0308 	and.w	r3, r3, #8
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000532:	4b0a      	ldr	r3, [pc, #40]	; (800055c <MX_GPIO_Init+0xb8>)
 8000534:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000538:	4a08      	ldr	r2, [pc, #32]	; (800055c <MX_GPIO_Init+0xb8>)
 800053a:	f043 0310 	orr.w	r3, r3, #16
 800053e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000542:	4b06      	ldr	r3, [pc, #24]	; (800055c <MX_GPIO_Init+0xb8>)
 8000544:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000548:	f003 0310 	and.w	r3, r3, #16
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

    // Configure GPIO for OV7670 and other peripherals
    // Example: GPIO_InitStruct.Pin = GPIO_PIN_X; GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
}
 8000550:	bf00      	nop
 8000552:	372c      	adds	r7, #44	; 0x2c
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr
 800055c:	58024400 	.word	0x58024400

08000560 <MX_DMA_Init>:

static void MX_DMA_Init(void) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
    __HAL_RCC_DMA1_CLK_ENABLE();
 8000566:	4b0d      	ldr	r3, [pc, #52]	; (800059c <MX_DMA_Init+0x3c>)
 8000568:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800056c:	4a0b      	ldr	r2, [pc, #44]	; (800059c <MX_DMA_Init+0x3c>)
 800056e:	f043 0301 	orr.w	r3, r3, #1
 8000572:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000576:	4b09      	ldr	r3, [pc, #36]	; (800059c <MX_DMA_Init+0x3c>)
 8000578:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800057c:	f003 0301 	and.w	r3, r3, #1
 8000580:	607b      	str	r3, [r7, #4]
 8000582:	687b      	ldr	r3, [r7, #4]

    HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000584:	2200      	movs	r2, #0
 8000586:	2100      	movs	r1, #0
 8000588:	200b      	movs	r0, #11
 800058a:	f000 fd16 	bl	8000fba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800058e:	200b      	movs	r0, #11
 8000590:	f000 fd2d 	bl	8000fee <HAL_NVIC_EnableIRQ>
}
 8000594:	bf00      	nop
 8000596:	3708      	adds	r7, #8
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	58024400 	.word	0x58024400

080005a0 <MX_I2C1_Init>:

static void MX_I2C1_Init(void) {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005a6:	4a0d      	ldr	r2, [pc, #52]	; (80005dc <MX_I2C1_Init+0x3c>)
 80005a8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.Timing = 0x00303D5B;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005ac:	4a0c      	ldr	r2, [pc, #48]	; (80005e0 <MX_I2C1_Init+0x40>)
 80005ae:	605a      	str	r2, [r3, #4]
    hi2c1.Init.OwnAddress1 = 0;
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b6:	4b08      	ldr	r3, [pc, #32]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	60da      	str	r2, [r3, #12]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005be:	2200      	movs	r2, #0
 80005c0:	611a      	str	r2, [r3, #16]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c2:	4b05      	ldr	r3, [pc, #20]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005c8:	4b03      	ldr	r3, [pc, #12]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	621a      	str	r2, [r3, #32]
    HAL_I2C_Init(&hi2c1);
 80005ce:	4802      	ldr	r0, [pc, #8]	; (80005d8 <MX_I2C1_Init+0x38>)
 80005d0:	f002 fd12 	bl	8002ff8 <HAL_I2C_Init>
}
 80005d4:	bf00      	nop
 80005d6:	bd80      	pop	{r7, pc}
 80005d8:	2400a948 	.word	0x2400a948
 80005dc:	40005400 	.word	0x40005400
 80005e0:	00303d5b 	.word	0x00303d5b

080005e4 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af00      	add	r7, sp, #0
    TIM_OC_InitTypeDef sConfigOC = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
 80005f6:	611a      	str	r2, [r3, #16]
 80005f8:	615a      	str	r2, [r3, #20]
 80005fa:	619a      	str	r2, [r3, #24]

    htim1.Instance = TIM1;
 80005fc:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_TIM1_Init+0x68>)
 80005fe:	4a14      	ldr	r2, [pc, #80]	; (8000650 <MX_TIM1_Init+0x6c>)
 8000600:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 0;
 8000602:	4b12      	ldr	r3, [pc, #72]	; (800064c <MX_TIM1_Init+0x68>)
 8000604:	2200      	movs	r2, #0
 8000606:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000608:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_TIM1_Init+0x68>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 7;
 800060e:	4b0f      	ldr	r3, [pc, #60]	; (800064c <MX_TIM1_Init+0x68>)
 8000610:	2207      	movs	r2, #7
 8000612:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_TIM1_Init+0x68>)
 8000616:	2200      	movs	r2, #0
 8000618:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800061a:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_TIM1_Init+0x68>)
 800061c:	2200      	movs	r2, #0
 800061e:	615a      	str	r2, [r3, #20]
    HAL_TIM_PWM_Init(&htim1);
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <MX_TIM1_Init+0x68>)
 8000622:	f004 f89b 	bl	800475c <HAL_TIM_PWM_Init>

    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 4;
 800062a:	2304      	movs	r3, #4
 800062c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800062e:	2300      	movs	r3, #0
 8000630:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000632:	2300      	movs	r3, #0
 8000634:	617b      	str	r3, [r7, #20]
    HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1);
 8000636:	1d3b      	adds	r3, r7, #4
 8000638:	2200      	movs	r2, #0
 800063a:	4619      	mov	r1, r3
 800063c:	4803      	ldr	r0, [pc, #12]	; (800064c <MX_TIM1_Init+0x68>)
 800063e:	f004 f9f3 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
}
 8000642:	bf00      	nop
 8000644:	3720      	adds	r7, #32
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	2400a99c 	.word	0x2400a99c
 8000650:	40010000 	.word	0x40010000

08000654 <MX_DCMI_Init>:

static void MX_DCMI_Init(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
    hdcmi.Instance = DCMI;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_DCMI_Init+0x38>)
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <MX_DCMI_Init+0x3c>)
 800065c:	601a      	str	r2, [r3, #0]
    hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_DCMI_Init+0x38>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
    hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_DCMI_Init+0x38>)
 8000666:	2220      	movs	r2, #32
 8000668:	609a      	str	r2, [r3, #8]
    hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_DCMI_Init+0x38>)
 800066c:	2280      	movs	r2, #128	; 0x80
 800066e:	60da      	str	r2, [r3, #12]
    hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_DCMI_Init+0x38>)
 8000672:	2240      	movs	r2, #64	; 0x40
 8000674:	611a      	str	r2, [r3, #16]
    hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_DCMI_Init+0x38>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
    hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <MX_DCMI_Init+0x38>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
    HAL_DCMI_Init(&hdcmi);
 8000682:	4802      	ldr	r0, [pc, #8]	; (800068c <MX_DCMI_Init+0x38>)
 8000684:	f000 fcce 	bl	8001024 <HAL_DCMI_Init>
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	2400a9e8 	.word	0x2400a9e8
 8000690:	48020000 	.word	0x48020000

08000694 <OV7670_Init>:
#include "ov7670.h"

#define OV7670_I2C_ADDRESS 0x42

void OV7670_Init(I2C_HandleTypeDef *hi2c, OV7670_Resolution resolution) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	70fb      	strb	r3, [r7, #3]
    // Reset camera
    OV7670_WriteRegister(hi2c, 0x12, 0x80);
 80006a0:	2280      	movs	r2, #128	; 0x80
 80006a2:	2112      	movs	r1, #18
 80006a4:	6878      	ldr	r0, [r7, #4]
 80006a6:	f000 f845 	bl	8000734 <OV7670_WriteRegister>
    HAL_Delay(100);
 80006aa:	2064      	movs	r0, #100	; 0x64
 80006ac:	f000 fb7a 	bl	8000da4 <HAL_Delay>

    // Configure resolution
    if (resolution == OV7670_QVGA) {
 80006b0:	78fb      	ldrb	r3, [r7, #3]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d105      	bne.n	80006c2 <OV7670_Init+0x2e>
        OV7670_WriteRegister(hi2c, 0x12, 0x14); // QVGA mode, RGB565
 80006b6:	2214      	movs	r2, #20
 80006b8:	2112      	movs	r1, #18
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f000 f83a 	bl	8000734 <OV7670_WriteRegister>
 80006c0:	e007      	b.n	80006d2 <OV7670_Init+0x3e>
    } else if (resolution == OV7670_VGA) {
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d104      	bne.n	80006d2 <OV7670_Init+0x3e>
        OV7670_WriteRegister(hi2c, 0x12, 0x00); // VGA mode, RGB565
 80006c8:	2200      	movs	r2, #0
 80006ca:	2112      	movs	r1, #18
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f000 f831 	bl	8000734 <OV7670_WriteRegister>
    }

    // Configure for 120x120 resolution using scaler and cropping
    OV7670_WriteRegister(hi2c, 0x72, 0x22); // Horizontal scaling factor (approx. 1/3)
 80006d2:	2222      	movs	r2, #34	; 0x22
 80006d4:	2172      	movs	r1, #114	; 0x72
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f82c 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x73, 0x22); // Vertical scaling factor (1/2)
 80006dc:	2222      	movs	r2, #34	; 0x22
 80006de:	2173      	movs	r1, #115	; 0x73
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f000 f827 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x17, 0x3F); // Horizontal start
 80006e6:	223f      	movs	r2, #63	; 0x3f
 80006e8:	2117      	movs	r1, #23
 80006ea:	6878      	ldr	r0, [r7, #4]
 80006ec:	f000 f822 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x18, 0xC0); // Horizontal stop
 80006f0:	22c0      	movs	r2, #192	; 0xc0
 80006f2:	2118      	movs	r1, #24
 80006f4:	6878      	ldr	r0, [r7, #4]
 80006f6:	f000 f81d 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x19, 0x03); // Vertical start
 80006fa:	2203      	movs	r2, #3
 80006fc:	2119      	movs	r1, #25
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f818 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x1A, 0x7B); // Vertical stop
 8000704:	227b      	movs	r2, #123	; 0x7b
 8000706:	211a      	movs	r1, #26
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f000 f813 	bl	8000734 <OV7670_WriteRegister>

    // Additional settings for color format, gamma, etc.
    OV7670_WriteRegister(hi2c, 0x3A, 0x04); // Set RGB565 format
 800070e:	2204      	movs	r2, #4
 8000710:	213a      	movs	r1, #58	; 0x3a
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f80e 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x40, 0xD0); // RGB scaling
 8000718:	22d0      	movs	r2, #208	; 0xd0
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f000 f809 	bl	8000734 <OV7670_WriteRegister>
    OV7670_WriteRegister(hi2c, 0x11, 0x01); // Configure clock prescaler
 8000722:	2201      	movs	r2, #1
 8000724:	2111      	movs	r1, #17
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f804 	bl	8000734 <OV7670_WriteRegister>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <OV7670_WriteRegister>:

void OV7670_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t value) {
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af04      	add	r7, sp, #16
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	4613      	mov	r3, r2
 8000742:	70bb      	strb	r3, [r7, #2]
    HAL_I2C_Mem_Write(hi2c, OV7670_I2C_ADDRESS, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000744:	78fb      	ldrb	r3, [r7, #3]
 8000746:	b29a      	uxth	r2, r3
 8000748:	f04f 33ff 	mov.w	r3, #4294967295
 800074c:	9302      	str	r3, [sp, #8]
 800074e:	2301      	movs	r3, #1
 8000750:	9301      	str	r3, [sp, #4]
 8000752:	1cbb      	adds	r3, r7, #2
 8000754:	9300      	str	r3, [sp, #0]
 8000756:	2301      	movs	r3, #1
 8000758:	2142      	movs	r1, #66	; 0x42
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f002 fcf2 	bl	8003144 <HAL_I2C_Mem_Write>
}
 8000760:	bf00      	nop
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800076e:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <HAL_MspInit+0x30>)
 8000770:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000774:	4a08      	ldr	r2, [pc, #32]	; (8000798 <HAL_MspInit+0x30>)
 8000776:	f043 0302 	orr.w	r3, r3, #2
 800077a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <HAL_MspInit+0x30>)
 8000780:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000784:	f003 0302 	and.w	r3, r3, #2
 8000788:	607b      	str	r3, [r7, #4]
 800078a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078c:	bf00      	nop
 800078e:	370c      	adds	r7, #12
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	58024400 	.word	0x58024400

0800079c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b08e      	sub	sp, #56	; 0x38
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a59      	ldr	r2, [pc, #356]	; (8000920 <HAL_DCMI_MspInit+0x184>)
 80007ba:	4293      	cmp	r3, r2
 80007bc:	f040 80ac 	bne.w	8000918 <HAL_DCMI_MspInit+0x17c>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 80007c0:	4b58      	ldr	r3, [pc, #352]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007c2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80007c6:	4a57      	ldr	r2, [pc, #348]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80007d0:	4b54      	ldr	r3, [pc, #336]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007d2:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80007d6:	f003 0301 	and.w	r3, r3, #1
 80007da:	623b      	str	r3, [r7, #32]
 80007dc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80007de:	4b51      	ldr	r3, [pc, #324]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007e4:	4a4f      	ldr	r2, [pc, #316]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007e6:	f043 0310 	orr.w	r3, r3, #16
 80007ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007ee:	4b4d      	ldr	r3, [pc, #308]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007f4:	f003 0310 	and.w	r3, r3, #16
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fc:	4b49      	ldr	r3, [pc, #292]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 80007fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000802:	4a48      	ldr	r2, [pc, #288]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800080c:	4b45      	ldr	r3, [pc, #276]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800080e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
 8000818:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800081a:	4b42      	ldr	r3, [pc, #264]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800081c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000820:	4a40      	ldr	r2, [pc, #256]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082a:	4b3e      	ldr	r3, [pc, #248]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800082c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000830:	f003 0304 	and.w	r3, r3, #4
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000838:	4b3a      	ldr	r3, [pc, #232]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800083a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800083e:	4a39      	ldr	r2, [pc, #228]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000848:	4b36      	ldr	r3, [pc, #216]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800084a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	613b      	str	r3, [r7, #16]
 8000854:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000856:	4b33      	ldr	r3, [pc, #204]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 8000858:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800085c:	4a31      	ldr	r2, [pc, #196]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 800085e:	f043 0302 	orr.w	r3, r3, #2
 8000862:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000866:	4b2f      	ldr	r3, [pc, #188]	; (8000924 <HAL_DCMI_MspInit+0x188>)
 8000868:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800086c:	f003 0302 	and.w	r3, r3, #2
 8000870:	60fb      	str	r3, [r7, #12]
 8000872:	68fb      	ldr	r3, [r7, #12]
    PA10     ------> DCMI_D1
    PC11     ------> DCMI_D4
    PD3     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000878:	2302      	movs	r3, #2
 800087a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000884:	230d      	movs	r3, #13
 8000886:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	4826      	ldr	r0, [pc, #152]	; (8000928 <HAL_DCMI_MspInit+0x18c>)
 8000890:	f002 fa02 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_9|GPIO_PIN_10;
 8000894:	f44f 63ca 	mov.w	r3, #1616	; 0x650
 8000898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008a6:	230d      	movs	r3, #13
 80008a8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	481e      	ldr	r0, [pc, #120]	; (800092c <HAL_DCMI_MspInit+0x190>)
 80008b2:	f002 f9f1 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11;
 80008b6:	f44f 6330 	mov.w	r3, #2816	; 0xb00
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008c8:	230d      	movs	r3, #13
 80008ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4817      	ldr	r0, [pc, #92]	; (8000930 <HAL_DCMI_MspInit+0x194>)
 80008d4:	f002 f9e0 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008d8:	2308      	movs	r3, #8
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e4:	2300      	movs	r3, #0
 80008e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008e8:	230d      	movs	r3, #13
 80008ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4810      	ldr	r0, [pc, #64]	; (8000934 <HAL_DCMI_MspInit+0x198>)
 80008f4:	f002 f9d0 	bl	8002c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80008f8:	2380      	movs	r3, #128	; 0x80
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fc:	2302      	movs	r3, #2
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000908:	230d      	movs	r3, #13
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	4809      	ldr	r0, [pc, #36]	; (8000938 <HAL_DCMI_MspInit+0x19c>)
 8000914:	f002 f9c0 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000918:	bf00      	nop
 800091a:	3738      	adds	r7, #56	; 0x38
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	48020000 	.word	0x48020000
 8000924:	58024400 	.word	0x58024400
 8000928:	58021000 	.word	0x58021000
 800092c:	58020000 	.word	0x58020000
 8000930:	58020800 	.word	0x58020800
 8000934:	58020c00 	.word	0x58020c00
 8000938:	58020400 	.word	0x58020400

0800093c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800093c:	b480      	push	{r7}
 800093e:	b085      	sub	sp, #20
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4a0b      	ldr	r2, [pc, #44]	; (8000978 <HAL_TIM_PWM_MspInit+0x3c>)
 800094a:	4293      	cmp	r3, r2
 800094c:	d10e      	bne.n	800096c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_TIM_PWM_MspInit+0x40>)
 8000950:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000954:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_TIM_PWM_MspInit+0x40>)
 8000956:	f043 0301 	orr.w	r3, r3, #1
 800095a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <HAL_TIM_PWM_MspInit+0x40>)
 8000960:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000964:	f003 0301 	and.w	r3, r3, #1
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800096c:	bf00      	nop
 800096e:	3714      	adds	r7, #20
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	40010000 	.word	0x40010000
 800097c:	58024400 	.word	0x58024400

08000980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000984:	e7fe      	b.n	8000984 <NMI_Handler+0x4>

08000986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000986:	b480      	push	{r7}
 8000988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098a:	e7fe      	b.n	800098a <HardFault_Handler+0x4>

0800098c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000990:	e7fe      	b.n	8000990 <MemManage_Handler+0x4>

08000992 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000992:	b480      	push	{r7}
 8000994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000996:	e7fe      	b.n	8000996 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	e7fe      	b.n	800099c <UsageFault_Handler+0x4>

0800099e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099e:	b480      	push	{r7}
 80009a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a2:	bf00      	nop
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009cc:	f000 f9ca 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b086      	sub	sp, #24
 80009d8:	af00      	add	r7, sp, #0
 80009da:	60f8      	str	r0, [r7, #12]
 80009dc:	60b9      	str	r1, [r7, #8]
 80009de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009e0:	2300      	movs	r3, #0
 80009e2:	617b      	str	r3, [r7, #20]
 80009e4:	e00a      	b.n	80009fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009e6:	f3af 8000 	nop.w
 80009ea:	4601      	mov	r1, r0
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	1c5a      	adds	r2, r3, #1
 80009f0:	60ba      	str	r2, [r7, #8]
 80009f2:	b2ca      	uxtb	r2, r1
 80009f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f6:	697b      	ldr	r3, [r7, #20]
 80009f8:	3301      	adds	r3, #1
 80009fa:	617b      	str	r3, [r7, #20]
 80009fc:	697a      	ldr	r2, [r7, #20]
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	429a      	cmp	r2, r3
 8000a02:	dbf0      	blt.n	80009e6 <_read+0x12>
  }

  return len;
 8000a04:	687b      	ldr	r3, [r7, #4]
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3718      	adds	r7, #24
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}

08000a0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a0e:	b580      	push	{r7, lr}
 8000a10:	b086      	sub	sp, #24
 8000a12:	af00      	add	r7, sp, #0
 8000a14:	60f8      	str	r0, [r7, #12]
 8000a16:	60b9      	str	r1, [r7, #8]
 8000a18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	e009      	b.n	8000a34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	3301      	adds	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
 8000a34:	697a      	ldr	r2, [r7, #20]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	dbf1      	blt.n	8000a20 <_write+0x12>
  }
  return len;
 8000a3c:	687b      	ldr	r3, [r7, #4]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3718      	adds	r7, #24
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <_close>:

int _close(int file)
{
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b083      	sub	sp, #12
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr

08000a7e <_isatty>:

int _isatty(int file)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	b083      	sub	sp, #12
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	370c      	adds	r7, #12
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr

08000a94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	60f8      	str	r0, [r7, #12]
 8000a9c:	60b9      	str	r1, [r7, #8]
 8000a9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000aa0:	2300      	movs	r3, #0
}
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	3714      	adds	r7, #20
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab8:	4a14      	ldr	r2, [pc, #80]	; (8000b0c <_sbrk+0x5c>)
 8000aba:	4b15      	ldr	r3, [pc, #84]	; (8000b10 <_sbrk+0x60>)
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac0:	697b      	ldr	r3, [r7, #20]
 8000ac2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <_sbrk+0x64>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d102      	bne.n	8000ad2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <_sbrk+0x64>)
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <_sbrk+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <_sbrk+0x64>)
 8000ad4:	681a      	ldr	r2, [r3, #0]
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4413      	add	r3, r2
 8000ada:	693a      	ldr	r2, [r7, #16]
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d207      	bcs.n	8000af0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae0:	f004 fdac 	bl	800563c <__errno>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	220c      	movs	r2, #12
 8000ae8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	e009      	b.n	8000b04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af6:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <_sbrk+0x64>)
 8000af8:	681a      	ldr	r2, [r3, #0]
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	4413      	add	r3, r2
 8000afe:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <_sbrk+0x64>)
 8000b00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b02:	68fb      	ldr	r3, [r7, #12]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	24080000 	.word	0x24080000
 8000b10:	00000400 	.word	0x00000400
 8000b14:	2400aa38 	.word	0x2400aa38
 8000b18:	2400ab90 	.word	0x2400ab90

08000b1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b20:	4b37      	ldr	r3, [pc, #220]	; (8000c00 <SystemInit+0xe4>)
 8000b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b26:	4a36      	ldr	r2, [pc, #216]	; (8000c00 <SystemInit+0xe4>)
 8000b28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b30:	4b34      	ldr	r3, [pc, #208]	; (8000c04 <SystemInit+0xe8>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	2b06      	cmp	r3, #6
 8000b3a:	d807      	bhi.n	8000b4c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b3c:	4b31      	ldr	r3, [pc, #196]	; (8000c04 <SystemInit+0xe8>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	f023 030f 	bic.w	r3, r3, #15
 8000b44:	4a2f      	ldr	r2, [pc, #188]	; (8000c04 <SystemInit+0xe8>)
 8000b46:	f043 0307 	orr.w	r3, r3, #7
 8000b4a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000b4c:	4b2e      	ldr	r3, [pc, #184]	; (8000c08 <SystemInit+0xec>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a2d      	ldr	r2, [pc, #180]	; (8000c08 <SystemInit+0xec>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000b58:	4b2b      	ldr	r3, [pc, #172]	; (8000c08 <SystemInit+0xec>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <SystemInit+0xec>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	4929      	ldr	r1, [pc, #164]	; (8000c08 <SystemInit+0xec>)
 8000b64:	4b29      	ldr	r3, [pc, #164]	; (8000c0c <SystemInit+0xf0>)
 8000b66:	4013      	ands	r3, r2
 8000b68:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000b6a:	4b26      	ldr	r3, [pc, #152]	; (8000c04 <SystemInit+0xe8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d007      	beq.n	8000b86 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000b76:	4b23      	ldr	r3, [pc, #140]	; (8000c04 <SystemInit+0xe8>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	f023 030f 	bic.w	r3, r3, #15
 8000b7e:	4a21      	ldr	r2, [pc, #132]	; (8000c04 <SystemInit+0xe8>)
 8000b80:	f043 0307 	orr.w	r3, r3, #7
 8000b84:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000b86:	4b20      	ldr	r3, [pc, #128]	; (8000c08 <SystemInit+0xec>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <SystemInit+0xec>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <SystemInit+0xec>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <SystemInit+0xec>)
 8000b9a:	4a1d      	ldr	r2, [pc, #116]	; (8000c10 <SystemInit+0xf4>)
 8000b9c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <SystemInit+0xec>)
 8000ba0:	4a1c      	ldr	r2, [pc, #112]	; (8000c14 <SystemInit+0xf8>)
 8000ba2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ba4:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <SystemInit+0xec>)
 8000ba6:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <SystemInit+0xfc>)
 8000ba8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000baa:	4b17      	ldr	r3, [pc, #92]	; (8000c08 <SystemInit+0xec>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <SystemInit+0xec>)
 8000bb2:	4a19      	ldr	r2, [pc, #100]	; (8000c18 <SystemInit+0xfc>)
 8000bb4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000bb6:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <SystemInit+0xec>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <SystemInit+0xec>)
 8000bbe:	4a16      	ldr	r2, [pc, #88]	; (8000c18 <SystemInit+0xfc>)
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000bc2:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <SystemInit+0xec>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000bc8:	4b0f      	ldr	r3, [pc, #60]	; (8000c08 <SystemInit+0xec>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <SystemInit+0xec>)
 8000bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bd2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <SystemInit+0xec>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000bda:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <SystemInit+0x100>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	4b10      	ldr	r3, [pc, #64]	; (8000c20 <SystemInit+0x104>)
 8000be0:	4013      	ands	r3, r2
 8000be2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000be6:	d202      	bcs.n	8000bee <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000be8:	4b0e      	ldr	r3, [pc, #56]	; (8000c24 <SystemInit+0x108>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <SystemInit+0x10c>)
 8000bf0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000bf4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	e000ed00 	.word	0xe000ed00
 8000c04:	52002000 	.word	0x52002000
 8000c08:	58024400 	.word	0x58024400
 8000c0c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000c10:	02020200 	.word	0x02020200
 8000c14:	01ff0000 	.word	0x01ff0000
 8000c18:	01010280 	.word	0x01010280
 8000c1c:	5c001000 	.word	0x5c001000
 8000c20:	ffff0000 	.word	0xffff0000
 8000c24:	51008108 	.word	0x51008108
 8000c28:	52004000 	.word	0x52004000

08000c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c30:	f7ff ff74 	bl	8000b1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c34:	480c      	ldr	r0, [pc, #48]	; (8000c68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c36:	490d      	ldr	r1, [pc, #52]	; (8000c6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c38:	4a0d      	ldr	r2, [pc, #52]	; (8000c70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c3c:	e002      	b.n	8000c44 <LoopCopyDataInit>

08000c3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c42:	3304      	adds	r3, #4

08000c44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c48:	d3f9      	bcc.n	8000c3e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c4a:	4a0a      	ldr	r2, [pc, #40]	; (8000c74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c4c:	4c0a      	ldr	r4, [pc, #40]	; (8000c78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c50:	e001      	b.n	8000c56 <LoopFillZerobss>

08000c52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c54:	3204      	adds	r2, #4

08000c56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c58:	d3fb      	bcc.n	8000c52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c5a:	f004 fcf5 	bl	8005648 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c5e:	f7ff fbb3 	bl	80003c8 <main>
  bx  lr
 8000c62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c64:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000c68:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000c6c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000c70:	0800627c 	.word	0x0800627c
  ldr r2, =_sbss
 8000c74:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000c78:	2400ab8c 	.word	0x2400ab8c

08000c7c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c7c:	e7fe      	b.n	8000c7c <ADC3_IRQHandler>
	...

08000c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c86:	2003      	movs	r0, #3
 8000c88:	f000 f98c 	bl	8000fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000c8c:	f003 fbec 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8000c90:	4602      	mov	r2, r0
 8000c92:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <HAL_Init+0x68>)
 8000c94:	699b      	ldr	r3, [r3, #24]
 8000c96:	0a1b      	lsrs	r3, r3, #8
 8000c98:	f003 030f 	and.w	r3, r3, #15
 8000c9c:	4913      	ldr	r1, [pc, #76]	; (8000cec <HAL_Init+0x6c>)
 8000c9e:	5ccb      	ldrb	r3, [r1, r3]
 8000ca0:	f003 031f 	and.w	r3, r3, #31
 8000ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ca8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000caa:	4b0f      	ldr	r3, [pc, #60]	; (8000ce8 <HAL_Init+0x68>)
 8000cac:	699b      	ldr	r3, [r3, #24]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	4a0e      	ldr	r2, [pc, #56]	; (8000cec <HAL_Init+0x6c>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	f003 031f 	and.w	r3, r3, #31
 8000cba:	687a      	ldr	r2, [r7, #4]
 8000cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8000cc0:	4a0b      	ldr	r2, [pc, #44]	; (8000cf0 <HAL_Init+0x70>)
 8000cc2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000cc4:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <HAL_Init+0x74>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cca:	200f      	movs	r0, #15
 8000ccc:	f000 f814 	bl	8000cf8 <HAL_InitTick>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e002      	b.n	8000ce0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000cda:	f7ff fd45 	bl	8000768 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	3708      	adds	r7, #8
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024400 	.word	0x58024400
 8000cec:	08006230 	.word	0x08006230
 8000cf0:	24000004 	.word	0x24000004
 8000cf4:	24000000 	.word	0x24000000

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d00:	4b15      	ldr	r3, [pc, #84]	; (8000d58 <HAL_InitTick+0x60>)
 8000d02:	781b      	ldrb	r3, [r3, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d101      	bne.n	8000d0c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	e021      	b.n	8000d50 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <HAL_InitTick+0x64>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <HAL_InitTick+0x60>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	4619      	mov	r1, r3
 8000d16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 f971 	bl	800100a <HAL_SYSTICK_Config>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00e      	b.n	8000d50 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	2b0f      	cmp	r3, #15
 8000d36:	d80a      	bhi.n	8000d4e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	6879      	ldr	r1, [r7, #4]
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f000 f93b 	bl	8000fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d44:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <HAL_InitTick+0x68>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	e000      	b.n	8000d50 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2400000c 	.word	0x2400000c
 8000d5c:	24000000 	.word	0x24000000
 8000d60:	24000008 	.word	0x24000008

08000d64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	2400000c 	.word	0x2400000c
 8000d88:	2400aa3c 	.word	0x2400aa3c

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	2400aa3c 	.word	0x2400aa3c

08000da4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dac:	f7ff ffee 	bl	8000d8c <HAL_GetTick>
 8000db0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dbc:	d005      	beq.n	8000dca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dbe:	4b0a      	ldr	r3, [pc, #40]	; (8000de8 <HAL_Delay+0x44>)
 8000dc0:	781b      	ldrb	r3, [r3, #0]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	4413      	add	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dca:	bf00      	nop
 8000dcc:	f7ff ffde 	bl	8000d8c <HAL_GetTick>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68bb      	ldr	r3, [r7, #8]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	68fa      	ldr	r2, [r7, #12]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d8f7      	bhi.n	8000dcc <HAL_Delay+0x28>
  {
  }
}
 8000ddc:	bf00      	nop
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	2400000c 	.word	0x2400000c

08000dec <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000df0:	4b03      	ldr	r3, [pc, #12]	; (8000e00 <HAL_GetREVID+0x14>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	0c1b      	lsrs	r3, r3, #16
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	5c001000 	.word	0x5c001000

08000e04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f003 0307 	and.w	r3, r3, #7
 8000e12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e16:	68db      	ldr	r3, [r3, #12]
 8000e18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e20:	4013      	ands	r3, r2
 8000e22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <__NVIC_SetPriorityGrouping+0x44>)
 8000e2e:	4313      	orrs	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e32:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <__NVIC_SetPriorityGrouping+0x40>)
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	60d3      	str	r3, [r2, #12]
}
 8000e38:	bf00      	nop
 8000e3a:	3714      	adds	r7, #20
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	e000ed00 	.word	0xe000ed00
 8000e48:	05fa0000 	.word	0x05fa0000

08000e4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e50:	4b04      	ldr	r3, [pc, #16]	; (8000e64 <__NVIC_GetPriorityGrouping+0x18>)
 8000e52:	68db      	ldr	r3, [r3, #12]
 8000e54:	0a1b      	lsrs	r3, r3, #8
 8000e56:	f003 0307 	and.w	r3, r3, #7
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	e000ed00 	.word	0xe000ed00

08000e68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	4603      	mov	r3, r0
 8000e70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000e72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	db0b      	blt.n	8000e92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e7a:	88fb      	ldrh	r3, [r7, #6]
 8000e7c:	f003 021f 	and.w	r2, r3, #31
 8000e80:	4907      	ldr	r1, [pc, #28]	; (8000ea0 <__NVIC_EnableIRQ+0x38>)
 8000e82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e86:	095b      	lsrs	r3, r3, #5
 8000e88:	2001      	movs	r0, #1
 8000e8a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e92:	bf00      	nop
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	e000e100 	.word	0xe000e100

08000ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	6039      	str	r1, [r7, #0]
 8000eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	db0a      	blt.n	8000ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	490c      	ldr	r1, [pc, #48]	; (8000ef0 <__NVIC_SetPriority+0x4c>)
 8000ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ec2:	0112      	lsls	r2, r2, #4
 8000ec4:	b2d2      	uxtb	r2, r2
 8000ec6:	440b      	add	r3, r1
 8000ec8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ecc:	e00a      	b.n	8000ee4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ece:	683b      	ldr	r3, [r7, #0]
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	4908      	ldr	r1, [pc, #32]	; (8000ef4 <__NVIC_SetPriority+0x50>)
 8000ed4:	88fb      	ldrh	r3, [r7, #6]
 8000ed6:	f003 030f 	and.w	r3, r3, #15
 8000eda:	3b04      	subs	r3, #4
 8000edc:	0112      	lsls	r2, r2, #4
 8000ede:	b2d2      	uxtb	r2, r2
 8000ee0:	440b      	add	r3, r1
 8000ee2:	761a      	strb	r2, [r3, #24]
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	e000e100 	.word	0xe000e100
 8000ef4:	e000ed00 	.word	0xe000ed00

08000ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b089      	sub	sp, #36	; 0x24
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60f8      	str	r0, [r7, #12]
 8000f00:	60b9      	str	r1, [r7, #8]
 8000f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	f1c3 0307 	rsb	r3, r3, #7
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	bf28      	it	cs
 8000f16:	2304      	movcs	r3, #4
 8000f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	3304      	adds	r3, #4
 8000f1e:	2b06      	cmp	r3, #6
 8000f20:	d902      	bls.n	8000f28 <NVIC_EncodePriority+0x30>
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	3b03      	subs	r3, #3
 8000f26:	e000      	b.n	8000f2a <NVIC_EncodePriority+0x32>
 8000f28:	2300      	movs	r3, #0
 8000f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	43da      	mvns	r2, r3
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f40:	f04f 31ff 	mov.w	r1, #4294967295
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	fa01 f303 	lsl.w	r3, r1, r3
 8000f4a:	43d9      	mvns	r1, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f50:	4313      	orrs	r3, r2
         );
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3724      	adds	r7, #36	; 0x24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
	...

08000f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f70:	d301      	bcc.n	8000f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f72:	2301      	movs	r3, #1
 8000f74:	e00f      	b.n	8000f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f76:	4a0a      	ldr	r2, [pc, #40]	; (8000fa0 <SysTick_Config+0x40>)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f7e:	210f      	movs	r1, #15
 8000f80:	f04f 30ff 	mov.w	r0, #4294967295
 8000f84:	f7ff ff8e 	bl	8000ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f88:	4b05      	ldr	r3, [pc, #20]	; (8000fa0 <SysTick_Config+0x40>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f8e:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <SysTick_Config+0x40>)
 8000f90:	2207      	movs	r2, #7
 8000f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3708      	adds	r7, #8
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	e000e010 	.word	0xe000e010

08000fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f7ff ff29 	bl	8000e04 <__NVIC_SetPriorityGrouping>
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}

08000fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fba:	b580      	push	{r7, lr}
 8000fbc:	b086      	sub	sp, #24
 8000fbe:	af00      	add	r7, sp, #0
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	60b9      	str	r1, [r7, #8]
 8000fc4:	607a      	str	r2, [r7, #4]
 8000fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fc8:	f7ff ff40 	bl	8000e4c <__NVIC_GetPriorityGrouping>
 8000fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	6978      	ldr	r0, [r7, #20]
 8000fd4:	f7ff ff90 	bl	8000ef8 <NVIC_EncodePriority>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000fde:	4611      	mov	r1, r2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff ff5f 	bl	8000ea4 <__NVIC_SetPriority>
}
 8000fe6:	bf00      	nop
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ff33 	bl	8000e68 <__NVIC_EnableIRQ>
}
 8001002:	bf00      	nop
 8001004:	3708      	adds	r7, #8
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}

0800100a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b082      	sub	sp, #8
 800100e:	af00      	add	r7, sp, #0
 8001010:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	f7ff ffa4 	bl	8000f60 <SysTick_Config>
 8001018:	4603      	mov	r3, r0
}
 800101a:	4618      	mov	r0, r3
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
	...

08001024 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2b00      	cmp	r3, #0
 8001030:	d101      	bne.n	8001036 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 8001032:	2301      	movs	r3, #1
 8001034:	e069      	b.n	800110a <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d102      	bne.n	8001048 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff fbaa 	bl	800079c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2202      	movs	r2, #2
 800104c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d002      	beq.n	800105e <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6819      	ldr	r1, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_DCMI_Init+0xf0>)
 800106a:	400b      	ands	r3, r1
 800106c:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6819      	ldr	r1, [r3, #0]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	695b      	ldr	r3, [r3, #20]
 800107c:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 8001082:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	691b      	ldr	r3, [r3, #16]
 8001088:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800108e:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800109a:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80010a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80010b2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b10      	cmp	r3, #16
 80010c2:	d112      	bne.n	80010ea <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7f1b      	ldrb	r3, [r3, #28]
 80010c8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	7f5b      	ldrb	r3, [r3, #29]
 80010ce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80010d0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	7f9b      	ldrb	r3, [r3, #30]
 80010d6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80010d8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7fdb      	ldrb	r3, [r3, #31]
 80010e0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80010e6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80010e8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68da      	ldr	r2, [r3, #12]
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f042 021e 	orr.w	r2, r2, #30
 80010f8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2200      	movs	r2, #0
 80010fe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2201      	movs	r2, #1
 8001104:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	ffe0f007 	.word	0xffe0f007

08001118 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af02      	add	r7, sp, #8
 800111e:	60f8      	str	r0, [r7, #12]
 8001120:	60b9      	str	r1, [r7, #8]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800112c:	2b01      	cmp	r3, #1
 800112e:	d101      	bne.n	8001134 <HAL_DCMI_Start_DMA+0x1c>
 8001130:	2302      	movs	r3, #2
 8001132:	e0ab      	b.n	800128c <HAL_DCMI_Start_DMA+0x174>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2201      	movs	r2, #1
 8001138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800113c:	68fb      	ldr	r3, [r7, #12]
 800113e:	2202      	movs	r2, #2
 8001140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	681a      	ldr	r2, [r3, #0]
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001152:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f022 0202 	bic.w	r2, r2, #2
 8001162:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	6819      	ldr	r1, [r3, #0]
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	68ba      	ldr	r2, [r7, #8]
 8001170:	430a      	orrs	r2, r1
 8001172:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001178:	4a46      	ldr	r2, [pc, #280]	; (8001294 <HAL_DCMI_Start_DMA+0x17c>)
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001180:	4a45      	ldr	r2, [pc, #276]	; (8001298 <HAL_DCMI_Start_DMA+0x180>)
 8001182:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001188:	2200      	movs	r2, #0
 800118a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	2200      	movs	r2, #0
 8001190:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	2200      	movs	r2, #0
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2200      	movs	r2, #0
 800119c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	2200      	movs	r2, #0
 80011a2:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011aa:	d219      	bcs.n	80011e0 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	3328      	adds	r3, #40	; 0x28
 80011b6:	4619      	mov	r1, r3
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	f000 f988 	bl	80014d0 <HAL_DMA_Start_IT>
 80011c0:	4603      	mov	r3, r0
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d055      	beq.n	8001272 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	2240      	movs	r2, #64	; 0x40
 80011ca:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	e055      	b.n	800128c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011e4:	4a2b      	ldr	r2, [pc, #172]	; (8001294 <HAL_DCMI_Start_DMA+0x17c>)
 80011e6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2201      	movs	r2, #1
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80011fa:	e009      	b.n	8001210 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001200:	085a      	lsrs	r2, r3, #1
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800120a:	005a      	lsls	r2, r3, #1
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001218:	d2f0      	bcs.n	80011fc <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	1e9a      	subs	r2, r3, #2
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001230:	009b      	lsls	r3, r3, #2
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	3328      	adds	r3, #40	; 0x28
 8001242:	4619      	mov	r1, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	687a      	ldr	r2, [r7, #4]
 800124e:	f001 f873 	bl	8002338 <HAL_DMAEx_MultiBufferStart_IT>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d00c      	beq.n	8001272 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	2240      	movs	r2, #64	; 0x40
 800125c:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	2201      	movs	r2, #1
 8001262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e00c      	b.n	800128c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f042 0201 	orr.w	r2, r2, #1
 8001280:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 800128a:	2300      	movs	r3, #0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3718      	adds	r7, #24
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	08001371 	.word	0x08001371
 8001298:	08001497 	.word	0x08001497

0800129c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b084      	sub	sp, #16
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <HAL_DCMI_Stop+0xb8>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a2b      	ldr	r2, [pc, #172]	; (8001358 <HAL_DCMI_Stop+0xbc>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012b4:	fb02 f303 	mul.w	r3, r2, r3
 80012b8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80012ba:	2300      	movs	r3, #0
 80012bc:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d101      	bne.n	80012cc <HAL_DCMI_Stop+0x30>
 80012c8:	2302      	movs	r3, #2
 80012ca:	e03f      	b.n	800134c <HAL_DCMI_Stop+0xb0>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2201      	movs	r2, #1
 80012d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2202      	movs	r2, #2
 80012d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f022 0201 	bic.w	r2, r2, #1
 80012ea:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d108      	bne.n	800130a <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fc:	f043 0220 	orr.w	r2, r3, #32
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001304:	2303      	movs	r3, #3
 8001306:	72fb      	strb	r3, [r7, #11]
      break;
 8001308:	e006      	b.n	8001318 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e9      	bne.n	80012ec <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001326:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132c:	4618      	mov	r0, r3
 800132e:	f000 fb39 	bl	80019a4 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2201      	movs	r2, #1
 800133e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2200      	movs	r2, #0
 8001346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 800134a:	7afb      	ldrb	r3, [r7, #11]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	24000000 	.word	0x24000000
 8001358:	10624dd3 	.word	0x10624dd3

0800135c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800137c:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001382:	2b00      	cmp	r3, #0
 8001384:	d043      	beq.n	800140e <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001392:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001398:	f003 0301 	and.w	r3, r3, #1
 800139c:	2b00      	cmp	r3, #0
 800139e:	d118      	bne.n	80013d2 <DCMI_DMAXferCplt+0x62>
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d015      	beq.n	80013d2 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b8:	00da      	lsls	r2, r3, #3
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	4413      	add	r3, r2
 80013be:	2200      	movs	r2, #0
 80013c0:	4619      	mov	r1, r3
 80013c2:	f001 fb17 	bl	80029f4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013ca:	1e5a      	subs	r2, r3, #1
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	639a      	str	r2, [r3, #56]	; 0x38
 80013d0:	e044      	b.n	800145c <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d13c      	bne.n	800145c <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f4:	00da      	lsls	r2, r3, #3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	4413      	add	r3, r2
 80013fa:	2201      	movs	r2, #1
 80013fc:	4619      	mov	r1, r3
 80013fe:	f001 faf9 	bl	80029f4 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001406:	1e5a      	subs	r2, r3, #1
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	639a      	str	r2, [r3, #56]	; 0x38
 800140c:	e026      	b.n	800145c <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	e017      	b.n	800145c <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10f      	bne.n	800145c <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001446:	0099      	lsls	r1, r3, #2
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	68ba      	ldr	r2, [r7, #8]
 8001450:	440a      	add	r2, r1
 8001452:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	429a      	cmp	r2, r3
 8001466:	d112      	bne.n	800148e <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	68da      	ldr	r2, [r3, #12]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b02      	cmp	r3, #2
 8001484:	d103      	bne.n	800148e <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2201      	movs	r2, #1
 800148a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 800148e:	bf00      	nop
 8001490:	3710      	adds	r7, #16
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a2:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014aa:	2b02      	cmp	r3, #2
 80014ac:	d009      	beq.n	80014c2 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ba:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff ff4a 	bl	800135c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	60f8      	str	r0, [r7, #12]
 80014d8:	60b9      	str	r1, [r7, #8]
 80014da:	607a      	str	r2, [r7, #4]
 80014dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014de:	2300      	movs	r3, #0
 80014e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e226      	b.n	800193a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d101      	bne.n	80014fa <HAL_DMA_Start_IT+0x2a>
 80014f6:	2302      	movs	r3, #2
 80014f8:	e21f      	b.n	800193a <HAL_DMA_Start_IT+0x46a>
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b01      	cmp	r3, #1
 800150c:	f040 820a 	bne.w	8001924 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	2200      	movs	r2, #0
 800151c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a68      	ldr	r2, [pc, #416]	; (80016c4 <HAL_DMA_Start_IT+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d04a      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a66      	ldr	r2, [pc, #408]	; (80016c8 <HAL_DMA_Start_IT+0x1f8>)
 800152e:	4293      	cmp	r3, r2
 8001530:	d045      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a65      	ldr	r2, [pc, #404]	; (80016cc <HAL_DMA_Start_IT+0x1fc>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d040      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a63      	ldr	r2, [pc, #396]	; (80016d0 <HAL_DMA_Start_IT+0x200>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d03b      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a62      	ldr	r2, [pc, #392]	; (80016d4 <HAL_DMA_Start_IT+0x204>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d036      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a60      	ldr	r2, [pc, #384]	; (80016d8 <HAL_DMA_Start_IT+0x208>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d031      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a5f      	ldr	r2, [pc, #380]	; (80016dc <HAL_DMA_Start_IT+0x20c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d02c      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a5d      	ldr	r2, [pc, #372]	; (80016e0 <HAL_DMA_Start_IT+0x210>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d027      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5c      	ldr	r2, [pc, #368]	; (80016e4 <HAL_DMA_Start_IT+0x214>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d022      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a5a      	ldr	r2, [pc, #360]	; (80016e8 <HAL_DMA_Start_IT+0x218>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d01d      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a59      	ldr	r2, [pc, #356]	; (80016ec <HAL_DMA_Start_IT+0x21c>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d018      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a57      	ldr	r2, [pc, #348]	; (80016f0 <HAL_DMA_Start_IT+0x220>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a56      	ldr	r2, [pc, #344]	; (80016f4 <HAL_DMA_Start_IT+0x224>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00e      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a54      	ldr	r2, [pc, #336]	; (80016f8 <HAL_DMA_Start_IT+0x228>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d009      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a53      	ldr	r2, [pc, #332]	; (80016fc <HAL_DMA_Start_IT+0x22c>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d004      	beq.n	80015be <HAL_DMA_Start_IT+0xee>
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a51      	ldr	r2, [pc, #324]	; (8001700 <HAL_DMA_Start_IT+0x230>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d108      	bne.n	80015d0 <HAL_DMA_Start_IT+0x100>
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	e007      	b.n	80015e0 <HAL_DMA_Start_IT+0x110>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f022 0201 	bic.w	r2, r2, #1
 80015de:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	68b9      	ldr	r1, [r7, #8]
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f000 fcfa 	bl	8001fe0 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a34      	ldr	r2, [pc, #208]	; (80016c4 <HAL_DMA_Start_IT+0x1f4>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d04a      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a33      	ldr	r2, [pc, #204]	; (80016c8 <HAL_DMA_Start_IT+0x1f8>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d045      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a31      	ldr	r2, [pc, #196]	; (80016cc <HAL_DMA_Start_IT+0x1fc>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d040      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a30      	ldr	r2, [pc, #192]	; (80016d0 <HAL_DMA_Start_IT+0x200>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d03b      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a2e      	ldr	r2, [pc, #184]	; (80016d4 <HAL_DMA_Start_IT+0x204>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d036      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2d      	ldr	r2, [pc, #180]	; (80016d8 <HAL_DMA_Start_IT+0x208>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d031      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a2b      	ldr	r2, [pc, #172]	; (80016dc <HAL_DMA_Start_IT+0x20c>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d02c      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a2a      	ldr	r2, [pc, #168]	; (80016e0 <HAL_DMA_Start_IT+0x210>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d027      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a28      	ldr	r2, [pc, #160]	; (80016e4 <HAL_DMA_Start_IT+0x214>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d022      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a27      	ldr	r2, [pc, #156]	; (80016e8 <HAL_DMA_Start_IT+0x218>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d01d      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a25      	ldr	r2, [pc, #148]	; (80016ec <HAL_DMA_Start_IT+0x21c>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d018      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a24      	ldr	r2, [pc, #144]	; (80016f0 <HAL_DMA_Start_IT+0x220>)
 8001660:	4293      	cmp	r3, r2
 8001662:	d013      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <HAL_DMA_Start_IT+0x224>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00e      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a21      	ldr	r2, [pc, #132]	; (80016f8 <HAL_DMA_Start_IT+0x228>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d009      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1f      	ldr	r2, [pc, #124]	; (80016fc <HAL_DMA_Start_IT+0x22c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d004      	beq.n	800168c <HAL_DMA_Start_IT+0x1bc>
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <HAL_DMA_Start_IT+0x230>)
 8001688:	4293      	cmp	r3, r2
 800168a:	d101      	bne.n	8001690 <HAL_DMA_Start_IT+0x1c0>
 800168c:	2301      	movs	r3, #1
 800168e:	e000      	b.n	8001692 <HAL_DMA_Start_IT+0x1c2>
 8001690:	2300      	movs	r3, #0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d036      	beq.n	8001704 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f023 021e 	bic.w	r2, r3, #30
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f042 0216 	orr.w	r2, r2, #22
 80016a8:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d03e      	beq.n	8001730 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f042 0208 	orr.w	r2, r2, #8
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	e035      	b.n	8001730 <HAL_DMA_Start_IT+0x260>
 80016c4:	40020010 	.word	0x40020010
 80016c8:	40020028 	.word	0x40020028
 80016cc:	40020040 	.word	0x40020040
 80016d0:	40020058 	.word	0x40020058
 80016d4:	40020070 	.word	0x40020070
 80016d8:	40020088 	.word	0x40020088
 80016dc:	400200a0 	.word	0x400200a0
 80016e0:	400200b8 	.word	0x400200b8
 80016e4:	40020410 	.word	0x40020410
 80016e8:	40020428 	.word	0x40020428
 80016ec:	40020440 	.word	0x40020440
 80016f0:	40020458 	.word	0x40020458
 80016f4:	40020470 	.word	0x40020470
 80016f8:	40020488 	.word	0x40020488
 80016fc:	400204a0 	.word	0x400204a0
 8001700:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f023 020e 	bic.w	r2, r3, #14
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 020a 	orr.w	r2, r2, #10
 8001716:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800171c:	2b00      	cmp	r3, #0
 800171e:	d007      	beq.n	8001730 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0204 	orr.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a83      	ldr	r2, [pc, #524]	; (8001944 <HAL_DMA_Start_IT+0x474>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d072      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a82      	ldr	r2, [pc, #520]	; (8001948 <HAL_DMA_Start_IT+0x478>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d06d      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a80      	ldr	r2, [pc, #512]	; (800194c <HAL_DMA_Start_IT+0x47c>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d068      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a7f      	ldr	r2, [pc, #508]	; (8001950 <HAL_DMA_Start_IT+0x480>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d063      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a7d      	ldr	r2, [pc, #500]	; (8001954 <HAL_DMA_Start_IT+0x484>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d05e      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a7c      	ldr	r2, [pc, #496]	; (8001958 <HAL_DMA_Start_IT+0x488>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d059      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a7a      	ldr	r2, [pc, #488]	; (800195c <HAL_DMA_Start_IT+0x48c>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d054      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a79      	ldr	r2, [pc, #484]	; (8001960 <HAL_DMA_Start_IT+0x490>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04f      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a77      	ldr	r2, [pc, #476]	; (8001964 <HAL_DMA_Start_IT+0x494>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d04a      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a76      	ldr	r2, [pc, #472]	; (8001968 <HAL_DMA_Start_IT+0x498>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d045      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a74      	ldr	r2, [pc, #464]	; (800196c <HAL_DMA_Start_IT+0x49c>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d040      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a73      	ldr	r2, [pc, #460]	; (8001970 <HAL_DMA_Start_IT+0x4a0>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d03b      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a71      	ldr	r2, [pc, #452]	; (8001974 <HAL_DMA_Start_IT+0x4a4>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d036      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a70      	ldr	r2, [pc, #448]	; (8001978 <HAL_DMA_Start_IT+0x4a8>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d031      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a6e      	ldr	r2, [pc, #440]	; (800197c <HAL_DMA_Start_IT+0x4ac>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d02c      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a6d      	ldr	r2, [pc, #436]	; (8001980 <HAL_DMA_Start_IT+0x4b0>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d027      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a6b      	ldr	r2, [pc, #428]	; (8001984 <HAL_DMA_Start_IT+0x4b4>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d022      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a6a      	ldr	r2, [pc, #424]	; (8001988 <HAL_DMA_Start_IT+0x4b8>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d01d      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a68      	ldr	r2, [pc, #416]	; (800198c <HAL_DMA_Start_IT+0x4bc>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d018      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a67      	ldr	r2, [pc, #412]	; (8001990 <HAL_DMA_Start_IT+0x4c0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d013      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a65      	ldr	r2, [pc, #404]	; (8001994 <HAL_DMA_Start_IT+0x4c4>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d00e      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a64      	ldr	r2, [pc, #400]	; (8001998 <HAL_DMA_Start_IT+0x4c8>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d009      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a62      	ldr	r2, [pc, #392]	; (800199c <HAL_DMA_Start_IT+0x4cc>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d004      	beq.n	8001820 <HAL_DMA_Start_IT+0x350>
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a61      	ldr	r2, [pc, #388]	; (80019a0 <HAL_DMA_Start_IT+0x4d0>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d101      	bne.n	8001824 <HAL_DMA_Start_IT+0x354>
 8001820:	2301      	movs	r3, #1
 8001822:	e000      	b.n	8001826 <HAL_DMA_Start_IT+0x356>
 8001824:	2300      	movs	r3, #0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d01a      	beq.n	8001860 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001846:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184c:	2b00      	cmp	r3, #0
 800184e:	d007      	beq.n	8001860 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800185a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800185e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a37      	ldr	r2, [pc, #220]	; (8001944 <HAL_DMA_Start_IT+0x474>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d04a      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a36      	ldr	r2, [pc, #216]	; (8001948 <HAL_DMA_Start_IT+0x478>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d045      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a34      	ldr	r2, [pc, #208]	; (800194c <HAL_DMA_Start_IT+0x47c>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d040      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a33      	ldr	r2, [pc, #204]	; (8001950 <HAL_DMA_Start_IT+0x480>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d03b      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a31      	ldr	r2, [pc, #196]	; (8001954 <HAL_DMA_Start_IT+0x484>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d036      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a30      	ldr	r2, [pc, #192]	; (8001958 <HAL_DMA_Start_IT+0x488>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d031      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a2e      	ldr	r2, [pc, #184]	; (800195c <HAL_DMA_Start_IT+0x48c>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d02c      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a2d      	ldr	r2, [pc, #180]	; (8001960 <HAL_DMA_Start_IT+0x490>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d027      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a2b      	ldr	r2, [pc, #172]	; (8001964 <HAL_DMA_Start_IT+0x494>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d022      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a2a      	ldr	r2, [pc, #168]	; (8001968 <HAL_DMA_Start_IT+0x498>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d01d      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a28      	ldr	r2, [pc, #160]	; (800196c <HAL_DMA_Start_IT+0x49c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d018      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a27      	ldr	r2, [pc, #156]	; (8001970 <HAL_DMA_Start_IT+0x4a0>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d013      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a25      	ldr	r2, [pc, #148]	; (8001974 <HAL_DMA_Start_IT+0x4a4>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d00e      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a24      	ldr	r2, [pc, #144]	; (8001978 <HAL_DMA_Start_IT+0x4a8>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d009      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a22      	ldr	r2, [pc, #136]	; (800197c <HAL_DMA_Start_IT+0x4ac>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d004      	beq.n	8001900 <HAL_DMA_Start_IT+0x430>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a21      	ldr	r2, [pc, #132]	; (8001980 <HAL_DMA_Start_IT+0x4b0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d108      	bne.n	8001912 <HAL_DMA_Start_IT+0x442>
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 0201 	orr.w	r2, r2, #1
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	e012      	b.n	8001938 <HAL_DMA_Start_IT+0x468>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f042 0201 	orr.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]
 8001922:	e009      	b.n	8001938 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800192a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001938:	7dfb      	ldrb	r3, [r7, #23]
}
 800193a:	4618      	mov	r0, r3
 800193c:	3718      	adds	r7, #24
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40020010 	.word	0x40020010
 8001948:	40020028 	.word	0x40020028
 800194c:	40020040 	.word	0x40020040
 8001950:	40020058 	.word	0x40020058
 8001954:	40020070 	.word	0x40020070
 8001958:	40020088 	.word	0x40020088
 800195c:	400200a0 	.word	0x400200a0
 8001960:	400200b8 	.word	0x400200b8
 8001964:	40020410 	.word	0x40020410
 8001968:	40020428 	.word	0x40020428
 800196c:	40020440 	.word	0x40020440
 8001970:	40020458 	.word	0x40020458
 8001974:	40020470 	.word	0x40020470
 8001978:	40020488 	.word	0x40020488
 800197c:	400204a0 	.word	0x400204a0
 8001980:	400204b8 	.word	0x400204b8
 8001984:	58025408 	.word	0x58025408
 8001988:	5802541c 	.word	0x5802541c
 800198c:	58025430 	.word	0x58025430
 8001990:	58025444 	.word	0x58025444
 8001994:	58025458 	.word	0x58025458
 8001998:	5802546c 	.word	0x5802546c
 800199c:	58025480 	.word	0x58025480
 80019a0:	58025494 	.word	0x58025494

080019a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b086      	sub	sp, #24
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff f9ee 	bl	8000d8c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d101      	bne.n	80019bc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80019b8:	2301      	movs	r3, #1
 80019ba:	e2dc      	b.n	8001f76 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d008      	beq.n	80019da <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2280      	movs	r2, #128	; 0x80
 80019cc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2200      	movs	r2, #0
 80019d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e2cd      	b.n	8001f76 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a76      	ldr	r2, [pc, #472]	; (8001bb8 <HAL_DMA_Abort+0x214>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04a      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a74      	ldr	r2, [pc, #464]	; (8001bbc <HAL_DMA_Abort+0x218>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d045      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a73      	ldr	r2, [pc, #460]	; (8001bc0 <HAL_DMA_Abort+0x21c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d040      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a71      	ldr	r2, [pc, #452]	; (8001bc4 <HAL_DMA_Abort+0x220>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d03b      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a70      	ldr	r2, [pc, #448]	; (8001bc8 <HAL_DMA_Abort+0x224>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d036      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6e      	ldr	r2, [pc, #440]	; (8001bcc <HAL_DMA_Abort+0x228>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a6d      	ldr	r2, [pc, #436]	; (8001bd0 <HAL_DMA_Abort+0x22c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d02c      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a6b      	ldr	r2, [pc, #428]	; (8001bd4 <HAL_DMA_Abort+0x230>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d027      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a6a      	ldr	r2, [pc, #424]	; (8001bd8 <HAL_DMA_Abort+0x234>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d022      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a68      	ldr	r2, [pc, #416]	; (8001bdc <HAL_DMA_Abort+0x238>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d01d      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a67      	ldr	r2, [pc, #412]	; (8001be0 <HAL_DMA_Abort+0x23c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a65      	ldr	r2, [pc, #404]	; (8001be4 <HAL_DMA_Abort+0x240>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d013      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a64      	ldr	r2, [pc, #400]	; (8001be8 <HAL_DMA_Abort+0x244>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d00e      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a62      	ldr	r2, [pc, #392]	; (8001bec <HAL_DMA_Abort+0x248>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d009      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a61      	ldr	r2, [pc, #388]	; (8001bf0 <HAL_DMA_Abort+0x24c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d004      	beq.n	8001a7a <HAL_DMA_Abort+0xd6>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a5f      	ldr	r2, [pc, #380]	; (8001bf4 <HAL_DMA_Abort+0x250>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_DMA_Abort+0xda>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e000      	b.n	8001a80 <HAL_DMA_Abort+0xdc>
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d013      	beq.n	8001aac <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 021e 	bic.w	r2, r2, #30
 8001a92:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aa2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	617b      	str	r3, [r7, #20]
 8001aaa:	e00a      	b.n	8001ac2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f022 020e 	bic.w	r2, r2, #14
 8001aba:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a3c      	ldr	r2, [pc, #240]	; (8001bb8 <HAL_DMA_Abort+0x214>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d072      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <HAL_DMA_Abort+0x218>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d06d      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a39      	ldr	r2, [pc, #228]	; (8001bc0 <HAL_DMA_Abort+0x21c>)
 8001adc:	4293      	cmp	r3, r2
 8001ade:	d068      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a37      	ldr	r2, [pc, #220]	; (8001bc4 <HAL_DMA_Abort+0x220>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d063      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a36      	ldr	r2, [pc, #216]	; (8001bc8 <HAL_DMA_Abort+0x224>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d05e      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_DMA_Abort+0x228>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d059      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	4a33      	ldr	r2, [pc, #204]	; (8001bd0 <HAL_DMA_Abort+0x22c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d054      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a31      	ldr	r2, [pc, #196]	; (8001bd4 <HAL_DMA_Abort+0x230>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d04f      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	4a30      	ldr	r2, [pc, #192]	; (8001bd8 <HAL_DMA_Abort+0x234>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d04a      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a2e      	ldr	r2, [pc, #184]	; (8001bdc <HAL_DMA_Abort+0x238>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d045      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4a2d      	ldr	r2, [pc, #180]	; (8001be0 <HAL_DMA_Abort+0x23c>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	d040      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a2b      	ldr	r2, [pc, #172]	; (8001be4 <HAL_DMA_Abort+0x240>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d03b      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a2a      	ldr	r2, [pc, #168]	; (8001be8 <HAL_DMA_Abort+0x244>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d036      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a28      	ldr	r2, [pc, #160]	; (8001bec <HAL_DMA_Abort+0x248>)
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d031      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a27      	ldr	r2, [pc, #156]	; (8001bf0 <HAL_DMA_Abort+0x24c>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d02c      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a25      	ldr	r2, [pc, #148]	; (8001bf4 <HAL_DMA_Abort+0x250>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d027      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a24      	ldr	r2, [pc, #144]	; (8001bf8 <HAL_DMA_Abort+0x254>)
 8001b68:	4293      	cmp	r3, r2
 8001b6a:	d022      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a22      	ldr	r2, [pc, #136]	; (8001bfc <HAL_DMA_Abort+0x258>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d01d      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a21      	ldr	r2, [pc, #132]	; (8001c00 <HAL_DMA_Abort+0x25c>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d018      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a1f      	ldr	r2, [pc, #124]	; (8001c04 <HAL_DMA_Abort+0x260>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d013      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a1e      	ldr	r2, [pc, #120]	; (8001c08 <HAL_DMA_Abort+0x264>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d00e      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a1c      	ldr	r2, [pc, #112]	; (8001c0c <HAL_DMA_Abort+0x268>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d009      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_DMA_Abort+0x26c>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d004      	beq.n	8001bb2 <HAL_DMA_Abort+0x20e>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a19      	ldr	r2, [pc, #100]	; (8001c14 <HAL_DMA_Abort+0x270>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d132      	bne.n	8001c18 <HAL_DMA_Abort+0x274>
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e031      	b.n	8001c1a <HAL_DMA_Abort+0x276>
 8001bb6:	bf00      	nop
 8001bb8:	40020010 	.word	0x40020010
 8001bbc:	40020028 	.word	0x40020028
 8001bc0:	40020040 	.word	0x40020040
 8001bc4:	40020058 	.word	0x40020058
 8001bc8:	40020070 	.word	0x40020070
 8001bcc:	40020088 	.word	0x40020088
 8001bd0:	400200a0 	.word	0x400200a0
 8001bd4:	400200b8 	.word	0x400200b8
 8001bd8:	40020410 	.word	0x40020410
 8001bdc:	40020428 	.word	0x40020428
 8001be0:	40020440 	.word	0x40020440
 8001be4:	40020458 	.word	0x40020458
 8001be8:	40020470 	.word	0x40020470
 8001bec:	40020488 	.word	0x40020488
 8001bf0:	400204a0 	.word	0x400204a0
 8001bf4:	400204b8 	.word	0x400204b8
 8001bf8:	58025408 	.word	0x58025408
 8001bfc:	5802541c 	.word	0x5802541c
 8001c00:	58025430 	.word	0x58025430
 8001c04:	58025444 	.word	0x58025444
 8001c08:	58025458 	.word	0x58025458
 8001c0c:	5802546c 	.word	0x5802546c
 8001c10:	58025480 	.word	0x58025480
 8001c14:	58025494 	.word	0x58025494
 8001c18:	2300      	movs	r3, #0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d007      	beq.n	8001c2e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c28:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a6d      	ldr	r2, [pc, #436]	; (8001de8 <HAL_DMA_Abort+0x444>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d04a      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a6b      	ldr	r2, [pc, #428]	; (8001dec <HAL_DMA_Abort+0x448>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d045      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a6a      	ldr	r2, [pc, #424]	; (8001df0 <HAL_DMA_Abort+0x44c>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d040      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a68      	ldr	r2, [pc, #416]	; (8001df4 <HAL_DMA_Abort+0x450>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d03b      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a67      	ldr	r2, [pc, #412]	; (8001df8 <HAL_DMA_Abort+0x454>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d036      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a65      	ldr	r2, [pc, #404]	; (8001dfc <HAL_DMA_Abort+0x458>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d031      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a64      	ldr	r2, [pc, #400]	; (8001e00 <HAL_DMA_Abort+0x45c>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d02c      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a62      	ldr	r2, [pc, #392]	; (8001e04 <HAL_DMA_Abort+0x460>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d027      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a61      	ldr	r2, [pc, #388]	; (8001e08 <HAL_DMA_Abort+0x464>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d022      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a5f      	ldr	r2, [pc, #380]	; (8001e0c <HAL_DMA_Abort+0x468>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01d      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a5e      	ldr	r2, [pc, #376]	; (8001e10 <HAL_DMA_Abort+0x46c>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d018      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_DMA_Abort+0x470>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_DMA_Abort+0x474>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a59      	ldr	r2, [pc, #356]	; (8001e1c <HAL_DMA_Abort+0x478>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a58      	ldr	r2, [pc, #352]	; (8001e20 <HAL_DMA_Abort+0x47c>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d004      	beq.n	8001cce <HAL_DMA_Abort+0x32a>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a56      	ldr	r2, [pc, #344]	; (8001e24 <HAL_DMA_Abort+0x480>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d108      	bne.n	8001ce0 <HAL_DMA_Abort+0x33c>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f022 0201 	bic.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	e007      	b.n	8001cf0 <HAL_DMA_Abort+0x34c>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f022 0201 	bic.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001cf0:	e013      	b.n	8001d1a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cf2:	f7ff f84b 	bl	8000d8c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b05      	cmp	r3, #5
 8001cfe:	d90c      	bls.n	8001d1a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2220      	movs	r2, #32
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2203      	movs	r2, #3
 8001d0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2200      	movs	r2, #0
 8001d12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e12d      	b.n	8001f76 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1e5      	bne.n	8001cf2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a2f      	ldr	r2, [pc, #188]	; (8001de8 <HAL_DMA_Abort+0x444>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d04a      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a2d      	ldr	r2, [pc, #180]	; (8001dec <HAL_DMA_Abort+0x448>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d045      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a2c      	ldr	r2, [pc, #176]	; (8001df0 <HAL_DMA_Abort+0x44c>)
 8001d40:	4293      	cmp	r3, r2
 8001d42:	d040      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a2a      	ldr	r2, [pc, #168]	; (8001df4 <HAL_DMA_Abort+0x450>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d03b      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_DMA_Abort+0x454>)
 8001d54:	4293      	cmp	r3, r2
 8001d56:	d036      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a27      	ldr	r2, [pc, #156]	; (8001dfc <HAL_DMA_Abort+0x458>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d031      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a26      	ldr	r2, [pc, #152]	; (8001e00 <HAL_DMA_Abort+0x45c>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d02c      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a24      	ldr	r2, [pc, #144]	; (8001e04 <HAL_DMA_Abort+0x460>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d027      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a23      	ldr	r2, [pc, #140]	; (8001e08 <HAL_DMA_Abort+0x464>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d022      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a21      	ldr	r2, [pc, #132]	; (8001e0c <HAL_DMA_Abort+0x468>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d01d      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <HAL_DMA_Abort+0x46c>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d018      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a1e      	ldr	r2, [pc, #120]	; (8001e14 <HAL_DMA_Abort+0x470>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d013      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a1d      	ldr	r2, [pc, #116]	; (8001e18 <HAL_DMA_Abort+0x474>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d00e      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a1b      	ldr	r2, [pc, #108]	; (8001e1c <HAL_DMA_Abort+0x478>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d009      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a1a      	ldr	r2, [pc, #104]	; (8001e20 <HAL_DMA_Abort+0x47c>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d004      	beq.n	8001dc6 <HAL_DMA_Abort+0x422>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a18      	ldr	r2, [pc, #96]	; (8001e24 <HAL_DMA_Abort+0x480>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_DMA_Abort+0x426>
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	e000      	b.n	8001dcc <HAL_DMA_Abort+0x428>
 8001dca:	2300      	movs	r3, #0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d02b      	beq.n	8001e28 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	223f      	movs	r2, #63	; 0x3f
 8001de0:	409a      	lsls	r2, r3
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	609a      	str	r2, [r3, #8]
 8001de6:	e02a      	b.n	8001e3e <HAL_DMA_Abort+0x49a>
 8001de8:	40020010 	.word	0x40020010
 8001dec:	40020028 	.word	0x40020028
 8001df0:	40020040 	.word	0x40020040
 8001df4:	40020058 	.word	0x40020058
 8001df8:	40020070 	.word	0x40020070
 8001dfc:	40020088 	.word	0x40020088
 8001e00:	400200a0 	.word	0x400200a0
 8001e04:	400200b8 	.word	0x400200b8
 8001e08:	40020410 	.word	0x40020410
 8001e0c:	40020428 	.word	0x40020428
 8001e10:	40020440 	.word	0x40020440
 8001e14:	40020458 	.word	0x40020458
 8001e18:	40020470 	.word	0x40020470
 8001e1c:	40020488 	.word	0x40020488
 8001e20:	400204a0 	.word	0x400204a0
 8001e24:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e2c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e32:	f003 031f 	and.w	r3, r3, #31
 8001e36:	2201      	movs	r2, #1
 8001e38:	409a      	lsls	r2, r3
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a4f      	ldr	r2, [pc, #316]	; (8001f80 <HAL_DMA_Abort+0x5dc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d072      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a4d      	ldr	r2, [pc, #308]	; (8001f84 <HAL_DMA_Abort+0x5e0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d06d      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <HAL_DMA_Abort+0x5e4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d068      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a4a      	ldr	r2, [pc, #296]	; (8001f8c <HAL_DMA_Abort+0x5e8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d063      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a49      	ldr	r2, [pc, #292]	; (8001f90 <HAL_DMA_Abort+0x5ec>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d05e      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <HAL_DMA_Abort+0x5f0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d059      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a46      	ldr	r2, [pc, #280]	; (8001f98 <HAL_DMA_Abort+0x5f4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d054      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a44      	ldr	r2, [pc, #272]	; (8001f9c <HAL_DMA_Abort+0x5f8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d04f      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a43      	ldr	r2, [pc, #268]	; (8001fa0 <HAL_DMA_Abort+0x5fc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d04a      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a41      	ldr	r2, [pc, #260]	; (8001fa4 <HAL_DMA_Abort+0x600>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d045      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a40      	ldr	r2, [pc, #256]	; (8001fa8 <HAL_DMA_Abort+0x604>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d040      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a3e      	ldr	r2, [pc, #248]	; (8001fac <HAL_DMA_Abort+0x608>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d03b      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a3d      	ldr	r2, [pc, #244]	; (8001fb0 <HAL_DMA_Abort+0x60c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d036      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3b      	ldr	r2, [pc, #236]	; (8001fb4 <HAL_DMA_Abort+0x610>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d031      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a3a      	ldr	r2, [pc, #232]	; (8001fb8 <HAL_DMA_Abort+0x614>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d02c      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a38      	ldr	r2, [pc, #224]	; (8001fbc <HAL_DMA_Abort+0x618>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d027      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a37      	ldr	r2, [pc, #220]	; (8001fc0 <HAL_DMA_Abort+0x61c>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d022      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <HAL_DMA_Abort+0x620>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d01d      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a34      	ldr	r2, [pc, #208]	; (8001fc8 <HAL_DMA_Abort+0x624>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d018      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a32      	ldr	r2, [pc, #200]	; (8001fcc <HAL_DMA_Abort+0x628>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d013      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a31      	ldr	r2, [pc, #196]	; (8001fd0 <HAL_DMA_Abort+0x62c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d00e      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a2f      	ldr	r2, [pc, #188]	; (8001fd4 <HAL_DMA_Abort+0x630>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d009      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a2e      	ldr	r2, [pc, #184]	; (8001fd8 <HAL_DMA_Abort+0x634>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d004      	beq.n	8001f2e <HAL_DMA_Abort+0x58a>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a2c      	ldr	r2, [pc, #176]	; (8001fdc <HAL_DMA_Abort+0x638>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d101      	bne.n	8001f32 <HAL_DMA_Abort+0x58e>
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e000      	b.n	8001f34 <HAL_DMA_Abort+0x590>
 8001f32:	2300      	movs	r3, #0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d015      	beq.n	8001f64 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f3c:	687a      	ldr	r2, [r7, #4]
 8001f3e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f40:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00c      	beq.n	8001f64 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f54:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f58:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001f62:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8001f74:	2300      	movs	r3, #0
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	40020010 	.word	0x40020010
 8001f84:	40020028 	.word	0x40020028
 8001f88:	40020040 	.word	0x40020040
 8001f8c:	40020058 	.word	0x40020058
 8001f90:	40020070 	.word	0x40020070
 8001f94:	40020088 	.word	0x40020088
 8001f98:	400200a0 	.word	0x400200a0
 8001f9c:	400200b8 	.word	0x400200b8
 8001fa0:	40020410 	.word	0x40020410
 8001fa4:	40020428 	.word	0x40020428
 8001fa8:	40020440 	.word	0x40020440
 8001fac:	40020458 	.word	0x40020458
 8001fb0:	40020470 	.word	0x40020470
 8001fb4:	40020488 	.word	0x40020488
 8001fb8:	400204a0 	.word	0x400204a0
 8001fbc:	400204b8 	.word	0x400204b8
 8001fc0:	58025408 	.word	0x58025408
 8001fc4:	5802541c 	.word	0x5802541c
 8001fc8:	58025430 	.word	0x58025430
 8001fcc:	58025444 	.word	0x58025444
 8001fd0:	58025458 	.word	0x58025458
 8001fd4:	5802546c 	.word	0x5802546c
 8001fd8:	58025480 	.word	0x58025480
 8001fdc:	58025494 	.word	0x58025494

08001fe0 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	60f8      	str	r0, [r7, #12]
 8001fe8:	60b9      	str	r1, [r7, #8]
 8001fea:	607a      	str	r2, [r7, #4]
 8001fec:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff2:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff8:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a7f      	ldr	r2, [pc, #508]	; (80021fc <DMA_SetConfig+0x21c>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d072      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a7d      	ldr	r2, [pc, #500]	; (8002200 <DMA_SetConfig+0x220>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d06d      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a7c      	ldr	r2, [pc, #496]	; (8002204 <DMA_SetConfig+0x224>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d068      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a7a      	ldr	r2, [pc, #488]	; (8002208 <DMA_SetConfig+0x228>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d063      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a79      	ldr	r2, [pc, #484]	; (800220c <DMA_SetConfig+0x22c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d05e      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a77      	ldr	r2, [pc, #476]	; (8002210 <DMA_SetConfig+0x230>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d059      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a76      	ldr	r2, [pc, #472]	; (8002214 <DMA_SetConfig+0x234>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d054      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a74      	ldr	r2, [pc, #464]	; (8002218 <DMA_SetConfig+0x238>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d04f      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a73      	ldr	r2, [pc, #460]	; (800221c <DMA_SetConfig+0x23c>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d04a      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a71      	ldr	r2, [pc, #452]	; (8002220 <DMA_SetConfig+0x240>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d045      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a70      	ldr	r2, [pc, #448]	; (8002224 <DMA_SetConfig+0x244>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d040      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a6e      	ldr	r2, [pc, #440]	; (8002228 <DMA_SetConfig+0x248>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d03b      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a6d      	ldr	r2, [pc, #436]	; (800222c <DMA_SetConfig+0x24c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d036      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a6b      	ldr	r2, [pc, #428]	; (8002230 <DMA_SetConfig+0x250>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d031      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a6a      	ldr	r2, [pc, #424]	; (8002234 <DMA_SetConfig+0x254>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d02c      	beq.n	80020ea <DMA_SetConfig+0x10a>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a68      	ldr	r2, [pc, #416]	; (8002238 <DMA_SetConfig+0x258>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d027      	beq.n	80020ea <DMA_SetConfig+0x10a>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a67      	ldr	r2, [pc, #412]	; (800223c <DMA_SetConfig+0x25c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d022      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a65      	ldr	r2, [pc, #404]	; (8002240 <DMA_SetConfig+0x260>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d01d      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a64      	ldr	r2, [pc, #400]	; (8002244 <DMA_SetConfig+0x264>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d018      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a62      	ldr	r2, [pc, #392]	; (8002248 <DMA_SetConfig+0x268>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d013      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a61      	ldr	r2, [pc, #388]	; (800224c <DMA_SetConfig+0x26c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d00e      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a5f      	ldr	r2, [pc, #380]	; (8002250 <DMA_SetConfig+0x270>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d009      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a5e      	ldr	r2, [pc, #376]	; (8002254 <DMA_SetConfig+0x274>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d004      	beq.n	80020ea <DMA_SetConfig+0x10a>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <DMA_SetConfig+0x278>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d101      	bne.n	80020ee <DMA_SetConfig+0x10e>
 80020ea:	2301      	movs	r3, #1
 80020ec:	e000      	b.n	80020f0 <DMA_SetConfig+0x110>
 80020ee:	2300      	movs	r3, #0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00d      	beq.n	8002110 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80020fc:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002102:	2b00      	cmp	r3, #0
 8002104:	d004      	beq.n	8002110 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800210a:	68fa      	ldr	r2, [r7, #12]
 800210c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800210e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a39      	ldr	r2, [pc, #228]	; (80021fc <DMA_SetConfig+0x21c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d04a      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a38      	ldr	r2, [pc, #224]	; (8002200 <DMA_SetConfig+0x220>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d045      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a36      	ldr	r2, [pc, #216]	; (8002204 <DMA_SetConfig+0x224>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d040      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a35      	ldr	r2, [pc, #212]	; (8002208 <DMA_SetConfig+0x228>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d03b      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a33      	ldr	r2, [pc, #204]	; (800220c <DMA_SetConfig+0x22c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d036      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a32      	ldr	r2, [pc, #200]	; (8002210 <DMA_SetConfig+0x230>)
 8002148:	4293      	cmp	r3, r2
 800214a:	d031      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4a30      	ldr	r2, [pc, #192]	; (8002214 <DMA_SetConfig+0x234>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d02c      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a2f      	ldr	r2, [pc, #188]	; (8002218 <DMA_SetConfig+0x238>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d027      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a2d      	ldr	r2, [pc, #180]	; (800221c <DMA_SetConfig+0x23c>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d022      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a2c      	ldr	r2, [pc, #176]	; (8002220 <DMA_SetConfig+0x240>)
 8002170:	4293      	cmp	r3, r2
 8002172:	d01d      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a2a      	ldr	r2, [pc, #168]	; (8002224 <DMA_SetConfig+0x244>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d018      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a29      	ldr	r2, [pc, #164]	; (8002228 <DMA_SetConfig+0x248>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d013      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a27      	ldr	r2, [pc, #156]	; (800222c <DMA_SetConfig+0x24c>)
 800218e:	4293      	cmp	r3, r2
 8002190:	d00e      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4a26      	ldr	r2, [pc, #152]	; (8002230 <DMA_SetConfig+0x250>)
 8002198:	4293      	cmp	r3, r2
 800219a:	d009      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a24      	ldr	r2, [pc, #144]	; (8002234 <DMA_SetConfig+0x254>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d004      	beq.n	80021b0 <DMA_SetConfig+0x1d0>
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a23      	ldr	r2, [pc, #140]	; (8002238 <DMA_SetConfig+0x258>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <DMA_SetConfig+0x1d4>
 80021b0:	2301      	movs	r3, #1
 80021b2:	e000      	b.n	80021b6 <DMA_SetConfig+0x1d6>
 80021b4:	2300      	movs	r3, #0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d059      	beq.n	800226e <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f003 031f 	and.w	r3, r3, #31
 80021c2:	223f      	movs	r2, #63	; 0x3f
 80021c4:	409a      	lsls	r2, r3
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	681a      	ldr	r2, [r3, #0]
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d8:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	2b40      	cmp	r3, #64	; 0x40
 80021e8:	d138      	bne.n	800225c <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80021fa:	e086      	b.n	800230a <DMA_SetConfig+0x32a>
 80021fc:	40020010 	.word	0x40020010
 8002200:	40020028 	.word	0x40020028
 8002204:	40020040 	.word	0x40020040
 8002208:	40020058 	.word	0x40020058
 800220c:	40020070 	.word	0x40020070
 8002210:	40020088 	.word	0x40020088
 8002214:	400200a0 	.word	0x400200a0
 8002218:	400200b8 	.word	0x400200b8
 800221c:	40020410 	.word	0x40020410
 8002220:	40020428 	.word	0x40020428
 8002224:	40020440 	.word	0x40020440
 8002228:	40020458 	.word	0x40020458
 800222c:	40020470 	.word	0x40020470
 8002230:	40020488 	.word	0x40020488
 8002234:	400204a0 	.word	0x400204a0
 8002238:	400204b8 	.word	0x400204b8
 800223c:	58025408 	.word	0x58025408
 8002240:	5802541c 	.word	0x5802541c
 8002244:	58025430 	.word	0x58025430
 8002248:	58025444 	.word	0x58025444
 800224c:	58025458 	.word	0x58025458
 8002250:	5802546c 	.word	0x5802546c
 8002254:	58025480 	.word	0x58025480
 8002258:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	60da      	str	r2, [r3, #12]
}
 800226c:	e04d      	b.n	800230a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a29      	ldr	r2, [pc, #164]	; (8002318 <DMA_SetConfig+0x338>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <DMA_SetConfig+0x2de>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a27      	ldr	r2, [pc, #156]	; (800231c <DMA_SetConfig+0x33c>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01d      	beq.n	80022be <DMA_SetConfig+0x2de>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a26      	ldr	r2, [pc, #152]	; (8002320 <DMA_SetConfig+0x340>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d018      	beq.n	80022be <DMA_SetConfig+0x2de>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a24      	ldr	r2, [pc, #144]	; (8002324 <DMA_SetConfig+0x344>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d013      	beq.n	80022be <DMA_SetConfig+0x2de>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <DMA_SetConfig+0x348>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d00e      	beq.n	80022be <DMA_SetConfig+0x2de>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a21      	ldr	r2, [pc, #132]	; (800232c <DMA_SetConfig+0x34c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d009      	beq.n	80022be <DMA_SetConfig+0x2de>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a20      	ldr	r2, [pc, #128]	; (8002330 <DMA_SetConfig+0x350>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d004      	beq.n	80022be <DMA_SetConfig+0x2de>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1e      	ldr	r2, [pc, #120]	; (8002334 <DMA_SetConfig+0x354>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d101      	bne.n	80022c2 <DMA_SetConfig+0x2e2>
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <DMA_SetConfig+0x2e4>
 80022c2:	2300      	movs	r3, #0
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d020      	beq.n	800230a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	f003 031f 	and.w	r3, r3, #31
 80022d0:	2201      	movs	r2, #1
 80022d2:	409a      	lsls	r2, r3
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	2b40      	cmp	r3, #64	; 0x40
 80022e6:	d108      	bne.n	80022fa <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	60da      	str	r2, [r3, #12]
}
 80022f8:	e007      	b.n	800230a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	687a      	ldr	r2, [r7, #4]
 8002308:	60da      	str	r2, [r3, #12]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	58025408 	.word	0x58025408
 800231c:	5802541c 	.word	0x5802541c
 8002320:	58025430 	.word	0x58025430
 8002324:	58025444 	.word	0x58025444
 8002328:	58025458 	.word	0x58025458
 800232c:	5802546c 	.word	0x5802546c
 8002330:	58025480 	.word	0x58025480
 8002334:	58025494 	.word	0x58025494

08002338 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
 8002344:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002346:	2300      	movs	r3, #0
 8002348:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	2b80      	cmp	r3, #128	; 0x80
 8002350:	d105      	bne.n	800235e <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002358:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e315      	b.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8002368:	2302      	movs	r3, #2
 800236a:	e30e      	b.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x652>
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b01      	cmp	r3, #1
 800237e:	f040 82fd 	bne.w	800297c <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2202      	movs	r2, #2
 8002386:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2200      	movs	r2, #0
 800238e:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a82      	ldr	r2, [pc, #520]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d04a      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a81      	ldr	r2, [pc, #516]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d045      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a7f      	ldr	r2, [pc, #508]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d040      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a7e      	ldr	r2, [pc, #504]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d03b      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a7c      	ldr	r2, [pc, #496]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d036      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a7b      	ldr	r2, [pc, #492]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d031      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a79      	ldr	r2, [pc, #484]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d02c      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a78      	ldr	r2, [pc, #480]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d027      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a76      	ldr	r2, [pc, #472]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d022      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a75      	ldr	r2, [pc, #468]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d01d      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d018      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a72      	ldr	r2, [pc, #456]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d013      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a70      	ldr	r2, [pc, #448]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00e      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a6f      	ldr	r2, [pc, #444]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d009      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a6d      	ldr	r2, [pc, #436]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d004      	beq.n	8002430 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4a6c      	ldr	r2, [pc, #432]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d101      	bne.n	8002434 <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8002430:	2301      	movs	r3, #1
 8002432:	e000      	b.n	8002436 <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8002434:	2300      	movs	r3, #0
 8002436:	2b00      	cmp	r3, #0
 8002438:	d018      	beq.n	800246c <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002448:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	3308      	adds	r3, #8
 8002458:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	223f      	movs	r2, #63	; 0x3f
 8002464:	409a      	lsls	r2, r3
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	e018      	b.n	800249e <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6819      	ldr	r1, [r3, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f248 0320 	movw	r3, #32800	; 0x8020
 800247a:	430b      	orrs	r3, r1
 800247c:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248a:	3304      	adds	r3, #4
 800248c:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002492:	f003 031f 	and.w	r3, r3, #31
 8002496:	2201      	movs	r2, #1
 8002498:	409a      	lsls	r2, r3
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	68b9      	ldr	r1, [r7, #8]
 80024a4:	68f8      	ldr	r0, [r7, #12]
 80024a6:	f000 fb41 	bl	8002b2c <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a3c      	ldr	r2, [pc, #240]	; (80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d072      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a3a      	ldr	r2, [pc, #232]	; (80025a4 <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d06d      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a39      	ldr	r2, [pc, #228]	; (80025a8 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d068      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a37      	ldr	r2, [pc, #220]	; (80025ac <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d063      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a36      	ldr	r2, [pc, #216]	; (80025b0 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d05e      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a34      	ldr	r2, [pc, #208]	; (80025b4 <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d059      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a33      	ldr	r2, [pc, #204]	; (80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d054      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a31      	ldr	r2, [pc, #196]	; (80025bc <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d04f      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a30      	ldr	r2, [pc, #192]	; (80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d04a      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a2e      	ldr	r2, [pc, #184]	; (80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d045      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a2d      	ldr	r2, [pc, #180]	; (80025c8 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d040      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a2b      	ldr	r2, [pc, #172]	; (80025cc <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d03b      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2a      	ldr	r2, [pc, #168]	; (80025d0 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d036      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d031      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a27      	ldr	r2, [pc, #156]	; (80025d8 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d02c      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a25      	ldr	r2, [pc, #148]	; (80025dc <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d027      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d022      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a22      	ldr	r2, [pc, #136]	; (80025e4 <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d01d      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a21      	ldr	r2, [pc, #132]	; (80025e8 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d018      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a1f      	ldr	r2, [pc, #124]	; (80025ec <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d013      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a1e      	ldr	r2, [pc, #120]	; (80025f0 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d00e      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a1c      	ldr	r2, [pc, #112]	; (80025f4 <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d009      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 800258c:	4293      	cmp	r3, r2
 800258e:	d004      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a19      	ldr	r2, [pc, #100]	; (80025fc <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d132      	bne.n	8002600 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 800259a:	2301      	movs	r3, #1
 800259c:	e031      	b.n	8002602 <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 800259e:	bf00      	nop
 80025a0:	40020010 	.word	0x40020010
 80025a4:	40020028 	.word	0x40020028
 80025a8:	40020040 	.word	0x40020040
 80025ac:	40020058 	.word	0x40020058
 80025b0:	40020070 	.word	0x40020070
 80025b4:	40020088 	.word	0x40020088
 80025b8:	400200a0 	.word	0x400200a0
 80025bc:	400200b8 	.word	0x400200b8
 80025c0:	40020410 	.word	0x40020410
 80025c4:	40020428 	.word	0x40020428
 80025c8:	40020440 	.word	0x40020440
 80025cc:	40020458 	.word	0x40020458
 80025d0:	40020470 	.word	0x40020470
 80025d4:	40020488 	.word	0x40020488
 80025d8:	400204a0 	.word	0x400204a0
 80025dc:	400204b8 	.word	0x400204b8
 80025e0:	58025408 	.word	0x58025408
 80025e4:	5802541c 	.word	0x5802541c
 80025e8:	58025430 	.word	0x58025430
 80025ec:	58025444 	.word	0x58025444
 80025f0:	58025458 	.word	0x58025458
 80025f4:	5802546c 	.word	0x5802546c
 80025f8:	58025480 	.word	0x58025480
 80025fc:	58025494 	.word	0x58025494
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d00d      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800260a:	68fa      	ldr	r2, [r7, #12]
 800260c:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800260e:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002614:	2b00      	cmp	r3, #0
 8002616:	d004      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	68fa      	ldr	r2, [r7, #12]
 800261e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002620:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a3b      	ldr	r2, [pc, #236]	; (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d04a      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a39      	ldr	r2, [pc, #228]	; (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d045      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a38      	ldr	r2, [pc, #224]	; (800271c <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d040      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a36      	ldr	r2, [pc, #216]	; (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d03b      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a35      	ldr	r2, [pc, #212]	; (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d036      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a33      	ldr	r2, [pc, #204]	; (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d031      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a32      	ldr	r2, [pc, #200]	; (800272c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d02c      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a30      	ldr	r2, [pc, #192]	; (8002730 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d027      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a2f      	ldr	r2, [pc, #188]	; (8002734 <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d022      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a2d      	ldr	r2, [pc, #180]	; (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d01d      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a2c      	ldr	r2, [pc, #176]	; (800273c <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d018      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a2a      	ldr	r2, [pc, #168]	; (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a29      	ldr	r2, [pc, #164]	; (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d00e      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a27      	ldr	r2, [pc, #156]	; (8002748 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a26      	ldr	r2, [pc, #152]	; (800274c <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a24      	ldr	r2, [pc, #144]	; (8002750 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d101      	bne.n	80026c6 <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80026c6:	2300      	movs	r3, #0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d043      	beq.n	8002754 <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f023 021e 	bic.w	r2, r3, #30
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f042 0216 	orr.w	r2, r2, #22
 80026de:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695a      	ldr	r2, [r3, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80026ee:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d043      	beq.n	8002788 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0208 	orr.w	r2, r2, #8
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	e03a      	b.n	8002788 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8002712:	bf00      	nop
 8002714:	40020010 	.word	0x40020010
 8002718:	40020028 	.word	0x40020028
 800271c:	40020040 	.word	0x40020040
 8002720:	40020058 	.word	0x40020058
 8002724:	40020070 	.word	0x40020070
 8002728:	40020088 	.word	0x40020088
 800272c:	400200a0 	.word	0x400200a0
 8002730:	400200b8 	.word	0x400200b8
 8002734:	40020410 	.word	0x40020410
 8002738:	40020428 	.word	0x40020428
 800273c:	40020440 	.word	0x40020440
 8002740:	40020458 	.word	0x40020458
 8002744:	40020470 	.word	0x40020470
 8002748:	40020488 	.word	0x40020488
 800274c:	400204a0 	.word	0x400204a0
 8002750:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f023 020e 	bic.w	r2, r3, #14
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 020a 	orr.w	r2, r2, #10
 8002766:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	2b00      	cmp	r3, #0
 8002776:	d007      	beq.n	8002788 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f042 0204 	orr.w	r2, r2, #4
 8002786:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a81      	ldr	r2, [pc, #516]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d072      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a80      	ldr	r2, [pc, #512]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d06d      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a7e      	ldr	r2, [pc, #504]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d068      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a7d      	ldr	r2, [pc, #500]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d063      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7b      	ldr	r2, [pc, #492]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d05e      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a7a      	ldr	r2, [pc, #488]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d059      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a78      	ldr	r2, [pc, #480]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d054      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a77      	ldr	r2, [pc, #476]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d04f      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a75      	ldr	r2, [pc, #468]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d04a      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a74      	ldr	r2, [pc, #464]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d045      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a72      	ldr	r2, [pc, #456]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d040      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a71      	ldr	r2, [pc, #452]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d03b      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a6f      	ldr	r2, [pc, #444]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d036      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a6e      	ldr	r2, [pc, #440]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d031      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a6c      	ldr	r2, [pc, #432]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02c      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6b      	ldr	r2, [pc, #428]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d027      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a69      	ldr	r2, [pc, #420]	; (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d022      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a68      	ldr	r2, [pc, #416]	; (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d01d      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a66      	ldr	r2, [pc, #408]	; (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d018      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d013      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a63      	ldr	r2, [pc, #396]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d00e      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a62      	ldr	r2, [pc, #392]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d009      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a60      	ldr	r2, [pc, #384]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d004      	beq.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a5f      	ldr	r2, [pc, #380]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d101      	bne.n	800287c <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8002878:	2301      	movs	r3, #1
 800287a:	e000      	b.n	800287e <HAL_DMAEx_MultiBufferStart_IT+0x546>
 800287c:	2300      	movs	r3, #0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d01a      	beq.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800289e:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d007      	beq.n	80028b8 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028b6:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a35      	ldr	r2, [pc, #212]	; (8002994 <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d04a      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a34      	ldr	r2, [pc, #208]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d045      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a32      	ldr	r2, [pc, #200]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d040      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a31      	ldr	r2, [pc, #196]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d03b      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a2f      	ldr	r2, [pc, #188]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d036      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a2e      	ldr	r2, [pc, #184]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d031      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a2c      	ldr	r2, [pc, #176]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d02c      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a2b      	ldr	r2, [pc, #172]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d027      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a29      	ldr	r2, [pc, #164]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d022      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a28      	ldr	r2, [pc, #160]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d01d      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a26      	ldr	r2, [pc, #152]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d018      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a25      	ldr	r2, [pc, #148]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d013      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a23      	ldr	r2, [pc, #140]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00e      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a22      	ldr	r2, [pc, #136]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d009      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a20      	ldr	r2, [pc, #128]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d004      	beq.n	8002958 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a1f      	ldr	r2, [pc, #124]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d108      	bne.n	800296a <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	681a      	ldr	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f042 0201 	orr.w	r2, r2, #1
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e00e      	b.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	681a      	ldr	r2, [r3, #0]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f042 0201 	orr.w	r2, r2, #1
 8002978:	601a      	str	r2, [r3, #0]
 800297a:	e005      	b.n	8002988 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002982:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002988:	7dfb      	ldrb	r3, [r7, #23]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40020010 	.word	0x40020010
 8002998:	40020028 	.word	0x40020028
 800299c:	40020040 	.word	0x40020040
 80029a0:	40020058 	.word	0x40020058
 80029a4:	40020070 	.word	0x40020070
 80029a8:	40020088 	.word	0x40020088
 80029ac:	400200a0 	.word	0x400200a0
 80029b0:	400200b8 	.word	0x400200b8
 80029b4:	40020410 	.word	0x40020410
 80029b8:	40020428 	.word	0x40020428
 80029bc:	40020440 	.word	0x40020440
 80029c0:	40020458 	.word	0x40020458
 80029c4:	40020470 	.word	0x40020470
 80029c8:	40020488 	.word	0x40020488
 80029cc:	400204a0 	.word	0x400204a0
 80029d0:	400204b8 	.word	0x400204b8
 80029d4:	58025408 	.word	0x58025408
 80029d8:	5802541c 	.word	0x5802541c
 80029dc:	58025430 	.word	0x58025430
 80029e0:	58025444 	.word	0x58025444
 80029e4:	58025458 	.word	0x58025458
 80029e8:	5802546c 	.word	0x5802546c
 80029ec:	58025480 	.word	0x58025480
 80029f0:	58025494 	.word	0x58025494

080029f4 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b085      	sub	sp, #20
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	60f8      	str	r0, [r7, #12]
 80029fc:	60b9      	str	r1, [r7, #8]
 80029fe:	4613      	mov	r3, r2
 8002a00:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a39      	ldr	r2, [pc, #228]	; (8002aec <HAL_DMAEx_ChangeMemory+0xf8>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d04a      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a37      	ldr	r2, [pc, #220]	; (8002af0 <HAL_DMAEx_ChangeMemory+0xfc>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d045      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a36      	ldr	r2, [pc, #216]	; (8002af4 <HAL_DMAEx_ChangeMemory+0x100>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d040      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a34      	ldr	r2, [pc, #208]	; (8002af8 <HAL_DMAEx_ChangeMemory+0x104>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d03b      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a33      	ldr	r2, [pc, #204]	; (8002afc <HAL_DMAEx_ChangeMemory+0x108>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d036      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a31      	ldr	r2, [pc, #196]	; (8002b00 <HAL_DMAEx_ChangeMemory+0x10c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a30      	ldr	r2, [pc, #192]	; (8002b04 <HAL_DMAEx_ChangeMemory+0x110>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d02c      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a2e      	ldr	r2, [pc, #184]	; (8002b08 <HAL_DMAEx_ChangeMemory+0x114>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d027      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a2d      	ldr	r2, [pc, #180]	; (8002b0c <HAL_DMAEx_ChangeMemory+0x118>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d022      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a2b      	ldr	r2, [pc, #172]	; (8002b10 <HAL_DMAEx_ChangeMemory+0x11c>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a2a      	ldr	r2, [pc, #168]	; (8002b14 <HAL_DMAEx_ChangeMemory+0x120>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d018      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a28      	ldr	r2, [pc, #160]	; (8002b18 <HAL_DMAEx_ChangeMemory+0x124>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d013      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a27      	ldr	r2, [pc, #156]	; (8002b1c <HAL_DMAEx_ChangeMemory+0x128>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00e      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a25      	ldr	r2, [pc, #148]	; (8002b20 <HAL_DMAEx_ChangeMemory+0x12c>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d009      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a24      	ldr	r2, [pc, #144]	; (8002b24 <HAL_DMAEx_ChangeMemory+0x130>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d004      	beq.n	8002aa2 <HAL_DMAEx_ChangeMemory+0xae>
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a22      	ldr	r2, [pc, #136]	; (8002b28 <HAL_DMAEx_ChangeMemory+0x134>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_DMAEx_ChangeMemory+0xb2>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <HAL_DMAEx_ChangeMemory+0xb4>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d00c      	beq.n	8002ac6 <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8002aac:	79fb      	ldrb	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d104      	bne.n	8002abc <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	e010      	b.n	8002ade <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	611a      	str	r2, [r3, #16]
 8002ac4:	e00b      	b.n	8002ade <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8002ac6:	79fb      	ldrb	r3, [r7, #7]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d104      	bne.n	8002ad6 <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	60da      	str	r2, [r3, #12]
 8002ad4:	e003      	b.n	8002ade <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	68ba      	ldr	r2, [r7, #8]
 8002adc:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3714      	adds	r7, #20
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	40020010 	.word	0x40020010
 8002af0:	40020028 	.word	0x40020028
 8002af4:	40020040 	.word	0x40020040
 8002af8:	40020058 	.word	0x40020058
 8002afc:	40020070 	.word	0x40020070
 8002b00:	40020088 	.word	0x40020088
 8002b04:	400200a0 	.word	0x400200a0
 8002b08:	400200b8 	.word	0x400200b8
 8002b0c:	40020410 	.word	0x40020410
 8002b10:	40020428 	.word	0x40020428
 8002b14:	40020440 	.word	0x40020440
 8002b18:	40020458 	.word	0x40020458
 8002b1c:	40020470 	.word	0x40020470
 8002b20:	40020488 	.word	0x40020488
 8002b24:	400204a0 	.word	0x400204a0
 8002b28:	400204b8 	.word	0x400204b8

08002b2c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b085      	sub	sp, #20
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	607a      	str	r2, [r7, #4]
 8002b38:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a46      	ldr	r2, [pc, #280]	; (8002c58 <DMA_MultiBufferSetConfig+0x12c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a44      	ldr	r2, [pc, #272]	; (8002c5c <DMA_MultiBufferSetConfig+0x130>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <DMA_MultiBufferSetConfig+0x134>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a41      	ldr	r2, [pc, #260]	; (8002c64 <DMA_MultiBufferSetConfig+0x138>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a40      	ldr	r2, [pc, #256]	; (8002c68 <DMA_MultiBufferSetConfig+0x13c>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a3e      	ldr	r2, [pc, #248]	; (8002c6c <DMA_MultiBufferSetConfig+0x140>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a3d      	ldr	r2, [pc, #244]	; (8002c70 <DMA_MultiBufferSetConfig+0x144>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a3b      	ldr	r2, [pc, #236]	; (8002c74 <DMA_MultiBufferSetConfig+0x148>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a3a      	ldr	r2, [pc, #232]	; (8002c78 <DMA_MultiBufferSetConfig+0x14c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a38      	ldr	r2, [pc, #224]	; (8002c7c <DMA_MultiBufferSetConfig+0x150>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a37      	ldr	r2, [pc, #220]	; (8002c80 <DMA_MultiBufferSetConfig+0x154>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a35      	ldr	r2, [pc, #212]	; (8002c84 <DMA_MultiBufferSetConfig+0x158>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a34      	ldr	r2, [pc, #208]	; (8002c88 <DMA_MultiBufferSetConfig+0x15c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a32      	ldr	r2, [pc, #200]	; (8002c8c <DMA_MultiBufferSetConfig+0x160>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <DMA_MultiBufferSetConfig+0x164>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <DMA_MultiBufferSetConfig+0xae>
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a2f      	ldr	r2, [pc, #188]	; (8002c94 <DMA_MultiBufferSetConfig+0x168>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d101      	bne.n	8002bde <DMA_MultiBufferSetConfig+0xb2>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <DMA_MultiBufferSetConfig+0xb4>
 8002bde:	2300      	movs	r3, #0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d019      	beq.n	8002c18 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	2b40      	cmp	r3, #64	; 0x40
 8002bf2:	d108      	bne.n	8002c06 <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68ba      	ldr	r2, [r7, #8]
 8002c02:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8002c04:	e021      	b.n	8002c4a <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	68ba      	ldr	r2, [r7, #8]
 8002c0c:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	60da      	str	r2, [r3, #12]
}
 8002c16:	e018      	b.n	8002c4a <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b40      	cmp	r3, #64	; 0x40
 8002c26:	d108      	bne.n	8002c3a <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	60da      	str	r2, [r3, #12]
}
 8002c38:	e007      	b.n	8002c4a <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	60da      	str	r2, [r3, #12]
}
 8002c4a:	bf00      	nop
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
 8002c56:	bf00      	nop
 8002c58:	40020010 	.word	0x40020010
 8002c5c:	40020028 	.word	0x40020028
 8002c60:	40020040 	.word	0x40020040
 8002c64:	40020058 	.word	0x40020058
 8002c68:	40020070 	.word	0x40020070
 8002c6c:	40020088 	.word	0x40020088
 8002c70:	400200a0 	.word	0x400200a0
 8002c74:	400200b8 	.word	0x400200b8
 8002c78:	40020410 	.word	0x40020410
 8002c7c:	40020428 	.word	0x40020428
 8002c80:	40020440 	.word	0x40020440
 8002c84:	40020458 	.word	0x40020458
 8002c88:	40020470 	.word	0x40020470
 8002c8c:	40020488 	.word	0x40020488
 8002c90:	400204a0 	.word	0x400204a0
 8002c94:	400204b8 	.word	0x400204b8

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b089      	sub	sp, #36	; 0x24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002ca6:	4b89      	ldr	r3, [pc, #548]	; (8002ecc <HAL_GPIO_Init+0x234>)
 8002ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002caa:	e194      	b.n	8002fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002cbc:	693b      	ldr	r3, [r7, #16]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8186 	beq.w	8002fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d005      	beq.n	8002cdc <HAL_GPIO_Init+0x44>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d130      	bne.n	8002d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	69ba      	ldr	r2, [r7, #24]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	69ba      	ldr	r2, [r7, #24]
 8002d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d12:	2201      	movs	r2, #1
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0201 	and.w	r2, r3, #1
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d017      	beq.n	8002d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	69ba      	ldr	r2, [r7, #24]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	69ba      	ldr	r2, [r7, #24]
 8002d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d123      	bne.n	8002dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	4013      	ands	r3, r2
 8002da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002dc0:	69fb      	ldr	r3, [r7, #28]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	69b9      	ldr	r1, [r7, #24]
 8002dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	69ba      	ldr	r2, [r7, #24]
 8002de2:	4013      	ands	r3, r2
 8002de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	69ba      	ldr	r2, [r7, #24]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69ba      	ldr	r2, [r7, #24]
 8002e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80e0 	beq.w	8002fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e10:	4b2f      	ldr	r3, [pc, #188]	; (8002ed0 <HAL_GPIO_Init+0x238>)
 8002e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e16:	4a2e      	ldr	r2, [pc, #184]	; (8002ed0 <HAL_GPIO_Init+0x238>)
 8002e18:	f043 0302 	orr.w	r3, r3, #2
 8002e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002e20:	4b2b      	ldr	r3, [pc, #172]	; (8002ed0 <HAL_GPIO_Init+0x238>)
 8002e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002e26:	f003 0302 	and.w	r3, r3, #2
 8002e2a:	60fb      	str	r3, [r7, #12]
 8002e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <HAL_GPIO_Init+0x23c>)
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	3302      	adds	r3, #2
 8002e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	220f      	movs	r2, #15
 8002e46:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4a:	43db      	mvns	r3, r3
 8002e4c:	69ba      	ldr	r2, [r7, #24]
 8002e4e:	4013      	ands	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_GPIO_Init+0x240>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d052      	beq.n	8002f00 <HAL_GPIO_Init+0x268>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_GPIO_Init+0x244>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d031      	beq.n	8002ec6 <HAL_GPIO_Init+0x22e>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a1e      	ldr	r2, [pc, #120]	; (8002ee0 <HAL_GPIO_Init+0x248>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d02b      	beq.n	8002ec2 <HAL_GPIO_Init+0x22a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ee4 <HAL_GPIO_Init+0x24c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d025      	beq.n	8002ebe <HAL_GPIO_Init+0x226>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	4a1c      	ldr	r2, [pc, #112]	; (8002ee8 <HAL_GPIO_Init+0x250>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d01f      	beq.n	8002eba <HAL_GPIO_Init+0x222>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	4a1b      	ldr	r2, [pc, #108]	; (8002eec <HAL_GPIO_Init+0x254>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d019      	beq.n	8002eb6 <HAL_GPIO_Init+0x21e>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4a1a      	ldr	r2, [pc, #104]	; (8002ef0 <HAL_GPIO_Init+0x258>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d013      	beq.n	8002eb2 <HAL_GPIO_Init+0x21a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	4a19      	ldr	r2, [pc, #100]	; (8002ef4 <HAL_GPIO_Init+0x25c>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d00d      	beq.n	8002eae <HAL_GPIO_Init+0x216>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	4a18      	ldr	r2, [pc, #96]	; (8002ef8 <HAL_GPIO_Init+0x260>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d007      	beq.n	8002eaa <HAL_GPIO_Init+0x212>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a17      	ldr	r2, [pc, #92]	; (8002efc <HAL_GPIO_Init+0x264>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d101      	bne.n	8002ea6 <HAL_GPIO_Init+0x20e>
 8002ea2:	2309      	movs	r3, #9
 8002ea4:	e02d      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002ea6:	230a      	movs	r3, #10
 8002ea8:	e02b      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eaa:	2308      	movs	r3, #8
 8002eac:	e029      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eae:	2307      	movs	r3, #7
 8002eb0:	e027      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eb2:	2306      	movs	r3, #6
 8002eb4:	e025      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eb6:	2305      	movs	r3, #5
 8002eb8:	e023      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eba:	2304      	movs	r3, #4
 8002ebc:	e021      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e01f      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002ec2:	2302      	movs	r3, #2
 8002ec4:	e01d      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e01b      	b.n	8002f02 <HAL_GPIO_Init+0x26a>
 8002eca:	bf00      	nop
 8002ecc:	58000080 	.word	0x58000080
 8002ed0:	58024400 	.word	0x58024400
 8002ed4:	58000400 	.word	0x58000400
 8002ed8:	58020000 	.word	0x58020000
 8002edc:	58020400 	.word	0x58020400
 8002ee0:	58020800 	.word	0x58020800
 8002ee4:	58020c00 	.word	0x58020c00
 8002ee8:	58021000 	.word	0x58021000
 8002eec:	58021400 	.word	0x58021400
 8002ef0:	58021800 	.word	0x58021800
 8002ef4:	58021c00 	.word	0x58021c00
 8002ef8:	58022000 	.word	0x58022000
 8002efc:	58022400 	.word	0x58022400
 8002f00:	2300      	movs	r3, #0
 8002f02:	69fa      	ldr	r2, [r7, #28]
 8002f04:	f002 0203 	and.w	r2, r2, #3
 8002f08:	0092      	lsls	r2, r2, #2
 8002f0a:	4093      	lsls	r3, r2
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f12:	4938      	ldr	r1, [pc, #224]	; (8002ff4 <HAL_GPIO_Init+0x35c>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	43db      	mvns	r3, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4013      	ands	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002f3e:	69ba      	ldr	r2, [r7, #24]
 8002f40:	693b      	ldr	r3, [r7, #16]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	693b      	ldr	r3, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	43db      	mvns	r3, r3
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	3301      	adds	r3, #1
 8002fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f47f ae63 	bne.w	8002cac <HAL_GPIO_Init+0x14>
  }
}
 8002fe6:	bf00      	nop
 8002fe8:	bf00      	nop
 8002fea:	3724      	adds	r7, #36	; 0x24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr
 8002ff4:	58000400 	.word	0x58000400

08002ff8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e08b      	b.n	8003122 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f886 	bl	8003130 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0201 	bic.w	r2, r2, #1
 800303a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685a      	ldr	r2, [r3, #4]
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003048:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	689a      	ldr	r2, [r3, #8]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003058:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800306e:	609a      	str	r2, [r3, #8]
 8003070:	e006      	b.n	8003080 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800307e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b02      	cmp	r3, #2
 8003086:	d108      	bne.n	800309a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685a      	ldr	r2, [r3, #4]
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	e007      	b.n	80030aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	6859      	ldr	r1, [r3, #4]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b1d      	ldr	r3, [pc, #116]	; (800312c <HAL_I2C_Init+0x134>)
 80030b6:	430b      	orrs	r3, r1
 80030b8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	68da      	ldr	r2, [r3, #12]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	699b      	ldr	r3, [r3, #24]
 80030da:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	430a      	orrs	r2, r1
 80030e2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69d9      	ldr	r1, [r3, #28]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f042 0201 	orr.w	r2, r2, #1
 8003102:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2220      	movs	r2, #32
 800310e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	02008000 	.word	0x02008000

08003130 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8003130:	b480      	push	{r7}
 8003132:	b083      	sub	sp, #12
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 8003138:	bf00      	nop
 800313a:	370c      	adds	r7, #12
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr

08003144 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b088      	sub	sp, #32
 8003148:	af02      	add	r7, sp, #8
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	4608      	mov	r0, r1
 800314e:	4611      	mov	r1, r2
 8003150:	461a      	mov	r2, r3
 8003152:	4603      	mov	r3, r0
 8003154:	817b      	strh	r3, [r7, #10]
 8003156:	460b      	mov	r3, r1
 8003158:	813b      	strh	r3, [r7, #8]
 800315a:	4613      	mov	r3, r2
 800315c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b20      	cmp	r3, #32
 8003168:	f040 80f9 	bne.w	800335e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800316c:	6a3b      	ldr	r3, [r7, #32]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d002      	beq.n	8003178 <HAL_I2C_Mem_Write+0x34>
 8003172:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003174:	2b00      	cmp	r3, #0
 8003176:	d105      	bne.n	8003184 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800317e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0ed      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800318a:	2b01      	cmp	r3, #1
 800318c:	d101      	bne.n	8003192 <HAL_I2C_Mem_Write+0x4e>
 800318e:	2302      	movs	r3, #2
 8003190:	e0e6      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800319a:	f7fd fdf7 	bl	8000d8c <HAL_GetTick>
 800319e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	9300      	str	r3, [sp, #0]
 80031a4:	2319      	movs	r3, #25
 80031a6:	2201      	movs	r2, #1
 80031a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f000 f955 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80031b2:	4603      	mov	r3, r0
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d001      	beq.n	80031bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80031b8:	2301      	movs	r3, #1
 80031ba:	e0d1      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2221      	movs	r2, #33	; 0x21
 80031c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2240      	movs	r2, #64	; 0x40
 80031c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	2200      	movs	r2, #0
 80031d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	6a3a      	ldr	r2, [r7, #32]
 80031d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80031dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2200      	movs	r2, #0
 80031e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80031e4:	88f8      	ldrh	r0, [r7, #6]
 80031e6:	893a      	ldrh	r2, [r7, #8]
 80031e8:	8979      	ldrh	r1, [r7, #10]
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	9301      	str	r3, [sp, #4]
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	4603      	mov	r3, r0
 80031f4:	68f8      	ldr	r0, [r7, #12]
 80031f6:	f000 f8b9 	bl	800336c <I2C_RequestMemoryWrite>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d005      	beq.n	800320c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	2200      	movs	r2, #0
 8003204:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0a9      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003210:	b29b      	uxth	r3, r3
 8003212:	2bff      	cmp	r3, #255	; 0xff
 8003214:	d90e      	bls.n	8003234 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	22ff      	movs	r2, #255	; 0xff
 800321a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003220:	b2da      	uxtb	r2, r3
 8003222:	8979      	ldrh	r1, [r7, #10]
 8003224:	2300      	movs	r3, #0
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800322c:	68f8      	ldr	r0, [r7, #12]
 800322e:	f000 fad9 	bl	80037e4 <I2C_TransferConfig>
 8003232:	e00f      	b.n	8003254 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29a      	uxth	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003242:	b2da      	uxtb	r2, r3
 8003244:	8979      	ldrh	r1, [r7, #10]
 8003246:	2300      	movs	r3, #0
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800324e:	68f8      	ldr	r0, [r7, #12]
 8003250:	f000 fac8 	bl	80037e4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f958 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 800325e:	4603      	mov	r3, r0
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e07b      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	1c5a      	adds	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003282:	b29b      	uxth	r3, r3
 8003284:	3b01      	subs	r3, #1
 8003286:	b29a      	uxth	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003290:	3b01      	subs	r3, #1
 8003292:	b29a      	uxth	r2, r3
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800329c:	b29b      	uxth	r3, r3
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d034      	beq.n	800330c <HAL_I2C_Mem_Write+0x1c8>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d130      	bne.n	800330c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f8d1 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e04d      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	2bff      	cmp	r3, #255	; 0xff
 80032cc:	d90e      	bls.n	80032ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	22ff      	movs	r2, #255	; 0xff
 80032d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d8:	b2da      	uxtb	r2, r3
 80032da:	8979      	ldrh	r1, [r7, #10]
 80032dc:	2300      	movs	r3, #0
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fa7d 	bl	80037e4 <I2C_TransferConfig>
 80032ea:	e00f      	b.n	800330c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032f0:	b29a      	uxth	r2, r3
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	8979      	ldrh	r1, [r7, #10]
 80032fe:	2300      	movs	r3, #0
 8003300:	9300      	str	r3, [sp, #0]
 8003302:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003306:	68f8      	ldr	r0, [r7, #12]
 8003308:	f000 fa6c 	bl	80037e4 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003310:	b29b      	uxth	r3, r3
 8003312:	2b00      	cmp	r3, #0
 8003314:	d19e      	bne.n	8003254 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003316:	697a      	ldr	r2, [r7, #20]
 8003318:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f93e 	bl	800359c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e01a      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2220      	movs	r2, #32
 8003330:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	6859      	ldr	r1, [r3, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b0a      	ldr	r3, [pc, #40]	; (8003368 <HAL_I2C_Mem_Write+0x224>)
 800333e:	400b      	ands	r3, r1
 8003340:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2220      	movs	r2, #32
 8003346:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2200      	movs	r2, #0
 8003356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800335a:	2300      	movs	r3, #0
 800335c:	e000      	b.n	8003360 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800335e:	2302      	movs	r3, #2
  }
}
 8003360:	4618      	mov	r0, r3
 8003362:	3718      	adds	r7, #24
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}
 8003368:	fe00e800 	.word	0xfe00e800

0800336c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af02      	add	r7, sp, #8
 8003372:	60f8      	str	r0, [r7, #12]
 8003374:	4608      	mov	r0, r1
 8003376:	4611      	mov	r1, r2
 8003378:	461a      	mov	r2, r3
 800337a:	4603      	mov	r3, r0
 800337c:	817b      	strh	r3, [r7, #10]
 800337e:	460b      	mov	r3, r1
 8003380:	813b      	strh	r3, [r7, #8]
 8003382:	4613      	mov	r3, r2
 8003384:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003386:	88fb      	ldrh	r3, [r7, #6]
 8003388:	b2da      	uxtb	r2, r3
 800338a:	8979      	ldrh	r1, [r7, #10]
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <I2C_RequestMemoryWrite+0xa4>)
 800338e:	9300      	str	r3, [sp, #0]
 8003390:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003394:	68f8      	ldr	r0, [r7, #12]
 8003396:	f000 fa25 	bl	80037e4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800339a:	69fa      	ldr	r2, [r7, #28]
 800339c:	69b9      	ldr	r1, [r7, #24]
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f8b5 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e02c      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	2b01      	cmp	r3, #1
 80033b2:	d105      	bne.n	80033c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033b4:	893b      	ldrh	r3, [r7, #8]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	629a      	str	r2, [r3, #40]	; 0x28
 80033be:	e015      	b.n	80033ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80033c0:	893b      	ldrh	r3, [r7, #8]
 80033c2:	0a1b      	lsrs	r3, r3, #8
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	b2da      	uxtb	r2, r3
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80033ce:	69fa      	ldr	r2, [r7, #28]
 80033d0:	69b9      	ldr	r1, [r7, #24]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 f89b 	bl	800350e <I2C_WaitOnTXISFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e012      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80033e2:	893b      	ldrh	r3, [r7, #8]
 80033e4:	b2da      	uxtb	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	69bb      	ldr	r3, [r7, #24]
 80033f2:	2200      	movs	r2, #0
 80033f4:	2180      	movs	r1, #128	; 0x80
 80033f6:	68f8      	ldr	r0, [r7, #12]
 80033f8:	f000 f830 	bl	800345c <I2C_WaitOnFlagUntilTimeout>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d001      	beq.n	8003406 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003402:	2301      	movs	r3, #1
 8003404:	e000      	b.n	8003408 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003406:	2300      	movs	r3, #0
}
 8003408:	4618      	mov	r0, r3
 800340a:	3710      	adds	r7, #16
 800340c:	46bd      	mov	sp, r7
 800340e:	bd80      	pop	{r7, pc}
 8003410:	80002000 	.word	0x80002000

08003414 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b02      	cmp	r3, #2
 8003428:	d103      	bne.n	8003432 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2200      	movs	r2, #0
 8003430:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	f003 0301 	and.w	r3, r3, #1
 800343c:	2b01      	cmp	r3, #1
 800343e:	d007      	beq.n	8003450 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	699a      	ldr	r2, [r3, #24]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f042 0201 	orr.w	r2, r2, #1
 800344e:	619a      	str	r2, [r3, #24]
  }
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4613      	mov	r3, r2
 800346a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800346c:	e03b      	b.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800346e:	69ba      	ldr	r2, [r7, #24]
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 f8d6 	bl	8003624 <I2C_IsErrorOccurred>
 8003478:	4603      	mov	r3, r0
 800347a:	2b00      	cmp	r3, #0
 800347c:	d001      	beq.n	8003482 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e041      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003488:	d02d      	beq.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800348a:	f7fd fc7f 	bl	8000d8c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	69bb      	ldr	r3, [r7, #24]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d302      	bcc.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0x44>
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d122      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	699a      	ldr	r2, [r3, #24]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	4013      	ands	r3, r2
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	bf0c      	ite	eq
 80034b0:	2301      	moveq	r3, #1
 80034b2:	2300      	movne	r3, #0
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	461a      	mov	r2, r3
 80034b8:	79fb      	ldrb	r3, [r7, #7]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d113      	bne.n	80034e6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c2:	f043 0220 	orr.w	r2, r3, #32
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e00f      	b.n	8003506 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699a      	ldr	r2, [r3, #24]
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	4013      	ands	r3, r2
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	bf0c      	ite	eq
 80034f6:	2301      	moveq	r3, #1
 80034f8:	2300      	movne	r3, #0
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	79fb      	ldrb	r3, [r7, #7]
 8003500:	429a      	cmp	r2, r3
 8003502:	d0b4      	beq.n	800346e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003504:	2300      	movs	r3, #0
}
 8003506:	4618      	mov	r0, r3
 8003508:	3710      	adds	r7, #16
 800350a:	46bd      	mov	sp, r7
 800350c:	bd80      	pop	{r7, pc}

0800350e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800350e:	b580      	push	{r7, lr}
 8003510:	b084      	sub	sp, #16
 8003512:	af00      	add	r7, sp, #0
 8003514:	60f8      	str	r0, [r7, #12]
 8003516:	60b9      	str	r1, [r7, #8]
 8003518:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800351a:	e033      	b.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	68b9      	ldr	r1, [r7, #8]
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f000 f87f 	bl	8003624 <I2C_IsErrorOccurred>
 8003526:	4603      	mov	r3, r0
 8003528:	2b00      	cmp	r3, #0
 800352a:	d001      	beq.n	8003530 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e031      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003536:	d025      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003538:	f7fd fc28 	bl	8000d8c <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	429a      	cmp	r2, r3
 8003546:	d302      	bcc.n	800354e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d11a      	bne.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	f003 0302 	and.w	r3, r3, #2
 8003558:	2b02      	cmp	r3, #2
 800355a:	d013      	beq.n	8003584 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2220      	movs	r2, #32
 800356c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e007      	b.n	8003594 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b02      	cmp	r3, #2
 8003590:	d1c4      	bne.n	800351c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003592:	2300      	movs	r3, #0
}
 8003594:	4618      	mov	r0, r3
 8003596:	3710      	adds	r7, #16
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}

0800359c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b084      	sub	sp, #16
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035a8:	e02f      	b.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 f838 	bl	8003624 <I2C_IsErrorOccurred>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e02d      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035be:	f7fd fbe5 	bl	8000d8c <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	68ba      	ldr	r2, [r7, #8]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d302      	bcc.n	80035d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d11a      	bne.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	f003 0320 	and.w	r3, r3, #32
 80035de:	2b20      	cmp	r3, #32
 80035e0:	d013      	beq.n	800360a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e6:	f043 0220 	orr.w	r2, r3, #32
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2220      	movs	r2, #32
 80035f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2200      	movs	r2, #0
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2200      	movs	r2, #0
 8003602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e007      	b.n	800361a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d1c8      	bne.n	80035aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003618:	2300      	movs	r3, #0
}
 800361a:	4618      	mov	r0, r3
 800361c:	3710      	adds	r7, #16
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
	...

08003624 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08a      	sub	sp, #40	; 0x28
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003630:	2300      	movs	r3, #0
 8003632:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	699b      	ldr	r3, [r3, #24]
 800363c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800363e:	2300      	movs	r3, #0
 8003640:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	f003 0310 	and.w	r3, r3, #16
 800364c:	2b00      	cmp	r3, #0
 800364e:	d068      	beq.n	8003722 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2210      	movs	r2, #16
 8003656:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003658:	e049      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003660:	d045      	beq.n	80036ee <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003662:	f7fd fb93 	bl	8000d8c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	68ba      	ldr	r2, [r7, #8]
 800366e:	429a      	cmp	r2, r3
 8003670:	d302      	bcc.n	8003678 <I2C_IsErrorOccurred+0x54>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d13a      	bne.n	80036ee <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003682:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800368a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800369a:	d121      	bne.n	80036e0 <I2C_IsErrorOccurred+0xbc>
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036a2:	d01d      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80036a4:	7cfb      	ldrb	r3, [r7, #19]
 80036a6:	2b20      	cmp	r3, #32
 80036a8:	d01a      	beq.n	80036e0 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685a      	ldr	r2, [r3, #4]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80036b8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80036ba:	f7fd fb67 	bl	8000d8c <HAL_GetTick>
 80036be:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036c0:	e00e      	b.n	80036e0 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80036c2:	f7fd fb63 	bl	8000d8c <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	69fb      	ldr	r3, [r7, #28]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b19      	cmp	r3, #25
 80036ce:	d907      	bls.n	80036e0 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80036d0:	6a3b      	ldr	r3, [r7, #32]
 80036d2:	f043 0320 	orr.w	r3, r3, #32
 80036d6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80036de:	e006      	b.n	80036ee <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	699b      	ldr	r3, [r3, #24]
 80036e6:	f003 0320 	and.w	r3, r3, #32
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d1e9      	bne.n	80036c2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	f003 0320 	and.w	r3, r3, #32
 80036f8:	2b20      	cmp	r3, #32
 80036fa:	d003      	beq.n	8003704 <I2C_IsErrorOccurred+0xe0>
 80036fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0aa      	beq.n	800365a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003704:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003708:	2b00      	cmp	r3, #0
 800370a:	d103      	bne.n	8003714 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2220      	movs	r2, #32
 8003712:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003714:	6a3b      	ldr	r3, [r7, #32]
 8003716:	f043 0304 	orr.w	r3, r3, #4
 800371a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003730:	2b00      	cmp	r3, #0
 8003732:	d00b      	beq.n	800374c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003734:	6a3b      	ldr	r3, [r7, #32]
 8003736:	f043 0301 	orr.w	r3, r3, #1
 800373a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003744:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800374c:	69bb      	ldr	r3, [r7, #24]
 800374e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003752:	2b00      	cmp	r3, #0
 8003754:	d00b      	beq.n	800376e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003756:	6a3b      	ldr	r3, [r7, #32]
 8003758:	f043 0308 	orr.w	r3, r3, #8
 800375c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003766:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00b      	beq.n	8003790 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003778:	6a3b      	ldr	r3, [r7, #32]
 800377a:	f043 0302 	orr.w	r3, r3, #2
 800377e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003788:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003790:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003794:	2b00      	cmp	r3, #0
 8003796:	d01c      	beq.n	80037d2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f7ff fe3b 	bl	8003414 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	4b0d      	ldr	r3, [pc, #52]	; (80037e0 <I2C_IsErrorOccurred+0x1bc>)
 80037aa:	400b      	ands	r3, r1
 80037ac:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	431a      	orrs	r2, r3
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80037d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80037d6:	4618      	mov	r0, r3
 80037d8:	3728      	adds	r7, #40	; 0x28
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	fe00e800 	.word	0xfe00e800

080037e4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607b      	str	r3, [r7, #4]
 80037ee:	460b      	mov	r3, r1
 80037f0:	817b      	strh	r3, [r7, #10]
 80037f2:	4613      	mov	r3, r2
 80037f4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037f6:	897b      	ldrh	r3, [r7, #10]
 80037f8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037fc:	7a7b      	ldrb	r3, [r7, #9]
 80037fe:	041b      	lsls	r3, r3, #16
 8003800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003804:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800380a:	6a3b      	ldr	r3, [r7, #32]
 800380c:	4313      	orrs	r3, r2
 800380e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003812:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	0d5b      	lsrs	r3, r3, #21
 800381e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003822:	4b08      	ldr	r3, [pc, #32]	; (8003844 <I2C_TransferConfig+0x60>)
 8003824:	430b      	orrs	r3, r1
 8003826:	43db      	mvns	r3, r3
 8003828:	ea02 0103 	and.w	r1, r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003836:	bf00      	nop
 8003838:	371c      	adds	r7, #28
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr
 8003842:	bf00      	nop
 8003844:	03ff63ff 	.word	0x03ff63ff

08003848 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b08c      	sub	sp, #48	; 0x30
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d102      	bne.n	800385c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	f000 bc48 	b.w	80040ec <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 8088 	beq.w	800397a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800386a:	4b99      	ldr	r3, [pc, #612]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800386c:	691b      	ldr	r3, [r3, #16]
 800386e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003872:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003874:	4b96      	ldr	r3, [pc, #600]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003878:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800387a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800387c:	2b10      	cmp	r3, #16
 800387e:	d007      	beq.n	8003890 <HAL_RCC_OscConfig+0x48>
 8003880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003882:	2b18      	cmp	r3, #24
 8003884:	d111      	bne.n	80038aa <HAL_RCC_OscConfig+0x62>
 8003886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003888:	f003 0303 	and.w	r3, r3, #3
 800388c:	2b02      	cmp	r3, #2
 800388e:	d10c      	bne.n	80038aa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003890:	4b8f      	ldr	r3, [pc, #572]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d06d      	beq.n	8003978 <HAL_RCC_OscConfig+0x130>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d169      	bne.n	8003978 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f000 bc21 	b.w	80040ec <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038b2:	d106      	bne.n	80038c2 <HAL_RCC_OscConfig+0x7a>
 80038b4:	4b86      	ldr	r3, [pc, #536]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a85      	ldr	r2, [pc, #532]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038be:	6013      	str	r3, [r2, #0]
 80038c0:	e02e      	b.n	8003920 <HAL_RCC_OscConfig+0xd8>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d10c      	bne.n	80038e4 <HAL_RCC_OscConfig+0x9c>
 80038ca:	4b81      	ldr	r3, [pc, #516]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a80      	ldr	r2, [pc, #512]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038d4:	6013      	str	r3, [r2, #0]
 80038d6:	4b7e      	ldr	r3, [pc, #504]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a7d      	ldr	r2, [pc, #500]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80038e0:	6013      	str	r3, [r2, #0]
 80038e2:	e01d      	b.n	8003920 <HAL_RCC_OscConfig+0xd8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0xc0>
 80038ee:	4b78      	ldr	r3, [pc, #480]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a77      	ldr	r2, [pc, #476]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038f8:	6013      	str	r3, [r2, #0]
 80038fa:	4b75      	ldr	r3, [pc, #468]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a74      	ldr	r2, [pc, #464]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	e00b      	b.n	8003920 <HAL_RCC_OscConfig+0xd8>
 8003908:	4b71      	ldr	r3, [pc, #452]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a70      	ldr	r2, [pc, #448]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800390e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003912:	6013      	str	r3, [r2, #0]
 8003914:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a6d      	ldr	r2, [pc, #436]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800391a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800391e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d013      	beq.n	8003950 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003928:	f7fd fa30 	bl	8000d8c <HAL_GetTick>
 800392c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800392e:	e008      	b.n	8003942 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003930:	f7fd fa2c 	bl	8000d8c <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b64      	cmp	r3, #100	; 0x64
 800393c:	d901      	bls.n	8003942 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e3d4      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800394a:	2b00      	cmp	r3, #0
 800394c:	d0f0      	beq.n	8003930 <HAL_RCC_OscConfig+0xe8>
 800394e:	e014      	b.n	800397a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003950:	f7fd fa1c 	bl	8000d8c <HAL_GetTick>
 8003954:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003956:	e008      	b.n	800396a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003958:	f7fd fa18 	bl	8000d8c <HAL_GetTick>
 800395c:	4602      	mov	r2, r0
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	1ad3      	subs	r3, r2, r3
 8003962:	2b64      	cmp	r3, #100	; 0x64
 8003964:	d901      	bls.n	800396a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	e3c0      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800396a:	4b59      	ldr	r3, [pc, #356]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1f0      	bne.n	8003958 <HAL_RCC_OscConfig+0x110>
 8003976:	e000      	b.n	800397a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 80ca 	beq.w	8003b1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003988:	4b51      	ldr	r3, [pc, #324]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003990:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003992:	4b4f      	ldr	r3, [pc, #316]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003996:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8003998:	6a3b      	ldr	r3, [r7, #32]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d007      	beq.n	80039ae <HAL_RCC_OscConfig+0x166>
 800399e:	6a3b      	ldr	r3, [r7, #32]
 80039a0:	2b18      	cmp	r3, #24
 80039a2:	d156      	bne.n	8003a52 <HAL_RCC_OscConfig+0x20a>
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d151      	bne.n	8003a52 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039ae:	4b48      	ldr	r3, [pc, #288]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 0304 	and.w	r3, r3, #4
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d005      	beq.n	80039c6 <HAL_RCC_OscConfig+0x17e>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	e392      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80039c6:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f023 0219 	bic.w	r2, r3, #25
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	493f      	ldr	r1, [pc, #252]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039d8:	f7fd f9d8 	bl	8000d8c <HAL_GetTick>
 80039dc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039de:	e008      	b.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039e0:	f7fd f9d4 	bl	8000d8c <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	2b02      	cmp	r3, #2
 80039ec:	d901      	bls.n	80039f2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80039ee:	2303      	movs	r3, #3
 80039f0:	e37c      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0304 	and.w	r3, r3, #4
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d0f0      	beq.n	80039e0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039fe:	f7fd f9f5 	bl	8000dec <HAL_GetREVID>
 8003a02:	4603      	mov	r3, r0
 8003a04:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d817      	bhi.n	8003a3c <HAL_RCC_OscConfig+0x1f4>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b40      	cmp	r3, #64	; 0x40
 8003a12:	d108      	bne.n	8003a26 <HAL_RCC_OscConfig+0x1de>
 8003a14:	4b2e      	ldr	r3, [pc, #184]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003a1c:	4a2c      	ldr	r2, [pc, #176]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a22:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a24:	e07a      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a26:	4b2a      	ldr	r3, [pc, #168]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	691b      	ldr	r3, [r3, #16]
 8003a32:	031b      	lsls	r3, r3, #12
 8003a34:	4926      	ldr	r1, [pc, #152]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a3a:	e06f      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a3c:	4b24      	ldr	r3, [pc, #144]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	061b      	lsls	r3, r3, #24
 8003a4a:	4921      	ldr	r1, [pc, #132]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a50:	e064      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d047      	beq.n	8003aea <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003a5a:	4b1d      	ldr	r3, [pc, #116]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f023 0219 	bic.w	r2, r3, #25
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	68db      	ldr	r3, [r3, #12]
 8003a66:	491a      	ldr	r1, [pc, #104]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd f98e 	bl	8000d8c <HAL_GetTick>
 8003a70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a74:	f7fd f98a 	bl	8000d8c <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e332      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003a86:	4b12      	ldr	r3, [pc, #72]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0f0      	beq.n	8003a74 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a92:	f7fd f9ab 	bl	8000dec <HAL_GetREVID>
 8003a96:	4603      	mov	r3, r0
 8003a98:	f241 0203 	movw	r2, #4099	; 0x1003
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d819      	bhi.n	8003ad4 <HAL_RCC_OscConfig+0x28c>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	691b      	ldr	r3, [r3, #16]
 8003aa4:	2b40      	cmp	r3, #64	; 0x40
 8003aa6:	d108      	bne.n	8003aba <HAL_RCC_OscConfig+0x272>
 8003aa8:	4b09      	ldr	r3, [pc, #36]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003ab0:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ab6:	6053      	str	r3, [r2, #4]
 8003ab8:	e030      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	691b      	ldr	r3, [r3, #16]
 8003ac6:	031b      	lsls	r3, r3, #12
 8003ac8:	4901      	ldr	r1, [pc, #4]	; (8003ad0 <HAL_RCC_OscConfig+0x288>)
 8003aca:	4313      	orrs	r3, r2
 8003acc:	604b      	str	r3, [r1, #4]
 8003ace:	e025      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
 8003ad0:	58024400 	.word	0x58024400
 8003ad4:	4b9a      	ldr	r3, [pc, #616]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	691b      	ldr	r3, [r3, #16]
 8003ae0:	061b      	lsls	r3, r3, #24
 8003ae2:	4997      	ldr	r1, [pc, #604]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	604b      	str	r3, [r1, #4]
 8003ae8:	e018      	b.n	8003b1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003aea:	4b95      	ldr	r3, [pc, #596]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a94      	ldr	r2, [pc, #592]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003af0:	f023 0301 	bic.w	r3, r3, #1
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7fd f949 	bl	8000d8c <HAL_GetTick>
 8003afa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003afc:	e008      	b.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afe:	f7fd f945 	bl	8000d8c <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d901      	bls.n	8003b10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e2ed      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003b10:	4b8b      	ldr	r3, [pc, #556]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0304 	and.w	r3, r3, #4
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d1f0      	bne.n	8003afe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0310 	and.w	r3, r3, #16
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f000 80a9 	beq.w	8003c7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003b2a:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003b34:	4b82      	ldr	r3, [pc, #520]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b38:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d007      	beq.n	8003b50 <HAL_RCC_OscConfig+0x308>
 8003b40:	69bb      	ldr	r3, [r7, #24]
 8003b42:	2b18      	cmp	r3, #24
 8003b44:	d13a      	bne.n	8003bbc <HAL_RCC_OscConfig+0x374>
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f003 0303 	and.w	r3, r3, #3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d135      	bne.n	8003bbc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b50:	4b7b      	ldr	r3, [pc, #492]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d005      	beq.n	8003b68 <HAL_RCC_OscConfig+0x320>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	69db      	ldr	r3, [r3, #28]
 8003b60:	2b80      	cmp	r3, #128	; 0x80
 8003b62:	d001      	beq.n	8003b68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e2c1      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b68:	f7fd f940 	bl	8000dec <HAL_GetREVID>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d817      	bhi.n	8003ba6 <HAL_RCC_OscConfig+0x35e>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	2b20      	cmp	r3, #32
 8003b7c:	d108      	bne.n	8003b90 <HAL_RCC_OscConfig+0x348>
 8003b7e:	4b70      	ldr	r3, [pc, #448]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003b86:	4a6e      	ldr	r2, [pc, #440]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b8c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003b8e:	e075      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003b90:	4b6b      	ldr	r3, [pc, #428]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	069b      	lsls	r3, r3, #26
 8003b9e:	4968      	ldr	r1, [pc, #416]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003ba4:	e06a      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003ba6:	4b66      	ldr	r3, [pc, #408]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	4962      	ldr	r1, [pc, #392]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003bba:	e05f      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	69db      	ldr	r3, [r3, #28]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d042      	beq.n	8003c4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003bc4:	4b5e      	ldr	r3, [pc, #376]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5d      	ldr	r2, [pc, #372]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003bca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bd0:	f7fd f8dc 	bl	8000d8c <HAL_GetTick>
 8003bd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bd6:	e008      	b.n	8003bea <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003bd8:	f7fd f8d8 	bl	8000d8c <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b02      	cmp	r3, #2
 8003be4:	d901      	bls.n	8003bea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e280      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bea:	4b55      	ldr	r3, [pc, #340]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003bf6:	f7fd f8f9 	bl	8000dec <HAL_GetREVID>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f241 0203 	movw	r2, #4099	; 0x1003
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d817      	bhi.n	8003c34 <HAL_RCC_OscConfig+0x3ec>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d108      	bne.n	8003c1e <HAL_RCC_OscConfig+0x3d6>
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003c14:	4a4a      	ldr	r2, [pc, #296]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003c1a:	6053      	str	r3, [r2, #4]
 8003c1c:	e02e      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
 8003c1e:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a1b      	ldr	r3, [r3, #32]
 8003c2a:	069b      	lsls	r3, r3, #26
 8003c2c:	4944      	ldr	r1, [pc, #272]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
 8003c32:	e023      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
 8003c34:	4b42      	ldr	r3, [pc, #264]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	061b      	lsls	r3, r3, #24
 8003c42:	493f      	ldr	r1, [pc, #252]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60cb      	str	r3, [r1, #12]
 8003c48:	e018      	b.n	8003c7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003c4a:	4b3d      	ldr	r3, [pc, #244]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a3c      	ldr	r2, [pc, #240]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c56:	f7fd f899 	bl	8000d8c <HAL_GetTick>
 8003c5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c5c:	e008      	b.n	8003c70 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003c5e:	f7fd f895 	bl	8000d8c <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b02      	cmp	r3, #2
 8003c6a:	d901      	bls.n	8003c70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003c6c:	2303      	movs	r3, #3
 8003c6e:	e23d      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003c70:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d1f0      	bne.n	8003c5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0308 	and.w	r3, r3, #8
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d036      	beq.n	8003cf6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	695b      	ldr	r3, [r3, #20]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d019      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c90:	4b2b      	ldr	r3, [pc, #172]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	4a2a      	ldr	r2, [pc, #168]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003c96:	f043 0301 	orr.w	r3, r3, #1
 8003c9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c9c:	f7fd f876 	bl	8000d8c <HAL_GetTick>
 8003ca0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ca4:	f7fd f872 	bl	8000d8c <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b02      	cmp	r3, #2
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e21a      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003cb6:	4b22      	ldr	r3, [pc, #136]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cba:	f003 0302 	and.w	r3, r3, #2
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x45c>
 8003cc2:	e018      	b.n	8003cf6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	4a1d      	ldr	r2, [pc, #116]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003cca:	f023 0301 	bic.w	r3, r3, #1
 8003cce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cd0:	f7fd f85c 	bl	8000d8c <HAL_GetTick>
 8003cd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cd8:	f7fd f858 	bl	8000d8c <HAL_GetTick>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b02      	cmp	r3, #2
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e200      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f0      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 0320 	and.w	r3, r3, #32
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d039      	beq.n	8003d76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01c      	beq.n	8003d44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003d0a:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003d10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003d14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d16:	f7fd f839 	bl	8000d8c <HAL_GetTick>
 8003d1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d1c:	e008      	b.n	8003d30 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d1e:	f7fd f835 	bl	8000d8c <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	2b02      	cmp	r3, #2
 8003d2a:	d901      	bls.n	8003d30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e1dd      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <HAL_RCC_OscConfig+0x4f8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d0f0      	beq.n	8003d1e <HAL_RCC_OscConfig+0x4d6>
 8003d3c:	e01b      	b.n	8003d76 <HAL_RCC_OscConfig+0x52e>
 8003d3e:	bf00      	nop
 8003d40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003d44:	4b9b      	ldr	r3, [pc, #620]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a9a      	ldr	r2, [pc, #616]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003d50:	f7fd f81c 	bl	8000d8c <HAL_GetTick>
 8003d54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d56:	e008      	b.n	8003d6a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003d58:	f7fd f818 	bl	8000d8c <HAL_GetTick>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d901      	bls.n	8003d6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e1c0      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003d6a:	4b92      	ldr	r3, [pc, #584]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d1f0      	bne.n	8003d58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0304 	and.w	r3, r3, #4
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 8081 	beq.w	8003e86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003d84:	4b8c      	ldr	r3, [pc, #560]	; (8003fb8 <HAL_RCC_OscConfig+0x770>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a8b      	ldr	r2, [pc, #556]	; (8003fb8 <HAL_RCC_OscConfig+0x770>)
 8003d8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003d90:	f7fc fffc 	bl	8000d8c <HAL_GetTick>
 8003d94:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003d96:	e008      	b.n	8003daa <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d98:	f7fc fff8 	bl	8000d8c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	2b64      	cmp	r3, #100	; 0x64
 8003da4:	d901      	bls.n	8003daa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8003da6:	2303      	movs	r3, #3
 8003da8:	e1a0      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003daa:	4b83      	ldr	r3, [pc, #524]	; (8003fb8 <HAL_RCC_OscConfig+0x770>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d0f0      	beq.n	8003d98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d106      	bne.n	8003dcc <HAL_RCC_OscConfig+0x584>
 8003dbe:	4b7d      	ldr	r3, [pc, #500]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc2:	4a7c      	ldr	r2, [pc, #496]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	6713      	str	r3, [r2, #112]	; 0x70
 8003dca:	e02d      	b.n	8003e28 <HAL_RCC_OscConfig+0x5e0>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d10c      	bne.n	8003dee <HAL_RCC_OscConfig+0x5a6>
 8003dd4:	4b77      	ldr	r3, [pc, #476]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	4a76      	ldr	r2, [pc, #472]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003dda:	f023 0301 	bic.w	r3, r3, #1
 8003dde:	6713      	str	r3, [r2, #112]	; 0x70
 8003de0:	4b74      	ldr	r3, [pc, #464]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de4:	4a73      	ldr	r2, [pc, #460]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003de6:	f023 0304 	bic.w	r3, r3, #4
 8003dea:	6713      	str	r3, [r2, #112]	; 0x70
 8003dec:	e01c      	b.n	8003e28 <HAL_RCC_OscConfig+0x5e0>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	2b05      	cmp	r3, #5
 8003df4:	d10c      	bne.n	8003e10 <HAL_RCC_OscConfig+0x5c8>
 8003df6:	4b6f      	ldr	r3, [pc, #444]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfa:	4a6e      	ldr	r2, [pc, #440]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003dfc:	f043 0304 	orr.w	r3, r3, #4
 8003e00:	6713      	str	r3, [r2, #112]	; 0x70
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e06:	4a6b      	ldr	r2, [pc, #428]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e0e:	e00b      	b.n	8003e28 <HAL_RCC_OscConfig+0x5e0>
 8003e10:	4b68      	ldr	r3, [pc, #416]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	4a67      	ldr	r2, [pc, #412]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e16:	f023 0301 	bic.w	r3, r3, #1
 8003e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1c:	4b65      	ldr	r3, [pc, #404]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e20:	4a64      	ldr	r2, [pc, #400]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e22:	f023 0304 	bic.w	r3, r3, #4
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d015      	beq.n	8003e5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e30:	f7fc ffac 	bl	8000d8c <HAL_GetTick>
 8003e34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e36:	e00a      	b.n	8003e4e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e38:	f7fc ffa8 	bl	8000d8c <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d901      	bls.n	8003e4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e14e      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e4e:	4b59      	ldr	r3, [pc, #356]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0ee      	beq.n	8003e38 <HAL_RCC_OscConfig+0x5f0>
 8003e5a:	e014      	b.n	8003e86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fc ff96 	bl	8000d8c <HAL_GetTick>
 8003e60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e64:	f7fc ff92 	bl	8000d8c <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e138      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003e7a:	4b4e      	ldr	r3, [pc, #312]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1ee      	bne.n	8003e64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f000 812d 	beq.w	80040ea <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003e90:	4b48      	ldr	r3, [pc, #288]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003e92:	691b      	ldr	r3, [r3, #16]
 8003e94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e98:	2b18      	cmp	r3, #24
 8003e9a:	f000 80bd 	beq.w	8004018 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	f040 809e 	bne.w	8003fe4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ea8:	4b42      	ldr	r3, [pc, #264]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a41      	ldr	r2, [pc, #260]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003eae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fc ff6a 	bl	8000d8c <HAL_GetTick>
 8003eb8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fc ff66 	bl	8000d8c <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e10e      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ece:	4b39      	ldr	r3, [pc, #228]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eda:	4b36      	ldr	r3, [pc, #216]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003edc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ede:	4b37      	ldr	r3, [pc, #220]	; (8003fbc <HAL_RCC_OscConfig+0x774>)
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003ee6:	687a      	ldr	r2, [r7, #4]
 8003ee8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003eea:	0112      	lsls	r2, r2, #4
 8003eec:	430a      	orrs	r2, r1
 8003eee:	4931      	ldr	r1, [pc, #196]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	628b      	str	r3, [r1, #40]	; 0x28
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f02:	3b01      	subs	r3, #1
 8003f04:	025b      	lsls	r3, r3, #9
 8003f06:	b29b      	uxth	r3, r3
 8003f08:	431a      	orrs	r2, r3
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	3b01      	subs	r3, #1
 8003f10:	041b      	lsls	r3, r3, #16
 8003f12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003f16:	431a      	orrs	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	061b      	lsls	r3, r3, #24
 8003f20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003f24:	4923      	ldr	r1, [pc, #140]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f2e:	4a21      	ldr	r2, [pc, #132]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f30:	f023 0301 	bic.w	r3, r3, #1
 8003f34:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003f36:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_RCC_OscConfig+0x778>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003f42:	00d2      	lsls	r2, r2, #3
 8003f44:	491b      	ldr	r1, [pc, #108]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003f4a:	4b1a      	ldr	r3, [pc, #104]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	f023 020c 	bic.w	r2, r3, #12
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	4917      	ldr	r1, [pc, #92]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003f5c:	4b15      	ldr	r3, [pc, #84]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	f023 0202 	bic.w	r2, r3, #2
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f68:	4912      	ldr	r1, [pc, #72]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003f6e:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	4a10      	ldr	r2, [pc, #64]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f7a:	4b0e      	ldr	r3, [pc, #56]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f7e:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003f86:	4b0b      	ldr	r3, [pc, #44]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003f92:	4b08      	ldr	r3, [pc, #32]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	4a07      	ldr	r2, [pc, #28]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003f98:	f043 0301 	orr.w	r3, r3, #1
 8003f9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f9e:	4b05      	ldr	r3, [pc, #20]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a04      	ldr	r2, [pc, #16]	; (8003fb4 <HAL_RCC_OscConfig+0x76c>)
 8003fa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003fa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003faa:	f7fc feef 	bl	8000d8c <HAL_GetTick>
 8003fae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fb0:	e011      	b.n	8003fd6 <HAL_RCC_OscConfig+0x78e>
 8003fb2:	bf00      	nop
 8003fb4:	58024400 	.word	0x58024400
 8003fb8:	58024800 	.word	0x58024800
 8003fbc:	fffffc0c 	.word	0xfffffc0c
 8003fc0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fc4:	f7fc fee2 	bl	8000d8c <HAL_GetTick>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	2b02      	cmp	r3, #2
 8003fd0:	d901      	bls.n	8003fd6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003fd2:	2303      	movs	r3, #3
 8003fd4:	e08a      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003fd6:	4b47      	ldr	r3, [pc, #284]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d0f0      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x77c>
 8003fe2:	e082      	b.n	80040ea <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fe4:	4b43      	ldr	r3, [pc, #268]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a42      	ldr	r2, [pc, #264]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 8003fea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff0:	f7fc fecc 	bl	8000d8c <HAL_GetTick>
 8003ff4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ff8:	f7fc fec8 	bl	8000d8c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e070      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800400a:	4b3a      	ldr	r3, [pc, #232]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1f0      	bne.n	8003ff8 <HAL_RCC_OscConfig+0x7b0>
 8004016:	e068      	b.n	80040ea <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004018:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 800401a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800401e:	4b35      	ldr	r3, [pc, #212]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004028:	2b01      	cmp	r3, #1
 800402a:	d031      	beq.n	8004090 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	f003 0203 	and.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004036:	429a      	cmp	r2, r3
 8004038:	d12a      	bne.n	8004090 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	091b      	lsrs	r3, r3, #4
 800403e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004046:	429a      	cmp	r2, r3
 8004048:	d122      	bne.n	8004090 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004054:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004056:	429a      	cmp	r2, r3
 8004058:	d11a      	bne.n	8004090 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	0a5b      	lsrs	r3, r3, #9
 800405e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d111      	bne.n	8004090 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	0c1b      	lsrs	r3, r3, #16
 8004070:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004078:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800407a:	429a      	cmp	r2, r3
 800407c:	d108      	bne.n	8004090 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	0e1b      	lsrs	r3, r3, #24
 8004082:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800408a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800408c:	429a      	cmp	r2, r3
 800408e:	d001      	beq.n	8004094 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e02b      	b.n	80040ec <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004094:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 8004096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004098:	08db      	lsrs	r3, r3, #3
 800409a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800409e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	429a      	cmp	r2, r3
 80040a8:	d01f      	beq.n	80040ea <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80040aa:	4b12      	ldr	r3, [pc, #72]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ae:	4a11      	ldr	r2, [pc, #68]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80040b6:	f7fc fe69 	bl	8000d8c <HAL_GetTick>
 80040ba:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80040bc:	bf00      	nop
 80040be:	f7fc fe65 	bl	8000d8c <HAL_GetTick>
 80040c2:	4602      	mov	r2, r0
 80040c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d0f9      	beq.n	80040be <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80040ca:	4b0a      	ldr	r3, [pc, #40]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_OscConfig+0x8b0>)
 80040d0:	4013      	ands	r3, r2
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80040d6:	00d2      	lsls	r2, r2, #3
 80040d8:	4906      	ldr	r1, [pc, #24]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80040de:	4b05      	ldr	r3, [pc, #20]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040e2:	4a04      	ldr	r2, [pc, #16]	; (80040f4 <HAL_RCC_OscConfig+0x8ac>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3730      	adds	r7, #48	; 0x30
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	58024400 	.word	0x58024400
 80040f8:	ffff0007 	.word	0xffff0007

080040fc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
 8004104:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e19c      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004110:	4b8a      	ldr	r3, [pc, #552]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	683a      	ldr	r2, [r7, #0]
 800411a:	429a      	cmp	r2, r3
 800411c:	d910      	bls.n	8004140 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800411e:	4b87      	ldr	r3, [pc, #540]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f023 020f 	bic.w	r2, r3, #15
 8004126:	4985      	ldr	r1, [pc, #532]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	4313      	orrs	r3, r2
 800412c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800412e:	4b83      	ldr	r3, [pc, #524]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	429a      	cmp	r2, r3
 800413a:	d001      	beq.n	8004140 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800413c:	2301      	movs	r3, #1
 800413e:	e184      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0304 	and.w	r3, r3, #4
 8004148:	2b00      	cmp	r3, #0
 800414a:	d010      	beq.n	800416e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	4b7b      	ldr	r3, [pc, #492]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004158:	429a      	cmp	r2, r3
 800415a:	d908      	bls.n	800416e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800415c:	4b78      	ldr	r3, [pc, #480]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800415e:	699b      	ldr	r3, [r3, #24]
 8004160:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	4975      	ldr	r1, [pc, #468]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800416a:	4313      	orrs	r3, r2
 800416c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f003 0308 	and.w	r3, r3, #8
 8004176:	2b00      	cmp	r3, #0
 8004178:	d010      	beq.n	800419c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	695a      	ldr	r2, [r3, #20]
 800417e:	4b70      	ldr	r3, [pc, #448]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004180:	69db      	ldr	r3, [r3, #28]
 8004182:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004186:	429a      	cmp	r2, r3
 8004188:	d908      	bls.n	800419c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800418a:	4b6d      	ldr	r3, [pc, #436]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800418c:	69db      	ldr	r3, [r3, #28]
 800418e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	496a      	ldr	r1, [pc, #424]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004198:	4313      	orrs	r3, r2
 800419a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0310 	and.w	r3, r3, #16
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d010      	beq.n	80041ca <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699a      	ldr	r2, [r3, #24]
 80041ac:	4b64      	ldr	r3, [pc, #400]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d908      	bls.n	80041ca <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80041b8:	4b61      	ldr	r3, [pc, #388]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	495e      	ldr	r1, [pc, #376]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041c6:	4313      	orrs	r3, r2
 80041c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d010      	beq.n	80041f8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	69da      	ldr	r2, [r3, #28]
 80041da:	4b59      	ldr	r3, [pc, #356]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d908      	bls.n	80041f8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80041e6:	4b56      	ldr	r3, [pc, #344]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	4953      	ldr	r1, [pc, #332]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 0302 	and.w	r3, r3, #2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d010      	beq.n	8004226 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	68da      	ldr	r2, [r3, #12]
 8004208:	4b4d      	ldr	r3, [pc, #308]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	f003 030f 	and.w	r3, r3, #15
 8004210:	429a      	cmp	r2, r3
 8004212:	d908      	bls.n	8004226 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004214:	4b4a      	ldr	r3, [pc, #296]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f023 020f 	bic.w	r2, r3, #15
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4947      	ldr	r1, [pc, #284]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004222:	4313      	orrs	r3, r2
 8004224:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	2b00      	cmp	r3, #0
 8004230:	d055      	beq.n	80042de <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004232:	4b43      	ldr	r3, [pc, #268]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004234:	699b      	ldr	r3, [r3, #24]
 8004236:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4940      	ldr	r1, [pc, #256]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004240:	4313      	orrs	r3, r2
 8004242:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d107      	bne.n	800425c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800424c:	4b3c      	ldr	r3, [pc, #240]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004254:	2b00      	cmp	r3, #0
 8004256:	d121      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e0f6      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b03      	cmp	r3, #3
 8004262:	d107      	bne.n	8004274 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004264:	4b36      	ldr	r3, [pc, #216]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800426c:	2b00      	cmp	r3, #0
 800426e:	d115      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e0ea      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d107      	bne.n	800428c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004284:	2b00      	cmp	r3, #0
 8004286:	d109      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0de      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800428c:	4b2c      	ldr	r3, [pc, #176]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d101      	bne.n	800429c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	e0d6      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800429c:	4b28      	ldr	r3, [pc, #160]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	f023 0207 	bic.w	r2, r3, #7
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	4925      	ldr	r1, [pc, #148]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80042ae:	f7fc fd6d 	bl	8000d8c <HAL_GetTick>
 80042b2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042b6:	f7fc fd69 	bl	8000d8c <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e0be      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042cc:	4b1c      	ldr	r3, [pc, #112]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	00db      	lsls	r3, r3, #3
 80042da:	429a      	cmp	r2, r3
 80042dc:	d1eb      	bne.n	80042b6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0302 	and.w	r3, r3, #2
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d010      	beq.n	800430c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	4b14      	ldr	r3, [pc, #80]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	f003 030f 	and.w	r3, r3, #15
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d208      	bcs.n	800430c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042fa:	4b11      	ldr	r3, [pc, #68]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f023 020f 	bic.w	r2, r3, #15
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	490e      	ldr	r1, [pc, #56]	; (8004340 <HAL_RCC_ClockConfig+0x244>)
 8004308:	4313      	orrs	r3, r2
 800430a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800430c:	4b0b      	ldr	r3, [pc, #44]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d214      	bcs.n	8004344 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	4906      	ldr	r1, [pc, #24]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b04      	ldr	r3, [pc, #16]	; (800433c <HAL_RCC_ClockConfig+0x240>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d005      	beq.n	8004344 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e086      	b.n	800444a <HAL_RCC_ClockConfig+0x34e>
 800433c:	52002000 	.word	0x52002000
 8004340:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d010      	beq.n	8004372 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	691a      	ldr	r2, [r3, #16]
 8004354:	4b3f      	ldr	r3, [pc, #252]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004356:	699b      	ldr	r3, [r3, #24]
 8004358:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800435c:	429a      	cmp	r2, r3
 800435e:	d208      	bcs.n	8004372 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004360:	4b3c      	ldr	r3, [pc, #240]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	4939      	ldr	r1, [pc, #228]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 800436e:	4313      	orrs	r3, r2
 8004370:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d010      	beq.n	80043a0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	695a      	ldr	r2, [r3, #20]
 8004382:	4b34      	ldr	r3, [pc, #208]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004384:	69db      	ldr	r3, [r3, #28]
 8004386:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800438a:	429a      	cmp	r2, r3
 800438c:	d208      	bcs.n	80043a0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800438e:	4b31      	ldr	r3, [pc, #196]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	492e      	ldr	r1, [pc, #184]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 800439c:	4313      	orrs	r3, r2
 800439e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f003 0310 	and.w	r3, r3, #16
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d010      	beq.n	80043ce <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	4b28      	ldr	r3, [pc, #160]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043b2:	69db      	ldr	r3, [r3, #28]
 80043b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d208      	bcs.n	80043ce <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	699b      	ldr	r3, [r3, #24]
 80043c8:	4922      	ldr	r1, [pc, #136]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d010      	beq.n	80043fc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	69da      	ldr	r2, [r3, #28]
 80043de:	4b1d      	ldr	r3, [pc, #116]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d208      	bcs.n	80043fc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80043ea:	4b1a      	ldr	r3, [pc, #104]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	4917      	ldr	r1, [pc, #92]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80043fc:	f000 f834 	bl	8004468 <HAL_RCC_GetSysClockFreq>
 8004400:	4602      	mov	r2, r0
 8004402:	4b14      	ldr	r3, [pc, #80]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	f003 030f 	and.w	r3, r3, #15
 800440c:	4912      	ldr	r1, [pc, #72]	; (8004458 <HAL_RCC_ClockConfig+0x35c>)
 800440e:	5ccb      	ldrb	r3, [r1, r3]
 8004410:	f003 031f 	and.w	r3, r3, #31
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
 8004418:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800441a:	4b0e      	ldr	r3, [pc, #56]	; (8004454 <HAL_RCC_ClockConfig+0x358>)
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	f003 030f 	and.w	r3, r3, #15
 8004422:	4a0d      	ldr	r2, [pc, #52]	; (8004458 <HAL_RCC_ClockConfig+0x35c>)
 8004424:	5cd3      	ldrb	r3, [r2, r3]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	fa22 f303 	lsr.w	r3, r2, r3
 8004430:	4a0a      	ldr	r2, [pc, #40]	; (800445c <HAL_RCC_ClockConfig+0x360>)
 8004432:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004434:	4a0a      	ldr	r2, [pc, #40]	; (8004460 <HAL_RCC_ClockConfig+0x364>)
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800443a:	4b0a      	ldr	r3, [pc, #40]	; (8004464 <HAL_RCC_ClockConfig+0x368>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7fc fc5a 	bl	8000cf8 <HAL_InitTick>
 8004444:	4603      	mov	r3, r0
 8004446:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8004448:	7bfb      	ldrb	r3, [r7, #15]
}
 800444a:	4618      	mov	r0, r3
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	58024400 	.word	0x58024400
 8004458:	08006230 	.word	0x08006230
 800445c:	24000004 	.word	0x24000004
 8004460:	24000000 	.word	0x24000000
 8004464:	24000008 	.word	0x24000008

08004468 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004468:	b480      	push	{r7}
 800446a:	b089      	sub	sp, #36	; 0x24
 800446c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800446e:	4bb3      	ldr	r3, [pc, #716]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004476:	2b18      	cmp	r3, #24
 8004478:	f200 8155 	bhi.w	8004726 <HAL_RCC_GetSysClockFreq+0x2be>
 800447c:	a201      	add	r2, pc, #4	; (adr r2, 8004484 <HAL_RCC_GetSysClockFreq+0x1c>)
 800447e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004482:	bf00      	nop
 8004484:	080044e9 	.word	0x080044e9
 8004488:	08004727 	.word	0x08004727
 800448c:	08004727 	.word	0x08004727
 8004490:	08004727 	.word	0x08004727
 8004494:	08004727 	.word	0x08004727
 8004498:	08004727 	.word	0x08004727
 800449c:	08004727 	.word	0x08004727
 80044a0:	08004727 	.word	0x08004727
 80044a4:	0800450f 	.word	0x0800450f
 80044a8:	08004727 	.word	0x08004727
 80044ac:	08004727 	.word	0x08004727
 80044b0:	08004727 	.word	0x08004727
 80044b4:	08004727 	.word	0x08004727
 80044b8:	08004727 	.word	0x08004727
 80044bc:	08004727 	.word	0x08004727
 80044c0:	08004727 	.word	0x08004727
 80044c4:	08004515 	.word	0x08004515
 80044c8:	08004727 	.word	0x08004727
 80044cc:	08004727 	.word	0x08004727
 80044d0:	08004727 	.word	0x08004727
 80044d4:	08004727 	.word	0x08004727
 80044d8:	08004727 	.word	0x08004727
 80044dc:	08004727 	.word	0x08004727
 80044e0:	08004727 	.word	0x08004727
 80044e4:	0800451b 	.word	0x0800451b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044e8:	4b94      	ldr	r3, [pc, #592]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0320 	and.w	r3, r3, #32
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d009      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044f4:	4b91      	ldr	r3, [pc, #580]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	f003 0303 	and.w	r3, r3, #3
 80044fe:	4a90      	ldr	r2, [pc, #576]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004500:	fa22 f303 	lsr.w	r3, r2, r3
 8004504:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8004506:	e111      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8004508:	4b8d      	ldr	r3, [pc, #564]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800450a:	61bb      	str	r3, [r7, #24]
      break;
 800450c:	e10e      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800450e:	4b8d      	ldr	r3, [pc, #564]	; (8004744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004510:	61bb      	str	r3, [r7, #24]
      break;
 8004512:	e10b      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8004516:	61bb      	str	r3, [r7, #24]
      break;
 8004518:	e108      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800451a:	4b88      	ldr	r3, [pc, #544]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800451c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800451e:	f003 0303 	and.w	r3, r3, #3
 8004522:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8004524:	4b85      	ldr	r3, [pc, #532]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004528:	091b      	lsrs	r3, r3, #4
 800452a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800452e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8004530:	4b82      	ldr	r3, [pc, #520]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800453a:	4b80      	ldr	r3, [pc, #512]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800453c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453e:	08db      	lsrs	r3, r3, #3
 8004540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	fb02 f303 	mul.w	r3, r2, r3
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004552:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	2b00      	cmp	r3, #0
 800455a:	f000 80e1 	beq.w	8004720 <HAL_RCC_GetSysClockFreq+0x2b8>
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b02      	cmp	r3, #2
 8004562:	f000 8083 	beq.w	800466c <HAL_RCC_GetSysClockFreq+0x204>
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	2b02      	cmp	r3, #2
 800456a:	f200 80a1 	bhi.w	80046b0 <HAL_RCC_GetSysClockFreq+0x248>
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d003      	beq.n	800457c <HAL_RCC_GetSysClockFreq+0x114>
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d056      	beq.n	8004628 <HAL_RCC_GetSysClockFreq+0x1c0>
 800457a:	e099      	b.n	80046b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800457c:	4b6f      	ldr	r3, [pc, #444]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0320 	and.w	r3, r3, #32
 8004584:	2b00      	cmp	r3, #0
 8004586:	d02d      	beq.n	80045e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004588:	4b6c      	ldr	r3, [pc, #432]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	08db      	lsrs	r3, r3, #3
 800458e:	f003 0303 	and.w	r3, r3, #3
 8004592:	4a6b      	ldr	r2, [pc, #428]	; (8004740 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8004594:	fa22 f303 	lsr.w	r3, r2, r3
 8004598:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	ee07 3a90 	vmov	s15, r3
 80045a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	ee07 3a90 	vmov	s15, r3
 80045aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045b2:	4b62      	ldr	r3, [pc, #392]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80045c6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 80045ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80045e2:	e087      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	ee07 3a90 	vmov	s15, r3
 80045ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ee:	eddf 6a58 	vldr	s13, [pc, #352]	; 8004750 <HAL_RCC_GetSysClockFreq+0x2e8>
 80045f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045f6:	4b51      	ldr	r3, [pc, #324]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80045f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045fe:	ee07 3a90 	vmov	s15, r3
 8004602:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004606:	ed97 6a02 	vldr	s12, [r7, #8]
 800460a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 800460e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004612:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004616:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800461a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800461e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004622:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8004626:	e065      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	ee07 3a90 	vmov	s15, r3
 800462e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004632:	eddf 6a48 	vldr	s13, [pc, #288]	; 8004754 <HAL_RCC_GetSysClockFreq+0x2ec>
 8004636:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800463a:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800463c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004642:	ee07 3a90 	vmov	s15, r3
 8004646:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800464a:	ed97 6a02 	vldr	s12, [r7, #8]
 800464e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004652:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004656:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800465a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800465e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004662:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004666:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800466a:	e043      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	ee07 3a90 	vmov	s15, r3
 8004672:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004676:	eddf 6a38 	vldr	s13, [pc, #224]	; 8004758 <HAL_RCC_GetSysClockFreq+0x2f0>
 800467a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800467e:	4b2f      	ldr	r3, [pc, #188]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004686:	ee07 3a90 	vmov	s15, r3
 800468a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800468e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004692:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 8004696:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800469a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800469e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046ae:	e021      	b.n	80046f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	ee07 3a90 	vmov	s15, r3
 80046b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046ba:	eddf 6a26 	vldr	s13, [pc, #152]	; 8004754 <HAL_RCC_GetSysClockFreq+0x2ec>
 80046be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046c2:	4b1e      	ldr	r3, [pc, #120]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046ca:	ee07 3a90 	vmov	s15, r3
 80046ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80046d6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800474c <HAL_RCC_GetSysClockFreq+0x2e4>
 80046da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80046f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80046f4:	4b11      	ldr	r3, [pc, #68]	; (800473c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f8:	0a5b      	lsrs	r3, r3, #9
 80046fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80046fe:	3301      	adds	r3, #1
 8004700:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	ee07 3a90 	vmov	s15, r3
 8004708:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800470c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004710:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004714:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004718:	ee17 3a90 	vmov	r3, s15
 800471c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800471e:	e005      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	61bb      	str	r3, [r7, #24]
      break;
 8004724:	e002      	b.n	800472c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004726:	4b07      	ldr	r3, [pc, #28]	; (8004744 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004728:	61bb      	str	r3, [r7, #24]
      break;
 800472a:	bf00      	nop
  }

  return sysclockfreq;
 800472c:	69bb      	ldr	r3, [r7, #24]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3724      	adds	r7, #36	; 0x24
 8004732:	46bd      	mov	sp, r7
 8004734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004738:	4770      	bx	lr
 800473a:	bf00      	nop
 800473c:	58024400 	.word	0x58024400
 8004740:	03d09000 	.word	0x03d09000
 8004744:	003d0900 	.word	0x003d0900
 8004748:	017d7840 	.word	0x017d7840
 800474c:	46000000 	.word	0x46000000
 8004750:	4c742400 	.word	0x4c742400
 8004754:	4a742400 	.word	0x4a742400
 8004758:	4bbebc20 	.word	0x4bbebc20

0800475c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e049      	b.n	8004802 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fc f8da 	bl	800093c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fa58 	bl	8004c50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3708      	adds	r7, #8
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b084      	sub	sp, #16
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
 8004814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d109      	bne.n	8004830 <HAL_TIM_PWM_Start+0x24>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	bf14      	ite	ne
 8004828:	2301      	movne	r3, #1
 800482a:	2300      	moveq	r3, #0
 800482c:	b2db      	uxtb	r3, r3
 800482e:	e03c      	b.n	80048aa <HAL_TIM_PWM_Start+0x9e>
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	2b04      	cmp	r3, #4
 8004834:	d109      	bne.n	800484a <HAL_TIM_PWM_Start+0x3e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b01      	cmp	r3, #1
 8004840:	bf14      	ite	ne
 8004842:	2301      	movne	r3, #1
 8004844:	2300      	moveq	r3, #0
 8004846:	b2db      	uxtb	r3, r3
 8004848:	e02f      	b.n	80048aa <HAL_TIM_PWM_Start+0x9e>
 800484a:	683b      	ldr	r3, [r7, #0]
 800484c:	2b08      	cmp	r3, #8
 800484e:	d109      	bne.n	8004864 <HAL_TIM_PWM_Start+0x58>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004856:	b2db      	uxtb	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	bf14      	ite	ne
 800485c:	2301      	movne	r3, #1
 800485e:	2300      	moveq	r3, #0
 8004860:	b2db      	uxtb	r3, r3
 8004862:	e022      	b.n	80048aa <HAL_TIM_PWM_Start+0x9e>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	2b0c      	cmp	r3, #12
 8004868:	d109      	bne.n	800487e <HAL_TIM_PWM_Start+0x72>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004870:	b2db      	uxtb	r3, r3
 8004872:	2b01      	cmp	r3, #1
 8004874:	bf14      	ite	ne
 8004876:	2301      	movne	r3, #1
 8004878:	2300      	moveq	r3, #0
 800487a:	b2db      	uxtb	r3, r3
 800487c:	e015      	b.n	80048aa <HAL_TIM_PWM_Start+0x9e>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b10      	cmp	r3, #16
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start+0x8c>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e008      	b.n	80048aa <HAL_TIM_PWM_Start+0x9e>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	2b01      	cmp	r3, #1
 80048a2:	bf14      	ite	ne
 80048a4:	2301      	movne	r3, #1
 80048a6:	2300      	moveq	r3, #0
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e0a1      	b.n	80049f6 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d104      	bne.n	80048c2 <HAL_TIM_PWM_Start+0xb6>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2202      	movs	r2, #2
 80048bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048c0:	e023      	b.n	800490a <HAL_TIM_PWM_Start+0xfe>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b04      	cmp	r3, #4
 80048c6:	d104      	bne.n	80048d2 <HAL_TIM_PWM_Start+0xc6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2202      	movs	r2, #2
 80048cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048d0:	e01b      	b.n	800490a <HAL_TIM_PWM_Start+0xfe>
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	2b08      	cmp	r3, #8
 80048d6:	d104      	bne.n	80048e2 <HAL_TIM_PWM_Start+0xd6>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2202      	movs	r2, #2
 80048dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048e0:	e013      	b.n	800490a <HAL_TIM_PWM_Start+0xfe>
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b0c      	cmp	r3, #12
 80048e6:	d104      	bne.n	80048f2 <HAL_TIM_PWM_Start+0xe6>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2202      	movs	r2, #2
 80048ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80048f0:	e00b      	b.n	800490a <HAL_TIM_PWM_Start+0xfe>
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	2b10      	cmp	r3, #16
 80048f6:	d104      	bne.n	8004902 <HAL_TIM_PWM_Start+0xf6>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004900:	e003      	b.n	800490a <HAL_TIM_PWM_Start+0xfe>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	2201      	movs	r2, #1
 8004910:	6839      	ldr	r1, [r7, #0]
 8004912:	4618      	mov	r0, r3
 8004914:	f000 fd18 	bl	8005348 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a38      	ldr	r2, [pc, #224]	; (8004a00 <HAL_TIM_PWM_Start+0x1f4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d013      	beq.n	800494a <HAL_TIM_PWM_Start+0x13e>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a37      	ldr	r2, [pc, #220]	; (8004a04 <HAL_TIM_PWM_Start+0x1f8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d00e      	beq.n	800494a <HAL_TIM_PWM_Start+0x13e>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a35      	ldr	r2, [pc, #212]	; (8004a08 <HAL_TIM_PWM_Start+0x1fc>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d009      	beq.n	800494a <HAL_TIM_PWM_Start+0x13e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <HAL_TIM_PWM_Start+0x200>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d004      	beq.n	800494a <HAL_TIM_PWM_Start+0x13e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a32      	ldr	r2, [pc, #200]	; (8004a10 <HAL_TIM_PWM_Start+0x204>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_TIM_PWM_Start+0x142>
 800494a:	2301      	movs	r3, #1
 800494c:	e000      	b.n	8004950 <HAL_TIM_PWM_Start+0x144>
 800494e:	2300      	movs	r3, #0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d007      	beq.n	8004964 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004962:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <HAL_TIM_PWM_Start+0x1f4>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d022      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d01d      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a25      	ldr	r2, [pc, #148]	; (8004a14 <HAL_TIM_PWM_Start+0x208>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d018      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a24      	ldr	r2, [pc, #144]	; (8004a18 <HAL_TIM_PWM_Start+0x20c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a22      	ldr	r2, [pc, #136]	; (8004a1c <HAL_TIM_PWM_Start+0x210>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1a      	ldr	r2, [pc, #104]	; (8004a04 <HAL_TIM_PWM_Start+0x1f8>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1e      	ldr	r2, [pc, #120]	; (8004a20 <HAL_TIM_PWM_Start+0x214>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <HAL_TIM_PWM_Start+0x1a8>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a16      	ldr	r2, [pc, #88]	; (8004a08 <HAL_TIM_PWM_Start+0x1fc>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d115      	bne.n	80049e0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689a      	ldr	r2, [r3, #8]
 80049ba:	4b1a      	ldr	r3, [pc, #104]	; (8004a24 <HAL_TIM_PWM_Start+0x218>)
 80049bc:	4013      	ands	r3, r2
 80049be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d015      	beq.n	80049f2 <HAL_TIM_PWM_Start+0x1e6>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d011      	beq.n	80049f2 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f042 0201 	orr.w	r2, r2, #1
 80049dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049de:	e008      	b.n	80049f2 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f042 0201 	orr.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e000      	b.n	80049f4 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049f4:	2300      	movs	r3, #0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	40010000 	.word	0x40010000
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40014400 	.word	0x40014400
 8004a10:	40014800 	.word	0x40014800
 8004a14:	40000400 	.word	0x40000400
 8004a18:	40000800 	.word	0x40000800
 8004a1c:	40000c00 	.word	0x40000c00
 8004a20:	40001800 	.word	0x40001800
 8004a24:	00010007 	.word	0x00010007

08004a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0ff      	b.n	8004c46 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b14      	cmp	r3, #20
 8004a52:	f200 80f0 	bhi.w	8004c36 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004ab1 	.word	0x08004ab1
 8004a60:	08004c37 	.word	0x08004c37
 8004a64:	08004c37 	.word	0x08004c37
 8004a68:	08004c37 	.word	0x08004c37
 8004a6c:	08004af1 	.word	0x08004af1
 8004a70:	08004c37 	.word	0x08004c37
 8004a74:	08004c37 	.word	0x08004c37
 8004a78:	08004c37 	.word	0x08004c37
 8004a7c:	08004b33 	.word	0x08004b33
 8004a80:	08004c37 	.word	0x08004c37
 8004a84:	08004c37 	.word	0x08004c37
 8004a88:	08004c37 	.word	0x08004c37
 8004a8c:	08004b73 	.word	0x08004b73
 8004a90:	08004c37 	.word	0x08004c37
 8004a94:	08004c37 	.word	0x08004c37
 8004a98:	08004c37 	.word	0x08004c37
 8004a9c:	08004bb5 	.word	0x08004bb5
 8004aa0:	08004c37 	.word	0x08004c37
 8004aa4:	08004c37 	.word	0x08004c37
 8004aa8:	08004c37 	.word	0x08004c37
 8004aac:	08004bf5 	.word	0x08004bf5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	68b9      	ldr	r1, [r7, #8]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 f970 	bl	8004d9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699a      	ldr	r2, [r3, #24]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f042 0208 	orr.w	r2, r2, #8
 8004aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f022 0204 	bic.w	r2, r2, #4
 8004ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	6999      	ldr	r1, [r3, #24]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	691a      	ldr	r2, [r3, #16]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	619a      	str	r2, [r3, #24]
      break;
 8004aee:	e0a5      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68b9      	ldr	r1, [r7, #8]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f000 f9e0 	bl	8004ebc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	699a      	ldr	r2, [r3, #24]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6999      	ldr	r1, [r3, #24]
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	021a      	lsls	r2, r3, #8
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	430a      	orrs	r2, r1
 8004b2e:	619a      	str	r2, [r3, #24]
      break;
 8004b30:	e084      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68b9      	ldr	r1, [r7, #8]
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f000 fa49 	bl	8004fd0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69da      	ldr	r2, [r3, #28]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f042 0208 	orr.w	r2, r2, #8
 8004b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0204 	bic.w	r2, r2, #4
 8004b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69d9      	ldr	r1, [r3, #28]
 8004b64:	68bb      	ldr	r3, [r7, #8]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	430a      	orrs	r2, r1
 8004b6e:	61da      	str	r2, [r3, #28]
      break;
 8004b70:	e064      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	4618      	mov	r0, r3
 8004b7a:	f000 fab1 	bl	80050e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69da      	ldr	r2, [r3, #28]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69d9      	ldr	r1, [r3, #28]
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	691b      	ldr	r3, [r3, #16]
 8004ba8:	021a      	lsls	r2, r3, #8
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	430a      	orrs	r2, r1
 8004bb0:	61da      	str	r2, [r3, #28]
      break;
 8004bb2:	e043      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	68b9      	ldr	r1, [r7, #8]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f000 fafa 	bl	80051b4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f042 0208 	orr.w	r2, r2, #8
 8004bce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 0204 	bic.w	r2, r2, #4
 8004bde:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	430a      	orrs	r2, r1
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004bf2:	e023      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fb3e 	bl	800527c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c1e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	691b      	ldr	r3, [r3, #16]
 8004c2a:	021a      	lsls	r2, r3, #8
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	430a      	orrs	r2, r1
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004c34:	e002      	b.n	8004c3c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	75fb      	strb	r3, [r7, #23]
      break;
 8004c3a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3718      	adds	r7, #24
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop

08004c50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	4a46      	ldr	r2, [pc, #280]	; (8004d7c <TIM_Base_SetConfig+0x12c>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c6e:	d00f      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a43      	ldr	r2, [pc, #268]	; (8004d80 <TIM_Base_SetConfig+0x130>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d00b      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a42      	ldr	r2, [pc, #264]	; (8004d84 <TIM_Base_SetConfig+0x134>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d007      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a41      	ldr	r2, [pc, #260]	; (8004d88 <TIM_Base_SetConfig+0x138>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d003      	beq.n	8004c90 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a40      	ldr	r2, [pc, #256]	; (8004d8c <TIM_Base_SetConfig+0x13c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a35      	ldr	r2, [pc, #212]	; (8004d7c <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d01f      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cb0:	d01b      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a32      	ldr	r2, [pc, #200]	; (8004d80 <TIM_Base_SetConfig+0x130>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d017      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a31      	ldr	r2, [pc, #196]	; (8004d84 <TIM_Base_SetConfig+0x134>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d013      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a30      	ldr	r2, [pc, #192]	; (8004d88 <TIM_Base_SetConfig+0x138>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d00f      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2f      	ldr	r2, [pc, #188]	; (8004d8c <TIM_Base_SetConfig+0x13c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d00b      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2e      	ldr	r2, [pc, #184]	; (8004d90 <TIM_Base_SetConfig+0x140>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d007      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2d      	ldr	r2, [pc, #180]	; (8004d94 <TIM_Base_SetConfig+0x144>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d003      	beq.n	8004cea <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2c      	ldr	r2, [pc, #176]	; (8004d98 <TIM_Base_SetConfig+0x148>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d108      	bne.n	8004cfc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	695b      	ldr	r3, [r3, #20]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a16      	ldr	r2, [pc, #88]	; (8004d7c <TIM_Base_SetConfig+0x12c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d00f      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a18      	ldr	r2, [pc, #96]	; (8004d8c <TIM_Base_SetConfig+0x13c>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d00b      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4a17      	ldr	r2, [pc, #92]	; (8004d90 <TIM_Base_SetConfig+0x140>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d007      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	4a16      	ldr	r2, [pc, #88]	; (8004d94 <TIM_Base_SetConfig+0x144>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d003      	beq.n	8004d48 <TIM_Base_SetConfig+0xf8>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	4a15      	ldr	r2, [pc, #84]	; (8004d98 <TIM_Base_SetConfig+0x148>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d103      	bne.n	8004d50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	691a      	ldr	r2, [r3, #16]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b01      	cmp	r3, #1
 8004d60:	d105      	bne.n	8004d6e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	611a      	str	r2, [r3, #16]
  }
}
 8004d6e:	bf00      	nop
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
 8004d7a:	bf00      	nop
 8004d7c:	40010000 	.word	0x40010000
 8004d80:	40000400 	.word	0x40000400
 8004d84:	40000800 	.word	0x40000800
 8004d88:	40000c00 	.word	0x40000c00
 8004d8c:	40010400 	.word	0x40010400
 8004d90:	40014000 	.word	0x40014000
 8004d94:	40014400 	.word	0x40014400
 8004d98:	40014800 	.word	0x40014800

08004d9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b087      	sub	sp, #28
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a1b      	ldr	r3, [r3, #32]
 8004daa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a1b      	ldr	r3, [r3, #32]
 8004db0:	f023 0201 	bic.w	r2, r3, #1
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	4b37      	ldr	r3, [pc, #220]	; (8004ea4 <TIM_OC1_SetConfig+0x108>)
 8004dc8:	4013      	ands	r3, r2
 8004dca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	f023 0303 	bic.w	r3, r3, #3
 8004dd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	68fa      	ldr	r2, [r7, #12]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	f023 0302 	bic.w	r3, r3, #2
 8004de4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a2d      	ldr	r2, [pc, #180]	; (8004ea8 <TIM_OC1_SetConfig+0x10c>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d00f      	beq.n	8004e18 <TIM_OC1_SetConfig+0x7c>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	4a2c      	ldr	r2, [pc, #176]	; (8004eac <TIM_OC1_SetConfig+0x110>)
 8004dfc:	4293      	cmp	r3, r2
 8004dfe:	d00b      	beq.n	8004e18 <TIM_OC1_SetConfig+0x7c>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	4a2b      	ldr	r2, [pc, #172]	; (8004eb0 <TIM_OC1_SetConfig+0x114>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d007      	beq.n	8004e18 <TIM_OC1_SetConfig+0x7c>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a2a      	ldr	r2, [pc, #168]	; (8004eb4 <TIM_OC1_SetConfig+0x118>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC1_SetConfig+0x7c>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a29      	ldr	r2, [pc, #164]	; (8004eb8 <TIM_OC1_SetConfig+0x11c>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10c      	bne.n	8004e32 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0308 	bic.w	r3, r3, #8
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	697a      	ldr	r2, [r7, #20]
 8004e26:	4313      	orrs	r3, r2
 8004e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f023 0304 	bic.w	r3, r3, #4
 8004e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a1c      	ldr	r2, [pc, #112]	; (8004ea8 <TIM_OC1_SetConfig+0x10c>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00f      	beq.n	8004e5a <TIM_OC1_SetConfig+0xbe>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a1b      	ldr	r2, [pc, #108]	; (8004eac <TIM_OC1_SetConfig+0x110>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00b      	beq.n	8004e5a <TIM_OC1_SetConfig+0xbe>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a1a      	ldr	r2, [pc, #104]	; (8004eb0 <TIM_OC1_SetConfig+0x114>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d007      	beq.n	8004e5a <TIM_OC1_SetConfig+0xbe>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a19      	ldr	r2, [pc, #100]	; (8004eb4 <TIM_OC1_SetConfig+0x118>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC1_SetConfig+0xbe>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <TIM_OC1_SetConfig+0x11c>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d111      	bne.n	8004e7e <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	fffeff8f 	.word	0xfffeff8f
 8004ea8:	40010000 	.word	0x40010000
 8004eac:	40010400 	.word	0x40010400
 8004eb0:	40014000 	.word	0x40014000
 8004eb4:	40014400 	.word	0x40014400
 8004eb8:	40014800 	.word	0x40014800

08004ebc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b087      	sub	sp, #28
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
 8004ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	f023 0210 	bic.w	r2, r3, #16
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	4b34      	ldr	r3, [pc, #208]	; (8004fb8 <TIM_OC2_SetConfig+0xfc>)
 8004ee8:	4013      	ands	r3, r2
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a29      	ldr	r2, [pc, #164]	; (8004fbc <TIM_OC2_SetConfig+0x100>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <TIM_OC2_SetConfig+0x68>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a28      	ldr	r2, [pc, #160]	; (8004fc0 <TIM_OC2_SetConfig+0x104>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d10d      	bne.n	8004f40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	011b      	lsls	r3, r3, #4
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f3e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a1e      	ldr	r2, [pc, #120]	; (8004fbc <TIM_OC2_SetConfig+0x100>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d00f      	beq.n	8004f68 <TIM_OC2_SetConfig+0xac>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a1d      	ldr	r2, [pc, #116]	; (8004fc0 <TIM_OC2_SetConfig+0x104>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00b      	beq.n	8004f68 <TIM_OC2_SetConfig+0xac>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a1c      	ldr	r2, [pc, #112]	; (8004fc4 <TIM_OC2_SetConfig+0x108>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d007      	beq.n	8004f68 <TIM_OC2_SetConfig+0xac>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	4a1b      	ldr	r2, [pc, #108]	; (8004fc8 <TIM_OC2_SetConfig+0x10c>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <TIM_OC2_SetConfig+0xac>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	4a1a      	ldr	r2, [pc, #104]	; (8004fcc <TIM_OC2_SetConfig+0x110>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d113      	bne.n	8004f90 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	695b      	ldr	r3, [r3, #20]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	697a      	ldr	r2, [r7, #20]
 8004fa8:	621a      	str	r2, [r3, #32]
}
 8004faa:	bf00      	nop
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	feff8fff 	.word	0xfeff8fff
 8004fbc:	40010000 	.word	0x40010000
 8004fc0:	40010400 	.word	0x40010400
 8004fc4:	40014000 	.word	0x40014000
 8004fc8:	40014400 	.word	0x40014400
 8004fcc:	40014800 	.word	0x40014800

08004fd0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	69db      	ldr	r3, [r3, #28]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4b33      	ldr	r3, [pc, #204]	; (80050c8 <TIM_OC3_SetConfig+0xf8>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f023 0303 	bic.w	r3, r3, #3
 8005006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4313      	orrs	r3, r2
 8005010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005018:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	021b      	lsls	r3, r3, #8
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	4313      	orrs	r3, r2
 8005024:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a28      	ldr	r2, [pc, #160]	; (80050cc <TIM_OC3_SetConfig+0xfc>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d003      	beq.n	8005036 <TIM_OC3_SetConfig+0x66>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <TIM_OC3_SetConfig+0x100>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d10d      	bne.n	8005052 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	021b      	lsls	r3, r3, #8
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	4313      	orrs	r3, r2
 8005048:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005050:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a1d      	ldr	r2, [pc, #116]	; (80050cc <TIM_OC3_SetConfig+0xfc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00f      	beq.n	800507a <TIM_OC3_SetConfig+0xaa>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <TIM_OC3_SetConfig+0x100>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d00b      	beq.n	800507a <TIM_OC3_SetConfig+0xaa>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a1b      	ldr	r2, [pc, #108]	; (80050d4 <TIM_OC3_SetConfig+0x104>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d007      	beq.n	800507a <TIM_OC3_SetConfig+0xaa>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a1a      	ldr	r2, [pc, #104]	; (80050d8 <TIM_OC3_SetConfig+0x108>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d003      	beq.n	800507a <TIM_OC3_SetConfig+0xaa>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a19      	ldr	r2, [pc, #100]	; (80050dc <TIM_OC3_SetConfig+0x10c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d113      	bne.n	80050a2 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	011b      	lsls	r3, r3, #4
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4313      	orrs	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	011b      	lsls	r3, r3, #4
 800509c:	693a      	ldr	r2, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	693a      	ldr	r2, [r7, #16]
 80050a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	68fa      	ldr	r2, [r7, #12]
 80050ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	621a      	str	r2, [r3, #32]
}
 80050bc:	bf00      	nop
 80050be:	371c      	adds	r7, #28
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	fffeff8f 	.word	0xfffeff8f
 80050cc:	40010000 	.word	0x40010000
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40014400 	.word	0x40014400
 80050dc:	40014800 	.word	0x40014800

080050e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
 80050e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a1b      	ldr	r3, [r3, #32]
 80050ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a1b      	ldr	r3, [r3, #32]
 80050f4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	69db      	ldr	r3, [r3, #28]
 8005106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <TIM_OC4_SetConfig+0xbc>)
 800510c:	4013      	ands	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	021b      	lsls	r3, r3, #8
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800512a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	031b      	lsls	r3, r3, #12
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	4313      	orrs	r3, r2
 8005136:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a19      	ldr	r2, [pc, #100]	; (80051a0 <TIM_OC4_SetConfig+0xc0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d00f      	beq.n	8005160 <TIM_OC4_SetConfig+0x80>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a18      	ldr	r2, [pc, #96]	; (80051a4 <TIM_OC4_SetConfig+0xc4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00b      	beq.n	8005160 <TIM_OC4_SetConfig+0x80>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a17      	ldr	r2, [pc, #92]	; (80051a8 <TIM_OC4_SetConfig+0xc8>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d007      	beq.n	8005160 <TIM_OC4_SetConfig+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a16      	ldr	r2, [pc, #88]	; (80051ac <TIM_OC4_SetConfig+0xcc>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d003      	beq.n	8005160 <TIM_OC4_SetConfig+0x80>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a15      	ldr	r2, [pc, #84]	; (80051b0 <TIM_OC4_SetConfig+0xd0>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d109      	bne.n	8005174 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005166:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	695b      	ldr	r3, [r3, #20]
 800516c:	019b      	lsls	r3, r3, #6
 800516e:	697a      	ldr	r2, [r7, #20]
 8005170:	4313      	orrs	r3, r2
 8005172:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68fa      	ldr	r2, [r7, #12]
 800517e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685a      	ldr	r2, [r3, #4]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	693a      	ldr	r2, [r7, #16]
 800518c:	621a      	str	r2, [r3, #32]
}
 800518e:	bf00      	nop
 8005190:	371c      	adds	r7, #28
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	feff8fff 	.word	0xfeff8fff
 80051a0:	40010000 	.word	0x40010000
 80051a4:	40010400 	.word	0x40010400
 80051a8:	40014000 	.word	0x40014000
 80051ac:	40014400 	.word	0x40014400
 80051b0:	40014800 	.word	0x40014800

080051b4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b087      	sub	sp, #28
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6a1b      	ldr	r3, [r3, #32]
 80051c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4b21      	ldr	r3, [pc, #132]	; (8005264 <TIM_OC5_SetConfig+0xb0>)
 80051e0:	4013      	ands	r3, r2
 80051e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68fa      	ldr	r2, [r7, #12]
 80051ea:	4313      	orrs	r3, r2
 80051ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	041b      	lsls	r3, r3, #16
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	4a18      	ldr	r2, [pc, #96]	; (8005268 <TIM_OC5_SetConfig+0xb4>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d00f      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	4a17      	ldr	r2, [pc, #92]	; (800526c <TIM_OC5_SetConfig+0xb8>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d00b      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a16      	ldr	r2, [pc, #88]	; (8005270 <TIM_OC5_SetConfig+0xbc>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d007      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	4a15      	ldr	r2, [pc, #84]	; (8005274 <TIM_OC5_SetConfig+0xc0>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d003      	beq.n	800522a <TIM_OC5_SetConfig+0x76>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	4a14      	ldr	r2, [pc, #80]	; (8005278 <TIM_OC5_SetConfig+0xc4>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d109      	bne.n	800523e <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005230:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	695b      	ldr	r3, [r3, #20]
 8005236:	021b      	lsls	r3, r3, #8
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	697a      	ldr	r2, [r7, #20]
 8005242:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	685a      	ldr	r2, [r3, #4]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	621a      	str	r2, [r3, #32]
}
 8005258:	bf00      	nop
 800525a:	371c      	adds	r7, #28
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr
 8005264:	fffeff8f 	.word	0xfffeff8f
 8005268:	40010000 	.word	0x40010000
 800526c:	40010400 	.word	0x40010400
 8005270:	40014000 	.word	0x40014000
 8005274:	40014400 	.word	0x40014400
 8005278:	40014800 	.word	0x40014800

0800527c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a1b      	ldr	r3, [r3, #32]
 8005290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	685b      	ldr	r3, [r3, #4]
 800529c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4b22      	ldr	r3, [pc, #136]	; (8005330 <TIM_OC6_SetConfig+0xb4>)
 80052a8:	4013      	ands	r3, r2
 80052aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	021b      	lsls	r3, r3, #8
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	051b      	lsls	r3, r3, #20
 80052c6:	693a      	ldr	r2, [r7, #16]
 80052c8:	4313      	orrs	r3, r2
 80052ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a19      	ldr	r2, [pc, #100]	; (8005334 <TIM_OC6_SetConfig+0xb8>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_OC6_SetConfig+0x78>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a18      	ldr	r2, [pc, #96]	; (8005338 <TIM_OC6_SetConfig+0xbc>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_OC6_SetConfig+0x78>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a17      	ldr	r2, [pc, #92]	; (800533c <TIM_OC6_SetConfig+0xc0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_OC6_SetConfig+0x78>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a16      	ldr	r2, [pc, #88]	; (8005340 <TIM_OC6_SetConfig+0xc4>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_OC6_SetConfig+0x78>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a15      	ldr	r2, [pc, #84]	; (8005344 <TIM_OC6_SetConfig+0xc8>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d109      	bne.n	8005308 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052fa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	029b      	lsls	r3, r3, #10
 8005302:	697a      	ldr	r2, [r7, #20]
 8005304:	4313      	orrs	r3, r2
 8005306:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685a      	ldr	r2, [r3, #4]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	621a      	str	r2, [r3, #32]
}
 8005322:	bf00      	nop
 8005324:	371c      	adds	r7, #28
 8005326:	46bd      	mov	sp, r7
 8005328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	feff8fff 	.word	0xfeff8fff
 8005334:	40010000 	.word	0x40010000
 8005338:	40010400 	.word	0x40010400
 800533c:	40014000 	.word	0x40014000
 8005340:	40014400 	.word	0x40014400
 8005344:	40014800 	.word	0x40014800

08005348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005348:	b480      	push	{r7}
 800534a:	b087      	sub	sp, #28
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	f003 031f 	and.w	r3, r3, #31
 800535a:	2201      	movs	r2, #1
 800535c:	fa02 f303 	lsl.w	r3, r2, r3
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1a      	ldr	r2, [r3, #32]
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	43db      	mvns	r3, r3
 800536a:	401a      	ands	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	fa01 f303 	lsl.w	r3, r1, r3
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
	...

08005394 <std>:
 8005394:	2300      	movs	r3, #0
 8005396:	b510      	push	{r4, lr}
 8005398:	4604      	mov	r4, r0
 800539a:	e9c0 3300 	strd	r3, r3, [r0]
 800539e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80053a2:	6083      	str	r3, [r0, #8]
 80053a4:	8181      	strh	r1, [r0, #12]
 80053a6:	6643      	str	r3, [r0, #100]	; 0x64
 80053a8:	81c2      	strh	r2, [r0, #14]
 80053aa:	6183      	str	r3, [r0, #24]
 80053ac:	4619      	mov	r1, r3
 80053ae:	2208      	movs	r2, #8
 80053b0:	305c      	adds	r0, #92	; 0x5c
 80053b2:	f000 f8f4 	bl	800559e <memset>
 80053b6:	4b05      	ldr	r3, [pc, #20]	; (80053cc <std+0x38>)
 80053b8:	6263      	str	r3, [r4, #36]	; 0x24
 80053ba:	4b05      	ldr	r3, [pc, #20]	; (80053d0 <std+0x3c>)
 80053bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80053be:	4b05      	ldr	r3, [pc, #20]	; (80053d4 <std+0x40>)
 80053c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80053c2:	4b05      	ldr	r3, [pc, #20]	; (80053d8 <std+0x44>)
 80053c4:	6224      	str	r4, [r4, #32]
 80053c6:	6323      	str	r3, [r4, #48]	; 0x30
 80053c8:	bd10      	pop	{r4, pc}
 80053ca:	bf00      	nop
 80053cc:	08005519 	.word	0x08005519
 80053d0:	0800553b 	.word	0x0800553b
 80053d4:	08005573 	.word	0x08005573
 80053d8:	08005597 	.word	0x08005597

080053dc <stdio_exit_handler>:
 80053dc:	4a02      	ldr	r2, [pc, #8]	; (80053e8 <stdio_exit_handler+0xc>)
 80053de:	4903      	ldr	r1, [pc, #12]	; (80053ec <stdio_exit_handler+0x10>)
 80053e0:	4803      	ldr	r0, [pc, #12]	; (80053f0 <stdio_exit_handler+0x14>)
 80053e2:	f000 b869 	b.w	80054b8 <_fwalk_sglue>
 80053e6:	bf00      	nop
 80053e8:	24000010 	.word	0x24000010
 80053ec:	08005f39 	.word	0x08005f39
 80053f0:	2400001c 	.word	0x2400001c

080053f4 <cleanup_stdio>:
 80053f4:	6841      	ldr	r1, [r0, #4]
 80053f6:	4b0c      	ldr	r3, [pc, #48]	; (8005428 <cleanup_stdio+0x34>)
 80053f8:	4299      	cmp	r1, r3
 80053fa:	b510      	push	{r4, lr}
 80053fc:	4604      	mov	r4, r0
 80053fe:	d001      	beq.n	8005404 <cleanup_stdio+0x10>
 8005400:	f000 fd9a 	bl	8005f38 <_fflush_r>
 8005404:	68a1      	ldr	r1, [r4, #8]
 8005406:	4b09      	ldr	r3, [pc, #36]	; (800542c <cleanup_stdio+0x38>)
 8005408:	4299      	cmp	r1, r3
 800540a:	d002      	beq.n	8005412 <cleanup_stdio+0x1e>
 800540c:	4620      	mov	r0, r4
 800540e:	f000 fd93 	bl	8005f38 <_fflush_r>
 8005412:	68e1      	ldr	r1, [r4, #12]
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <cleanup_stdio+0x3c>)
 8005416:	4299      	cmp	r1, r3
 8005418:	d004      	beq.n	8005424 <cleanup_stdio+0x30>
 800541a:	4620      	mov	r0, r4
 800541c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005420:	f000 bd8a 	b.w	8005f38 <_fflush_r>
 8005424:	bd10      	pop	{r4, pc}
 8005426:	bf00      	nop
 8005428:	2400aa40 	.word	0x2400aa40
 800542c:	2400aaa8 	.word	0x2400aaa8
 8005430:	2400ab10 	.word	0x2400ab10

08005434 <global_stdio_init.part.0>:
 8005434:	b510      	push	{r4, lr}
 8005436:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <global_stdio_init.part.0+0x30>)
 8005438:	4c0b      	ldr	r4, [pc, #44]	; (8005468 <global_stdio_init.part.0+0x34>)
 800543a:	4a0c      	ldr	r2, [pc, #48]	; (800546c <global_stdio_init.part.0+0x38>)
 800543c:	601a      	str	r2, [r3, #0]
 800543e:	4620      	mov	r0, r4
 8005440:	2200      	movs	r2, #0
 8005442:	2104      	movs	r1, #4
 8005444:	f7ff ffa6 	bl	8005394 <std>
 8005448:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800544c:	2201      	movs	r2, #1
 800544e:	2109      	movs	r1, #9
 8005450:	f7ff ffa0 	bl	8005394 <std>
 8005454:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005458:	2202      	movs	r2, #2
 800545a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545e:	2112      	movs	r1, #18
 8005460:	f7ff bf98 	b.w	8005394 <std>
 8005464:	2400ab78 	.word	0x2400ab78
 8005468:	2400aa40 	.word	0x2400aa40
 800546c:	080053dd 	.word	0x080053dd

08005470 <__sfp_lock_acquire>:
 8005470:	4801      	ldr	r0, [pc, #4]	; (8005478 <__sfp_lock_acquire+0x8>)
 8005472:	f000 b90d 	b.w	8005690 <__retarget_lock_acquire_recursive>
 8005476:	bf00      	nop
 8005478:	2400ab81 	.word	0x2400ab81

0800547c <__sfp_lock_release>:
 800547c:	4801      	ldr	r0, [pc, #4]	; (8005484 <__sfp_lock_release+0x8>)
 800547e:	f000 b908 	b.w	8005692 <__retarget_lock_release_recursive>
 8005482:	bf00      	nop
 8005484:	2400ab81 	.word	0x2400ab81

08005488 <__sinit>:
 8005488:	b510      	push	{r4, lr}
 800548a:	4604      	mov	r4, r0
 800548c:	f7ff fff0 	bl	8005470 <__sfp_lock_acquire>
 8005490:	6a23      	ldr	r3, [r4, #32]
 8005492:	b11b      	cbz	r3, 800549c <__sinit+0x14>
 8005494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005498:	f7ff bff0 	b.w	800547c <__sfp_lock_release>
 800549c:	4b04      	ldr	r3, [pc, #16]	; (80054b0 <__sinit+0x28>)
 800549e:	6223      	str	r3, [r4, #32]
 80054a0:	4b04      	ldr	r3, [pc, #16]	; (80054b4 <__sinit+0x2c>)
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d1f5      	bne.n	8005494 <__sinit+0xc>
 80054a8:	f7ff ffc4 	bl	8005434 <global_stdio_init.part.0>
 80054ac:	e7f2      	b.n	8005494 <__sinit+0xc>
 80054ae:	bf00      	nop
 80054b0:	080053f5 	.word	0x080053f5
 80054b4:	2400ab78 	.word	0x2400ab78

080054b8 <_fwalk_sglue>:
 80054b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054bc:	4607      	mov	r7, r0
 80054be:	4688      	mov	r8, r1
 80054c0:	4614      	mov	r4, r2
 80054c2:	2600      	movs	r6, #0
 80054c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c8:	f1b9 0901 	subs.w	r9, r9, #1
 80054cc:	d505      	bpl.n	80054da <_fwalk_sglue+0x22>
 80054ce:	6824      	ldr	r4, [r4, #0]
 80054d0:	2c00      	cmp	r4, #0
 80054d2:	d1f7      	bne.n	80054c4 <_fwalk_sglue+0xc>
 80054d4:	4630      	mov	r0, r6
 80054d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054da:	89ab      	ldrh	r3, [r5, #12]
 80054dc:	2b01      	cmp	r3, #1
 80054de:	d907      	bls.n	80054f0 <_fwalk_sglue+0x38>
 80054e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e4:	3301      	adds	r3, #1
 80054e6:	d003      	beq.n	80054f0 <_fwalk_sglue+0x38>
 80054e8:	4629      	mov	r1, r5
 80054ea:	4638      	mov	r0, r7
 80054ec:	47c0      	blx	r8
 80054ee:	4306      	orrs	r6, r0
 80054f0:	3568      	adds	r5, #104	; 0x68
 80054f2:	e7e9      	b.n	80054c8 <_fwalk_sglue+0x10>

080054f4 <iprintf>:
 80054f4:	b40f      	push	{r0, r1, r2, r3}
 80054f6:	b507      	push	{r0, r1, r2, lr}
 80054f8:	4906      	ldr	r1, [pc, #24]	; (8005514 <iprintf+0x20>)
 80054fa:	ab04      	add	r3, sp, #16
 80054fc:	6808      	ldr	r0, [r1, #0]
 80054fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8005502:	6881      	ldr	r1, [r0, #8]
 8005504:	9301      	str	r3, [sp, #4]
 8005506:	f000 f9e7 	bl	80058d8 <_vfiprintf_r>
 800550a:	b003      	add	sp, #12
 800550c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005510:	b004      	add	sp, #16
 8005512:	4770      	bx	lr
 8005514:	24000068 	.word	0x24000068

08005518 <__sread>:
 8005518:	b510      	push	{r4, lr}
 800551a:	460c      	mov	r4, r1
 800551c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005520:	f000 f868 	bl	80055f4 <_read_r>
 8005524:	2800      	cmp	r0, #0
 8005526:	bfab      	itete	ge
 8005528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800552a:	89a3      	ldrhlt	r3, [r4, #12]
 800552c:	181b      	addge	r3, r3, r0
 800552e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005532:	bfac      	ite	ge
 8005534:	6563      	strge	r3, [r4, #84]	; 0x54
 8005536:	81a3      	strhlt	r3, [r4, #12]
 8005538:	bd10      	pop	{r4, pc}

0800553a <__swrite>:
 800553a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800553e:	461f      	mov	r7, r3
 8005540:	898b      	ldrh	r3, [r1, #12]
 8005542:	05db      	lsls	r3, r3, #23
 8005544:	4605      	mov	r5, r0
 8005546:	460c      	mov	r4, r1
 8005548:	4616      	mov	r6, r2
 800554a:	d505      	bpl.n	8005558 <__swrite+0x1e>
 800554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005550:	2302      	movs	r3, #2
 8005552:	2200      	movs	r2, #0
 8005554:	f000 f83c 	bl	80055d0 <_lseek_r>
 8005558:	89a3      	ldrh	r3, [r4, #12]
 800555a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800555e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005562:	81a3      	strh	r3, [r4, #12]
 8005564:	4632      	mov	r2, r6
 8005566:	463b      	mov	r3, r7
 8005568:	4628      	mov	r0, r5
 800556a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800556e:	f000 b853 	b.w	8005618 <_write_r>

08005572 <__sseek>:
 8005572:	b510      	push	{r4, lr}
 8005574:	460c      	mov	r4, r1
 8005576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800557a:	f000 f829 	bl	80055d0 <_lseek_r>
 800557e:	1c43      	adds	r3, r0, #1
 8005580:	89a3      	ldrh	r3, [r4, #12]
 8005582:	bf15      	itete	ne
 8005584:	6560      	strne	r0, [r4, #84]	; 0x54
 8005586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800558a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800558e:	81a3      	strheq	r3, [r4, #12]
 8005590:	bf18      	it	ne
 8005592:	81a3      	strhne	r3, [r4, #12]
 8005594:	bd10      	pop	{r4, pc}

08005596 <__sclose>:
 8005596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800559a:	f000 b809 	b.w	80055b0 <_close_r>

0800559e <memset>:
 800559e:	4402      	add	r2, r0
 80055a0:	4603      	mov	r3, r0
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d100      	bne.n	80055a8 <memset+0xa>
 80055a6:	4770      	bx	lr
 80055a8:	f803 1b01 	strb.w	r1, [r3], #1
 80055ac:	e7f9      	b.n	80055a2 <memset+0x4>
	...

080055b0 <_close_r>:
 80055b0:	b538      	push	{r3, r4, r5, lr}
 80055b2:	4d06      	ldr	r5, [pc, #24]	; (80055cc <_close_r+0x1c>)
 80055b4:	2300      	movs	r3, #0
 80055b6:	4604      	mov	r4, r0
 80055b8:	4608      	mov	r0, r1
 80055ba:	602b      	str	r3, [r5, #0]
 80055bc:	f7fb fa43 	bl	8000a46 <_close>
 80055c0:	1c43      	adds	r3, r0, #1
 80055c2:	d102      	bne.n	80055ca <_close_r+0x1a>
 80055c4:	682b      	ldr	r3, [r5, #0]
 80055c6:	b103      	cbz	r3, 80055ca <_close_r+0x1a>
 80055c8:	6023      	str	r3, [r4, #0]
 80055ca:	bd38      	pop	{r3, r4, r5, pc}
 80055cc:	2400ab7c 	.word	0x2400ab7c

080055d0 <_lseek_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_lseek_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fb fa58 	bl	8000a94 <_lseek>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_lseek_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_lseek_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	2400ab7c 	.word	0x2400ab7c

080055f4 <_read_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_read_r+0x20>)
 80055f8:	4604      	mov	r4, r0
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	2200      	movs	r2, #0
 8005600:	602a      	str	r2, [r5, #0]
 8005602:	461a      	mov	r2, r3
 8005604:	f7fb f9e6 	bl	80009d4 <_read>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_read_r+0x1e>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_read_r+0x1e>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	2400ab7c 	.word	0x2400ab7c

08005618 <_write_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	; (8005638 <_write_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fb f9f1 	bl	8000a0e <_write>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_write_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_write_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	2400ab7c 	.word	0x2400ab7c

0800563c <__errno>:
 800563c:	4b01      	ldr	r3, [pc, #4]	; (8005644 <__errno+0x8>)
 800563e:	6818      	ldr	r0, [r3, #0]
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	24000068 	.word	0x24000068

08005648 <__libc_init_array>:
 8005648:	b570      	push	{r4, r5, r6, lr}
 800564a:	4d0d      	ldr	r5, [pc, #52]	; (8005680 <__libc_init_array+0x38>)
 800564c:	4c0d      	ldr	r4, [pc, #52]	; (8005684 <__libc_init_array+0x3c>)
 800564e:	1b64      	subs	r4, r4, r5
 8005650:	10a4      	asrs	r4, r4, #2
 8005652:	2600      	movs	r6, #0
 8005654:	42a6      	cmp	r6, r4
 8005656:	d109      	bne.n	800566c <__libc_init_array+0x24>
 8005658:	4d0b      	ldr	r5, [pc, #44]	; (8005688 <__libc_init_array+0x40>)
 800565a:	4c0c      	ldr	r4, [pc, #48]	; (800568c <__libc_init_array+0x44>)
 800565c:	f000 fdbe 	bl	80061dc <_init>
 8005660:	1b64      	subs	r4, r4, r5
 8005662:	10a4      	asrs	r4, r4, #2
 8005664:	2600      	movs	r6, #0
 8005666:	42a6      	cmp	r6, r4
 8005668:	d105      	bne.n	8005676 <__libc_init_array+0x2e>
 800566a:	bd70      	pop	{r4, r5, r6, pc}
 800566c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005670:	4798      	blx	r3
 8005672:	3601      	adds	r6, #1
 8005674:	e7ee      	b.n	8005654 <__libc_init_array+0xc>
 8005676:	f855 3b04 	ldr.w	r3, [r5], #4
 800567a:	4798      	blx	r3
 800567c:	3601      	adds	r6, #1
 800567e:	e7f2      	b.n	8005666 <__libc_init_array+0x1e>
 8005680:	08006274 	.word	0x08006274
 8005684:	08006274 	.word	0x08006274
 8005688:	08006274 	.word	0x08006274
 800568c:	08006278 	.word	0x08006278

08005690 <__retarget_lock_acquire_recursive>:
 8005690:	4770      	bx	lr

08005692 <__retarget_lock_release_recursive>:
 8005692:	4770      	bx	lr

08005694 <_free_r>:
 8005694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005696:	2900      	cmp	r1, #0
 8005698:	d044      	beq.n	8005724 <_free_r+0x90>
 800569a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800569e:	9001      	str	r0, [sp, #4]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f1a1 0404 	sub.w	r4, r1, #4
 80056a6:	bfb8      	it	lt
 80056a8:	18e4      	addlt	r4, r4, r3
 80056aa:	f000 f8df 	bl	800586c <__malloc_lock>
 80056ae:	4a1e      	ldr	r2, [pc, #120]	; (8005728 <_free_r+0x94>)
 80056b0:	9801      	ldr	r0, [sp, #4]
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	b933      	cbnz	r3, 80056c4 <_free_r+0x30>
 80056b6:	6063      	str	r3, [r4, #4]
 80056b8:	6014      	str	r4, [r2, #0]
 80056ba:	b003      	add	sp, #12
 80056bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80056c0:	f000 b8da 	b.w	8005878 <__malloc_unlock>
 80056c4:	42a3      	cmp	r3, r4
 80056c6:	d908      	bls.n	80056da <_free_r+0x46>
 80056c8:	6825      	ldr	r5, [r4, #0]
 80056ca:	1961      	adds	r1, r4, r5
 80056cc:	428b      	cmp	r3, r1
 80056ce:	bf01      	itttt	eq
 80056d0:	6819      	ldreq	r1, [r3, #0]
 80056d2:	685b      	ldreq	r3, [r3, #4]
 80056d4:	1949      	addeq	r1, r1, r5
 80056d6:	6021      	streq	r1, [r4, #0]
 80056d8:	e7ed      	b.n	80056b6 <_free_r+0x22>
 80056da:	461a      	mov	r2, r3
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	b10b      	cbz	r3, 80056e4 <_free_r+0x50>
 80056e0:	42a3      	cmp	r3, r4
 80056e2:	d9fa      	bls.n	80056da <_free_r+0x46>
 80056e4:	6811      	ldr	r1, [r2, #0]
 80056e6:	1855      	adds	r5, r2, r1
 80056e8:	42a5      	cmp	r5, r4
 80056ea:	d10b      	bne.n	8005704 <_free_r+0x70>
 80056ec:	6824      	ldr	r4, [r4, #0]
 80056ee:	4421      	add	r1, r4
 80056f0:	1854      	adds	r4, r2, r1
 80056f2:	42a3      	cmp	r3, r4
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	d1e0      	bne.n	80056ba <_free_r+0x26>
 80056f8:	681c      	ldr	r4, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6053      	str	r3, [r2, #4]
 80056fe:	440c      	add	r4, r1
 8005700:	6014      	str	r4, [r2, #0]
 8005702:	e7da      	b.n	80056ba <_free_r+0x26>
 8005704:	d902      	bls.n	800570c <_free_r+0x78>
 8005706:	230c      	movs	r3, #12
 8005708:	6003      	str	r3, [r0, #0]
 800570a:	e7d6      	b.n	80056ba <_free_r+0x26>
 800570c:	6825      	ldr	r5, [r4, #0]
 800570e:	1961      	adds	r1, r4, r5
 8005710:	428b      	cmp	r3, r1
 8005712:	bf04      	itt	eq
 8005714:	6819      	ldreq	r1, [r3, #0]
 8005716:	685b      	ldreq	r3, [r3, #4]
 8005718:	6063      	str	r3, [r4, #4]
 800571a:	bf04      	itt	eq
 800571c:	1949      	addeq	r1, r1, r5
 800571e:	6021      	streq	r1, [r4, #0]
 8005720:	6054      	str	r4, [r2, #4]
 8005722:	e7ca      	b.n	80056ba <_free_r+0x26>
 8005724:	b003      	add	sp, #12
 8005726:	bd30      	pop	{r4, r5, pc}
 8005728:	2400ab84 	.word	0x2400ab84

0800572c <sbrk_aligned>:
 800572c:	b570      	push	{r4, r5, r6, lr}
 800572e:	4e0e      	ldr	r6, [pc, #56]	; (8005768 <sbrk_aligned+0x3c>)
 8005730:	460c      	mov	r4, r1
 8005732:	6831      	ldr	r1, [r6, #0]
 8005734:	4605      	mov	r5, r0
 8005736:	b911      	cbnz	r1, 800573e <sbrk_aligned+0x12>
 8005738:	f000 fcbc 	bl	80060b4 <_sbrk_r>
 800573c:	6030      	str	r0, [r6, #0]
 800573e:	4621      	mov	r1, r4
 8005740:	4628      	mov	r0, r5
 8005742:	f000 fcb7 	bl	80060b4 <_sbrk_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	d00a      	beq.n	8005760 <sbrk_aligned+0x34>
 800574a:	1cc4      	adds	r4, r0, #3
 800574c:	f024 0403 	bic.w	r4, r4, #3
 8005750:	42a0      	cmp	r0, r4
 8005752:	d007      	beq.n	8005764 <sbrk_aligned+0x38>
 8005754:	1a21      	subs	r1, r4, r0
 8005756:	4628      	mov	r0, r5
 8005758:	f000 fcac 	bl	80060b4 <_sbrk_r>
 800575c:	3001      	adds	r0, #1
 800575e:	d101      	bne.n	8005764 <sbrk_aligned+0x38>
 8005760:	f04f 34ff 	mov.w	r4, #4294967295
 8005764:	4620      	mov	r0, r4
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	2400ab88 	.word	0x2400ab88

0800576c <_malloc_r>:
 800576c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005770:	1ccd      	adds	r5, r1, #3
 8005772:	f025 0503 	bic.w	r5, r5, #3
 8005776:	3508      	adds	r5, #8
 8005778:	2d0c      	cmp	r5, #12
 800577a:	bf38      	it	cc
 800577c:	250c      	movcc	r5, #12
 800577e:	2d00      	cmp	r5, #0
 8005780:	4607      	mov	r7, r0
 8005782:	db01      	blt.n	8005788 <_malloc_r+0x1c>
 8005784:	42a9      	cmp	r1, r5
 8005786:	d905      	bls.n	8005794 <_malloc_r+0x28>
 8005788:	230c      	movs	r3, #12
 800578a:	603b      	str	r3, [r7, #0]
 800578c:	2600      	movs	r6, #0
 800578e:	4630      	mov	r0, r6
 8005790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005868 <_malloc_r+0xfc>
 8005798:	f000 f868 	bl	800586c <__malloc_lock>
 800579c:	f8d8 3000 	ldr.w	r3, [r8]
 80057a0:	461c      	mov	r4, r3
 80057a2:	bb5c      	cbnz	r4, 80057fc <_malloc_r+0x90>
 80057a4:	4629      	mov	r1, r5
 80057a6:	4638      	mov	r0, r7
 80057a8:	f7ff ffc0 	bl	800572c <sbrk_aligned>
 80057ac:	1c43      	adds	r3, r0, #1
 80057ae:	4604      	mov	r4, r0
 80057b0:	d155      	bne.n	800585e <_malloc_r+0xf2>
 80057b2:	f8d8 4000 	ldr.w	r4, [r8]
 80057b6:	4626      	mov	r6, r4
 80057b8:	2e00      	cmp	r6, #0
 80057ba:	d145      	bne.n	8005848 <_malloc_r+0xdc>
 80057bc:	2c00      	cmp	r4, #0
 80057be:	d048      	beq.n	8005852 <_malloc_r+0xe6>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	4631      	mov	r1, r6
 80057c4:	4638      	mov	r0, r7
 80057c6:	eb04 0903 	add.w	r9, r4, r3
 80057ca:	f000 fc73 	bl	80060b4 <_sbrk_r>
 80057ce:	4581      	cmp	r9, r0
 80057d0:	d13f      	bne.n	8005852 <_malloc_r+0xe6>
 80057d2:	6821      	ldr	r1, [r4, #0]
 80057d4:	1a6d      	subs	r5, r5, r1
 80057d6:	4629      	mov	r1, r5
 80057d8:	4638      	mov	r0, r7
 80057da:	f7ff ffa7 	bl	800572c <sbrk_aligned>
 80057de:	3001      	adds	r0, #1
 80057e0:	d037      	beq.n	8005852 <_malloc_r+0xe6>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	442b      	add	r3, r5
 80057e6:	6023      	str	r3, [r4, #0]
 80057e8:	f8d8 3000 	ldr.w	r3, [r8]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d038      	beq.n	8005862 <_malloc_r+0xf6>
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	42a2      	cmp	r2, r4
 80057f4:	d12b      	bne.n	800584e <_malloc_r+0xe2>
 80057f6:	2200      	movs	r2, #0
 80057f8:	605a      	str	r2, [r3, #4]
 80057fa:	e00f      	b.n	800581c <_malloc_r+0xb0>
 80057fc:	6822      	ldr	r2, [r4, #0]
 80057fe:	1b52      	subs	r2, r2, r5
 8005800:	d41f      	bmi.n	8005842 <_malloc_r+0xd6>
 8005802:	2a0b      	cmp	r2, #11
 8005804:	d917      	bls.n	8005836 <_malloc_r+0xca>
 8005806:	1961      	adds	r1, r4, r5
 8005808:	42a3      	cmp	r3, r4
 800580a:	6025      	str	r5, [r4, #0]
 800580c:	bf18      	it	ne
 800580e:	6059      	strne	r1, [r3, #4]
 8005810:	6863      	ldr	r3, [r4, #4]
 8005812:	bf08      	it	eq
 8005814:	f8c8 1000 	streq.w	r1, [r8]
 8005818:	5162      	str	r2, [r4, r5]
 800581a:	604b      	str	r3, [r1, #4]
 800581c:	4638      	mov	r0, r7
 800581e:	f104 060b 	add.w	r6, r4, #11
 8005822:	f000 f829 	bl	8005878 <__malloc_unlock>
 8005826:	f026 0607 	bic.w	r6, r6, #7
 800582a:	1d23      	adds	r3, r4, #4
 800582c:	1af2      	subs	r2, r6, r3
 800582e:	d0ae      	beq.n	800578e <_malloc_r+0x22>
 8005830:	1b9b      	subs	r3, r3, r6
 8005832:	50a3      	str	r3, [r4, r2]
 8005834:	e7ab      	b.n	800578e <_malloc_r+0x22>
 8005836:	42a3      	cmp	r3, r4
 8005838:	6862      	ldr	r2, [r4, #4]
 800583a:	d1dd      	bne.n	80057f8 <_malloc_r+0x8c>
 800583c:	f8c8 2000 	str.w	r2, [r8]
 8005840:	e7ec      	b.n	800581c <_malloc_r+0xb0>
 8005842:	4623      	mov	r3, r4
 8005844:	6864      	ldr	r4, [r4, #4]
 8005846:	e7ac      	b.n	80057a2 <_malloc_r+0x36>
 8005848:	4634      	mov	r4, r6
 800584a:	6876      	ldr	r6, [r6, #4]
 800584c:	e7b4      	b.n	80057b8 <_malloc_r+0x4c>
 800584e:	4613      	mov	r3, r2
 8005850:	e7cc      	b.n	80057ec <_malloc_r+0x80>
 8005852:	230c      	movs	r3, #12
 8005854:	603b      	str	r3, [r7, #0]
 8005856:	4638      	mov	r0, r7
 8005858:	f000 f80e 	bl	8005878 <__malloc_unlock>
 800585c:	e797      	b.n	800578e <_malloc_r+0x22>
 800585e:	6025      	str	r5, [r4, #0]
 8005860:	e7dc      	b.n	800581c <_malloc_r+0xb0>
 8005862:	605b      	str	r3, [r3, #4]
 8005864:	deff      	udf	#255	; 0xff
 8005866:	bf00      	nop
 8005868:	2400ab84 	.word	0x2400ab84

0800586c <__malloc_lock>:
 800586c:	4801      	ldr	r0, [pc, #4]	; (8005874 <__malloc_lock+0x8>)
 800586e:	f7ff bf0f 	b.w	8005690 <__retarget_lock_acquire_recursive>
 8005872:	bf00      	nop
 8005874:	2400ab80 	.word	0x2400ab80

08005878 <__malloc_unlock>:
 8005878:	4801      	ldr	r0, [pc, #4]	; (8005880 <__malloc_unlock+0x8>)
 800587a:	f7ff bf0a 	b.w	8005692 <__retarget_lock_release_recursive>
 800587e:	bf00      	nop
 8005880:	2400ab80 	.word	0x2400ab80

08005884 <__sfputc_r>:
 8005884:	6893      	ldr	r3, [r2, #8]
 8005886:	3b01      	subs	r3, #1
 8005888:	2b00      	cmp	r3, #0
 800588a:	b410      	push	{r4}
 800588c:	6093      	str	r3, [r2, #8]
 800588e:	da08      	bge.n	80058a2 <__sfputc_r+0x1e>
 8005890:	6994      	ldr	r4, [r2, #24]
 8005892:	42a3      	cmp	r3, r4
 8005894:	db01      	blt.n	800589a <__sfputc_r+0x16>
 8005896:	290a      	cmp	r1, #10
 8005898:	d103      	bne.n	80058a2 <__sfputc_r+0x1e>
 800589a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800589e:	f000 bb73 	b.w	8005f88 <__swbuf_r>
 80058a2:	6813      	ldr	r3, [r2, #0]
 80058a4:	1c58      	adds	r0, r3, #1
 80058a6:	6010      	str	r0, [r2, #0]
 80058a8:	7019      	strb	r1, [r3, #0]
 80058aa:	4608      	mov	r0, r1
 80058ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <__sfputs_r>:
 80058b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058b4:	4606      	mov	r6, r0
 80058b6:	460f      	mov	r7, r1
 80058b8:	4614      	mov	r4, r2
 80058ba:	18d5      	adds	r5, r2, r3
 80058bc:	42ac      	cmp	r4, r5
 80058be:	d101      	bne.n	80058c4 <__sfputs_r+0x12>
 80058c0:	2000      	movs	r0, #0
 80058c2:	e007      	b.n	80058d4 <__sfputs_r+0x22>
 80058c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058c8:	463a      	mov	r2, r7
 80058ca:	4630      	mov	r0, r6
 80058cc:	f7ff ffda 	bl	8005884 <__sfputc_r>
 80058d0:	1c43      	adds	r3, r0, #1
 80058d2:	d1f3      	bne.n	80058bc <__sfputs_r+0xa>
 80058d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058d8 <_vfiprintf_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	460d      	mov	r5, r1
 80058de:	b09d      	sub	sp, #116	; 0x74
 80058e0:	4614      	mov	r4, r2
 80058e2:	4698      	mov	r8, r3
 80058e4:	4606      	mov	r6, r0
 80058e6:	b118      	cbz	r0, 80058f0 <_vfiprintf_r+0x18>
 80058e8:	6a03      	ldr	r3, [r0, #32]
 80058ea:	b90b      	cbnz	r3, 80058f0 <_vfiprintf_r+0x18>
 80058ec:	f7ff fdcc 	bl	8005488 <__sinit>
 80058f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80058f2:	07d9      	lsls	r1, r3, #31
 80058f4:	d405      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058f6:	89ab      	ldrh	r3, [r5, #12]
 80058f8:	059a      	lsls	r2, r3, #22
 80058fa:	d402      	bmi.n	8005902 <_vfiprintf_r+0x2a>
 80058fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058fe:	f7ff fec7 	bl	8005690 <__retarget_lock_acquire_recursive>
 8005902:	89ab      	ldrh	r3, [r5, #12]
 8005904:	071b      	lsls	r3, r3, #28
 8005906:	d501      	bpl.n	800590c <_vfiprintf_r+0x34>
 8005908:	692b      	ldr	r3, [r5, #16]
 800590a:	b99b      	cbnz	r3, 8005934 <_vfiprintf_r+0x5c>
 800590c:	4629      	mov	r1, r5
 800590e:	4630      	mov	r0, r6
 8005910:	f000 fb78 	bl	8006004 <__swsetup_r>
 8005914:	b170      	cbz	r0, 8005934 <_vfiprintf_r+0x5c>
 8005916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005918:	07dc      	lsls	r4, r3, #31
 800591a:	d504      	bpl.n	8005926 <_vfiprintf_r+0x4e>
 800591c:	f04f 30ff 	mov.w	r0, #4294967295
 8005920:	b01d      	add	sp, #116	; 0x74
 8005922:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	0598      	lsls	r0, r3, #22
 800592a:	d4f7      	bmi.n	800591c <_vfiprintf_r+0x44>
 800592c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800592e:	f7ff feb0 	bl	8005692 <__retarget_lock_release_recursive>
 8005932:	e7f3      	b.n	800591c <_vfiprintf_r+0x44>
 8005934:	2300      	movs	r3, #0
 8005936:	9309      	str	r3, [sp, #36]	; 0x24
 8005938:	2320      	movs	r3, #32
 800593a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800593e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005942:	2330      	movs	r3, #48	; 0x30
 8005944:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005af8 <_vfiprintf_r+0x220>
 8005948:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800594c:	f04f 0901 	mov.w	r9, #1
 8005950:	4623      	mov	r3, r4
 8005952:	469a      	mov	sl, r3
 8005954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005958:	b10a      	cbz	r2, 800595e <_vfiprintf_r+0x86>
 800595a:	2a25      	cmp	r2, #37	; 0x25
 800595c:	d1f9      	bne.n	8005952 <_vfiprintf_r+0x7a>
 800595e:	ebba 0b04 	subs.w	fp, sl, r4
 8005962:	d00b      	beq.n	800597c <_vfiprintf_r+0xa4>
 8005964:	465b      	mov	r3, fp
 8005966:	4622      	mov	r2, r4
 8005968:	4629      	mov	r1, r5
 800596a:	4630      	mov	r0, r6
 800596c:	f7ff ffa1 	bl	80058b2 <__sfputs_r>
 8005970:	3001      	adds	r0, #1
 8005972:	f000 80a9 	beq.w	8005ac8 <_vfiprintf_r+0x1f0>
 8005976:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005978:	445a      	add	r2, fp
 800597a:	9209      	str	r2, [sp, #36]	; 0x24
 800597c:	f89a 3000 	ldrb.w	r3, [sl]
 8005980:	2b00      	cmp	r3, #0
 8005982:	f000 80a1 	beq.w	8005ac8 <_vfiprintf_r+0x1f0>
 8005986:	2300      	movs	r3, #0
 8005988:	f04f 32ff 	mov.w	r2, #4294967295
 800598c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005990:	f10a 0a01 	add.w	sl, sl, #1
 8005994:	9304      	str	r3, [sp, #16]
 8005996:	9307      	str	r3, [sp, #28]
 8005998:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800599c:	931a      	str	r3, [sp, #104]	; 0x68
 800599e:	4654      	mov	r4, sl
 80059a0:	2205      	movs	r2, #5
 80059a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059a6:	4854      	ldr	r0, [pc, #336]	; (8005af8 <_vfiprintf_r+0x220>)
 80059a8:	f7fa fc9a 	bl	80002e0 <memchr>
 80059ac:	9a04      	ldr	r2, [sp, #16]
 80059ae:	b9d8      	cbnz	r0, 80059e8 <_vfiprintf_r+0x110>
 80059b0:	06d1      	lsls	r1, r2, #27
 80059b2:	bf44      	itt	mi
 80059b4:	2320      	movmi	r3, #32
 80059b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059ba:	0713      	lsls	r3, r2, #28
 80059bc:	bf44      	itt	mi
 80059be:	232b      	movmi	r3, #43	; 0x2b
 80059c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80059c4:	f89a 3000 	ldrb.w	r3, [sl]
 80059c8:	2b2a      	cmp	r3, #42	; 0x2a
 80059ca:	d015      	beq.n	80059f8 <_vfiprintf_r+0x120>
 80059cc:	9a07      	ldr	r2, [sp, #28]
 80059ce:	4654      	mov	r4, sl
 80059d0:	2000      	movs	r0, #0
 80059d2:	f04f 0c0a 	mov.w	ip, #10
 80059d6:	4621      	mov	r1, r4
 80059d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059dc:	3b30      	subs	r3, #48	; 0x30
 80059de:	2b09      	cmp	r3, #9
 80059e0:	d94d      	bls.n	8005a7e <_vfiprintf_r+0x1a6>
 80059e2:	b1b0      	cbz	r0, 8005a12 <_vfiprintf_r+0x13a>
 80059e4:	9207      	str	r2, [sp, #28]
 80059e6:	e014      	b.n	8005a12 <_vfiprintf_r+0x13a>
 80059e8:	eba0 0308 	sub.w	r3, r0, r8
 80059ec:	fa09 f303 	lsl.w	r3, r9, r3
 80059f0:	4313      	orrs	r3, r2
 80059f2:	9304      	str	r3, [sp, #16]
 80059f4:	46a2      	mov	sl, r4
 80059f6:	e7d2      	b.n	800599e <_vfiprintf_r+0xc6>
 80059f8:	9b03      	ldr	r3, [sp, #12]
 80059fa:	1d19      	adds	r1, r3, #4
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	9103      	str	r1, [sp, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	bfbb      	ittet	lt
 8005a04:	425b      	neglt	r3, r3
 8005a06:	f042 0202 	orrlt.w	r2, r2, #2
 8005a0a:	9307      	strge	r3, [sp, #28]
 8005a0c:	9307      	strlt	r3, [sp, #28]
 8005a0e:	bfb8      	it	lt
 8005a10:	9204      	strlt	r2, [sp, #16]
 8005a12:	7823      	ldrb	r3, [r4, #0]
 8005a14:	2b2e      	cmp	r3, #46	; 0x2e
 8005a16:	d10c      	bne.n	8005a32 <_vfiprintf_r+0x15a>
 8005a18:	7863      	ldrb	r3, [r4, #1]
 8005a1a:	2b2a      	cmp	r3, #42	; 0x2a
 8005a1c:	d134      	bne.n	8005a88 <_vfiprintf_r+0x1b0>
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	1d1a      	adds	r2, r3, #4
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	9203      	str	r2, [sp, #12]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	bfb8      	it	lt
 8005a2a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005a2e:	3402      	adds	r4, #2
 8005a30:	9305      	str	r3, [sp, #20]
 8005a32:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005b08 <_vfiprintf_r+0x230>
 8005a36:	7821      	ldrb	r1, [r4, #0]
 8005a38:	2203      	movs	r2, #3
 8005a3a:	4650      	mov	r0, sl
 8005a3c:	f7fa fc50 	bl	80002e0 <memchr>
 8005a40:	b138      	cbz	r0, 8005a52 <_vfiprintf_r+0x17a>
 8005a42:	9b04      	ldr	r3, [sp, #16]
 8005a44:	eba0 000a 	sub.w	r0, r0, sl
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	4082      	lsls	r2, r0
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	3401      	adds	r4, #1
 8005a50:	9304      	str	r3, [sp, #16]
 8005a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a56:	4829      	ldr	r0, [pc, #164]	; (8005afc <_vfiprintf_r+0x224>)
 8005a58:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005a5c:	2206      	movs	r2, #6
 8005a5e:	f7fa fc3f 	bl	80002e0 <memchr>
 8005a62:	2800      	cmp	r0, #0
 8005a64:	d03f      	beq.n	8005ae6 <_vfiprintf_r+0x20e>
 8005a66:	4b26      	ldr	r3, [pc, #152]	; (8005b00 <_vfiprintf_r+0x228>)
 8005a68:	bb1b      	cbnz	r3, 8005ab2 <_vfiprintf_r+0x1da>
 8005a6a:	9b03      	ldr	r3, [sp, #12]
 8005a6c:	3307      	adds	r3, #7
 8005a6e:	f023 0307 	bic.w	r3, r3, #7
 8005a72:	3308      	adds	r3, #8
 8005a74:	9303      	str	r3, [sp, #12]
 8005a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a78:	443b      	add	r3, r7
 8005a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8005a7c:	e768      	b.n	8005950 <_vfiprintf_r+0x78>
 8005a7e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a82:	460c      	mov	r4, r1
 8005a84:	2001      	movs	r0, #1
 8005a86:	e7a6      	b.n	80059d6 <_vfiprintf_r+0xfe>
 8005a88:	2300      	movs	r3, #0
 8005a8a:	3401      	adds	r4, #1
 8005a8c:	9305      	str	r3, [sp, #20]
 8005a8e:	4619      	mov	r1, r3
 8005a90:	f04f 0c0a 	mov.w	ip, #10
 8005a94:	4620      	mov	r0, r4
 8005a96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a9a:	3a30      	subs	r2, #48	; 0x30
 8005a9c:	2a09      	cmp	r2, #9
 8005a9e:	d903      	bls.n	8005aa8 <_vfiprintf_r+0x1d0>
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0c6      	beq.n	8005a32 <_vfiprintf_r+0x15a>
 8005aa4:	9105      	str	r1, [sp, #20]
 8005aa6:	e7c4      	b.n	8005a32 <_vfiprintf_r+0x15a>
 8005aa8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005aac:	4604      	mov	r4, r0
 8005aae:	2301      	movs	r3, #1
 8005ab0:	e7f0      	b.n	8005a94 <_vfiprintf_r+0x1bc>
 8005ab2:	ab03      	add	r3, sp, #12
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	462a      	mov	r2, r5
 8005ab8:	4b12      	ldr	r3, [pc, #72]	; (8005b04 <_vfiprintf_r+0x22c>)
 8005aba:	a904      	add	r1, sp, #16
 8005abc:	4630      	mov	r0, r6
 8005abe:	f3af 8000 	nop.w
 8005ac2:	4607      	mov	r7, r0
 8005ac4:	1c78      	adds	r0, r7, #1
 8005ac6:	d1d6      	bne.n	8005a76 <_vfiprintf_r+0x19e>
 8005ac8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005aca:	07d9      	lsls	r1, r3, #31
 8005acc:	d405      	bmi.n	8005ada <_vfiprintf_r+0x202>
 8005ace:	89ab      	ldrh	r3, [r5, #12]
 8005ad0:	059a      	lsls	r2, r3, #22
 8005ad2:	d402      	bmi.n	8005ada <_vfiprintf_r+0x202>
 8005ad4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ad6:	f7ff fddc 	bl	8005692 <__retarget_lock_release_recursive>
 8005ada:	89ab      	ldrh	r3, [r5, #12]
 8005adc:	065b      	lsls	r3, r3, #25
 8005ade:	f53f af1d 	bmi.w	800591c <_vfiprintf_r+0x44>
 8005ae2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005ae4:	e71c      	b.n	8005920 <_vfiprintf_r+0x48>
 8005ae6:	ab03      	add	r3, sp, #12
 8005ae8:	9300      	str	r3, [sp, #0]
 8005aea:	462a      	mov	r2, r5
 8005aec:	4b05      	ldr	r3, [pc, #20]	; (8005b04 <_vfiprintf_r+0x22c>)
 8005aee:	a904      	add	r1, sp, #16
 8005af0:	4630      	mov	r0, r6
 8005af2:	f000 f879 	bl	8005be8 <_printf_i>
 8005af6:	e7e4      	b.n	8005ac2 <_vfiprintf_r+0x1ea>
 8005af8:	08006240 	.word	0x08006240
 8005afc:	0800624a 	.word	0x0800624a
 8005b00:	00000000 	.word	0x00000000
 8005b04:	080058b3 	.word	0x080058b3
 8005b08:	08006246 	.word	0x08006246

08005b0c <_printf_common>:
 8005b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b10:	4616      	mov	r6, r2
 8005b12:	4699      	mov	r9, r3
 8005b14:	688a      	ldr	r2, [r1, #8]
 8005b16:	690b      	ldr	r3, [r1, #16]
 8005b18:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005b1c:	4293      	cmp	r3, r2
 8005b1e:	bfb8      	it	lt
 8005b20:	4613      	movlt	r3, r2
 8005b22:	6033      	str	r3, [r6, #0]
 8005b24:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005b28:	4607      	mov	r7, r0
 8005b2a:	460c      	mov	r4, r1
 8005b2c:	b10a      	cbz	r2, 8005b32 <_printf_common+0x26>
 8005b2e:	3301      	adds	r3, #1
 8005b30:	6033      	str	r3, [r6, #0]
 8005b32:	6823      	ldr	r3, [r4, #0]
 8005b34:	0699      	lsls	r1, r3, #26
 8005b36:	bf42      	ittt	mi
 8005b38:	6833      	ldrmi	r3, [r6, #0]
 8005b3a:	3302      	addmi	r3, #2
 8005b3c:	6033      	strmi	r3, [r6, #0]
 8005b3e:	6825      	ldr	r5, [r4, #0]
 8005b40:	f015 0506 	ands.w	r5, r5, #6
 8005b44:	d106      	bne.n	8005b54 <_printf_common+0x48>
 8005b46:	f104 0a19 	add.w	sl, r4, #25
 8005b4a:	68e3      	ldr	r3, [r4, #12]
 8005b4c:	6832      	ldr	r2, [r6, #0]
 8005b4e:	1a9b      	subs	r3, r3, r2
 8005b50:	42ab      	cmp	r3, r5
 8005b52:	dc26      	bgt.n	8005ba2 <_printf_common+0x96>
 8005b54:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b58:	1e13      	subs	r3, r2, #0
 8005b5a:	6822      	ldr	r2, [r4, #0]
 8005b5c:	bf18      	it	ne
 8005b5e:	2301      	movne	r3, #1
 8005b60:	0692      	lsls	r2, r2, #26
 8005b62:	d42b      	bmi.n	8005bbc <_printf_common+0xb0>
 8005b64:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b68:	4649      	mov	r1, r9
 8005b6a:	4638      	mov	r0, r7
 8005b6c:	47c0      	blx	r8
 8005b6e:	3001      	adds	r0, #1
 8005b70:	d01e      	beq.n	8005bb0 <_printf_common+0xa4>
 8005b72:	6823      	ldr	r3, [r4, #0]
 8005b74:	6922      	ldr	r2, [r4, #16]
 8005b76:	f003 0306 	and.w	r3, r3, #6
 8005b7a:	2b04      	cmp	r3, #4
 8005b7c:	bf02      	ittt	eq
 8005b7e:	68e5      	ldreq	r5, [r4, #12]
 8005b80:	6833      	ldreq	r3, [r6, #0]
 8005b82:	1aed      	subeq	r5, r5, r3
 8005b84:	68a3      	ldr	r3, [r4, #8]
 8005b86:	bf0c      	ite	eq
 8005b88:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b8c:	2500      	movne	r5, #0
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	bfc4      	itt	gt
 8005b92:	1a9b      	subgt	r3, r3, r2
 8005b94:	18ed      	addgt	r5, r5, r3
 8005b96:	2600      	movs	r6, #0
 8005b98:	341a      	adds	r4, #26
 8005b9a:	42b5      	cmp	r5, r6
 8005b9c:	d11a      	bne.n	8005bd4 <_printf_common+0xc8>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e008      	b.n	8005bb4 <_printf_common+0xa8>
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	4652      	mov	r2, sl
 8005ba6:	4649      	mov	r1, r9
 8005ba8:	4638      	mov	r0, r7
 8005baa:	47c0      	blx	r8
 8005bac:	3001      	adds	r0, #1
 8005bae:	d103      	bne.n	8005bb8 <_printf_common+0xac>
 8005bb0:	f04f 30ff 	mov.w	r0, #4294967295
 8005bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bb8:	3501      	adds	r5, #1
 8005bba:	e7c6      	b.n	8005b4a <_printf_common+0x3e>
 8005bbc:	18e1      	adds	r1, r4, r3
 8005bbe:	1c5a      	adds	r2, r3, #1
 8005bc0:	2030      	movs	r0, #48	; 0x30
 8005bc2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005bc6:	4422      	add	r2, r4
 8005bc8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005bcc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005bd0:	3302      	adds	r3, #2
 8005bd2:	e7c7      	b.n	8005b64 <_printf_common+0x58>
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	4622      	mov	r2, r4
 8005bd8:	4649      	mov	r1, r9
 8005bda:	4638      	mov	r0, r7
 8005bdc:	47c0      	blx	r8
 8005bde:	3001      	adds	r0, #1
 8005be0:	d0e6      	beq.n	8005bb0 <_printf_common+0xa4>
 8005be2:	3601      	adds	r6, #1
 8005be4:	e7d9      	b.n	8005b9a <_printf_common+0x8e>
	...

08005be8 <_printf_i>:
 8005be8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bec:	7e0f      	ldrb	r7, [r1, #24]
 8005bee:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005bf0:	2f78      	cmp	r7, #120	; 0x78
 8005bf2:	4691      	mov	r9, r2
 8005bf4:	4680      	mov	r8, r0
 8005bf6:	460c      	mov	r4, r1
 8005bf8:	469a      	mov	sl, r3
 8005bfa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005bfe:	d807      	bhi.n	8005c10 <_printf_i+0x28>
 8005c00:	2f62      	cmp	r7, #98	; 0x62
 8005c02:	d80a      	bhi.n	8005c1a <_printf_i+0x32>
 8005c04:	2f00      	cmp	r7, #0
 8005c06:	f000 80d4 	beq.w	8005db2 <_printf_i+0x1ca>
 8005c0a:	2f58      	cmp	r7, #88	; 0x58
 8005c0c:	f000 80c0 	beq.w	8005d90 <_printf_i+0x1a8>
 8005c10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c14:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005c18:	e03a      	b.n	8005c90 <_printf_i+0xa8>
 8005c1a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005c1e:	2b15      	cmp	r3, #21
 8005c20:	d8f6      	bhi.n	8005c10 <_printf_i+0x28>
 8005c22:	a101      	add	r1, pc, #4	; (adr r1, 8005c28 <_printf_i+0x40>)
 8005c24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c28:	08005c81 	.word	0x08005c81
 8005c2c:	08005c95 	.word	0x08005c95
 8005c30:	08005c11 	.word	0x08005c11
 8005c34:	08005c11 	.word	0x08005c11
 8005c38:	08005c11 	.word	0x08005c11
 8005c3c:	08005c11 	.word	0x08005c11
 8005c40:	08005c95 	.word	0x08005c95
 8005c44:	08005c11 	.word	0x08005c11
 8005c48:	08005c11 	.word	0x08005c11
 8005c4c:	08005c11 	.word	0x08005c11
 8005c50:	08005c11 	.word	0x08005c11
 8005c54:	08005d99 	.word	0x08005d99
 8005c58:	08005cc1 	.word	0x08005cc1
 8005c5c:	08005d53 	.word	0x08005d53
 8005c60:	08005c11 	.word	0x08005c11
 8005c64:	08005c11 	.word	0x08005c11
 8005c68:	08005dbb 	.word	0x08005dbb
 8005c6c:	08005c11 	.word	0x08005c11
 8005c70:	08005cc1 	.word	0x08005cc1
 8005c74:	08005c11 	.word	0x08005c11
 8005c78:	08005c11 	.word	0x08005c11
 8005c7c:	08005d5b 	.word	0x08005d5b
 8005c80:	682b      	ldr	r3, [r5, #0]
 8005c82:	1d1a      	adds	r2, r3, #4
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	602a      	str	r2, [r5, #0]
 8005c88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005c8c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c90:	2301      	movs	r3, #1
 8005c92:	e09f      	b.n	8005dd4 <_printf_i+0x1ec>
 8005c94:	6820      	ldr	r0, [r4, #0]
 8005c96:	682b      	ldr	r3, [r5, #0]
 8005c98:	0607      	lsls	r7, r0, #24
 8005c9a:	f103 0104 	add.w	r1, r3, #4
 8005c9e:	6029      	str	r1, [r5, #0]
 8005ca0:	d501      	bpl.n	8005ca6 <_printf_i+0xbe>
 8005ca2:	681e      	ldr	r6, [r3, #0]
 8005ca4:	e003      	b.n	8005cae <_printf_i+0xc6>
 8005ca6:	0646      	lsls	r6, r0, #25
 8005ca8:	d5fb      	bpl.n	8005ca2 <_printf_i+0xba>
 8005caa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005cae:	2e00      	cmp	r6, #0
 8005cb0:	da03      	bge.n	8005cba <_printf_i+0xd2>
 8005cb2:	232d      	movs	r3, #45	; 0x2d
 8005cb4:	4276      	negs	r6, r6
 8005cb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005cba:	485a      	ldr	r0, [pc, #360]	; (8005e24 <_printf_i+0x23c>)
 8005cbc:	230a      	movs	r3, #10
 8005cbe:	e012      	b.n	8005ce6 <_printf_i+0xfe>
 8005cc0:	682b      	ldr	r3, [r5, #0]
 8005cc2:	6820      	ldr	r0, [r4, #0]
 8005cc4:	1d19      	adds	r1, r3, #4
 8005cc6:	6029      	str	r1, [r5, #0]
 8005cc8:	0605      	lsls	r5, r0, #24
 8005cca:	d501      	bpl.n	8005cd0 <_printf_i+0xe8>
 8005ccc:	681e      	ldr	r6, [r3, #0]
 8005cce:	e002      	b.n	8005cd6 <_printf_i+0xee>
 8005cd0:	0641      	lsls	r1, r0, #25
 8005cd2:	d5fb      	bpl.n	8005ccc <_printf_i+0xe4>
 8005cd4:	881e      	ldrh	r6, [r3, #0]
 8005cd6:	4853      	ldr	r0, [pc, #332]	; (8005e24 <_printf_i+0x23c>)
 8005cd8:	2f6f      	cmp	r7, #111	; 0x6f
 8005cda:	bf0c      	ite	eq
 8005cdc:	2308      	moveq	r3, #8
 8005cde:	230a      	movne	r3, #10
 8005ce0:	2100      	movs	r1, #0
 8005ce2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ce6:	6865      	ldr	r5, [r4, #4]
 8005ce8:	60a5      	str	r5, [r4, #8]
 8005cea:	2d00      	cmp	r5, #0
 8005cec:	bfa2      	ittt	ge
 8005cee:	6821      	ldrge	r1, [r4, #0]
 8005cf0:	f021 0104 	bicge.w	r1, r1, #4
 8005cf4:	6021      	strge	r1, [r4, #0]
 8005cf6:	b90e      	cbnz	r6, 8005cfc <_printf_i+0x114>
 8005cf8:	2d00      	cmp	r5, #0
 8005cfa:	d04b      	beq.n	8005d94 <_printf_i+0x1ac>
 8005cfc:	4615      	mov	r5, r2
 8005cfe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005d02:	fb03 6711 	mls	r7, r3, r1, r6
 8005d06:	5dc7      	ldrb	r7, [r0, r7]
 8005d08:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005d0c:	4637      	mov	r7, r6
 8005d0e:	42bb      	cmp	r3, r7
 8005d10:	460e      	mov	r6, r1
 8005d12:	d9f4      	bls.n	8005cfe <_printf_i+0x116>
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d10b      	bne.n	8005d30 <_printf_i+0x148>
 8005d18:	6823      	ldr	r3, [r4, #0]
 8005d1a:	07de      	lsls	r6, r3, #31
 8005d1c:	d508      	bpl.n	8005d30 <_printf_i+0x148>
 8005d1e:	6923      	ldr	r3, [r4, #16]
 8005d20:	6861      	ldr	r1, [r4, #4]
 8005d22:	4299      	cmp	r1, r3
 8005d24:	bfde      	ittt	le
 8005d26:	2330      	movle	r3, #48	; 0x30
 8005d28:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005d2c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005d30:	1b52      	subs	r2, r2, r5
 8005d32:	6122      	str	r2, [r4, #16]
 8005d34:	f8cd a000 	str.w	sl, [sp]
 8005d38:	464b      	mov	r3, r9
 8005d3a:	aa03      	add	r2, sp, #12
 8005d3c:	4621      	mov	r1, r4
 8005d3e:	4640      	mov	r0, r8
 8005d40:	f7ff fee4 	bl	8005b0c <_printf_common>
 8005d44:	3001      	adds	r0, #1
 8005d46:	d14a      	bne.n	8005dde <_printf_i+0x1f6>
 8005d48:	f04f 30ff 	mov.w	r0, #4294967295
 8005d4c:	b004      	add	sp, #16
 8005d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d52:	6823      	ldr	r3, [r4, #0]
 8005d54:	f043 0320 	orr.w	r3, r3, #32
 8005d58:	6023      	str	r3, [r4, #0]
 8005d5a:	4833      	ldr	r0, [pc, #204]	; (8005e28 <_printf_i+0x240>)
 8005d5c:	2778      	movs	r7, #120	; 0x78
 8005d5e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d62:	6823      	ldr	r3, [r4, #0]
 8005d64:	6829      	ldr	r1, [r5, #0]
 8005d66:	061f      	lsls	r7, r3, #24
 8005d68:	f851 6b04 	ldr.w	r6, [r1], #4
 8005d6c:	d402      	bmi.n	8005d74 <_printf_i+0x18c>
 8005d6e:	065f      	lsls	r7, r3, #25
 8005d70:	bf48      	it	mi
 8005d72:	b2b6      	uxthmi	r6, r6
 8005d74:	07df      	lsls	r7, r3, #31
 8005d76:	bf48      	it	mi
 8005d78:	f043 0320 	orrmi.w	r3, r3, #32
 8005d7c:	6029      	str	r1, [r5, #0]
 8005d7e:	bf48      	it	mi
 8005d80:	6023      	strmi	r3, [r4, #0]
 8005d82:	b91e      	cbnz	r6, 8005d8c <_printf_i+0x1a4>
 8005d84:	6823      	ldr	r3, [r4, #0]
 8005d86:	f023 0320 	bic.w	r3, r3, #32
 8005d8a:	6023      	str	r3, [r4, #0]
 8005d8c:	2310      	movs	r3, #16
 8005d8e:	e7a7      	b.n	8005ce0 <_printf_i+0xf8>
 8005d90:	4824      	ldr	r0, [pc, #144]	; (8005e24 <_printf_i+0x23c>)
 8005d92:	e7e4      	b.n	8005d5e <_printf_i+0x176>
 8005d94:	4615      	mov	r5, r2
 8005d96:	e7bd      	b.n	8005d14 <_printf_i+0x12c>
 8005d98:	682b      	ldr	r3, [r5, #0]
 8005d9a:	6826      	ldr	r6, [r4, #0]
 8005d9c:	6961      	ldr	r1, [r4, #20]
 8005d9e:	1d18      	adds	r0, r3, #4
 8005da0:	6028      	str	r0, [r5, #0]
 8005da2:	0635      	lsls	r5, r6, #24
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	d501      	bpl.n	8005dac <_printf_i+0x1c4>
 8005da8:	6019      	str	r1, [r3, #0]
 8005daa:	e002      	b.n	8005db2 <_printf_i+0x1ca>
 8005dac:	0670      	lsls	r0, r6, #25
 8005dae:	d5fb      	bpl.n	8005da8 <_printf_i+0x1c0>
 8005db0:	8019      	strh	r1, [r3, #0]
 8005db2:	2300      	movs	r3, #0
 8005db4:	6123      	str	r3, [r4, #16]
 8005db6:	4615      	mov	r5, r2
 8005db8:	e7bc      	b.n	8005d34 <_printf_i+0x14c>
 8005dba:	682b      	ldr	r3, [r5, #0]
 8005dbc:	1d1a      	adds	r2, r3, #4
 8005dbe:	602a      	str	r2, [r5, #0]
 8005dc0:	681d      	ldr	r5, [r3, #0]
 8005dc2:	6862      	ldr	r2, [r4, #4]
 8005dc4:	2100      	movs	r1, #0
 8005dc6:	4628      	mov	r0, r5
 8005dc8:	f7fa fa8a 	bl	80002e0 <memchr>
 8005dcc:	b108      	cbz	r0, 8005dd2 <_printf_i+0x1ea>
 8005dce:	1b40      	subs	r0, r0, r5
 8005dd0:	6060      	str	r0, [r4, #4]
 8005dd2:	6863      	ldr	r3, [r4, #4]
 8005dd4:	6123      	str	r3, [r4, #16]
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005ddc:	e7aa      	b.n	8005d34 <_printf_i+0x14c>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	462a      	mov	r2, r5
 8005de2:	4649      	mov	r1, r9
 8005de4:	4640      	mov	r0, r8
 8005de6:	47d0      	blx	sl
 8005de8:	3001      	adds	r0, #1
 8005dea:	d0ad      	beq.n	8005d48 <_printf_i+0x160>
 8005dec:	6823      	ldr	r3, [r4, #0]
 8005dee:	079b      	lsls	r3, r3, #30
 8005df0:	d413      	bmi.n	8005e1a <_printf_i+0x232>
 8005df2:	68e0      	ldr	r0, [r4, #12]
 8005df4:	9b03      	ldr	r3, [sp, #12]
 8005df6:	4298      	cmp	r0, r3
 8005df8:	bfb8      	it	lt
 8005dfa:	4618      	movlt	r0, r3
 8005dfc:	e7a6      	b.n	8005d4c <_printf_i+0x164>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	4632      	mov	r2, r6
 8005e02:	4649      	mov	r1, r9
 8005e04:	4640      	mov	r0, r8
 8005e06:	47d0      	blx	sl
 8005e08:	3001      	adds	r0, #1
 8005e0a:	d09d      	beq.n	8005d48 <_printf_i+0x160>
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	68e3      	ldr	r3, [r4, #12]
 8005e10:	9903      	ldr	r1, [sp, #12]
 8005e12:	1a5b      	subs	r3, r3, r1
 8005e14:	42ab      	cmp	r3, r5
 8005e16:	dcf2      	bgt.n	8005dfe <_printf_i+0x216>
 8005e18:	e7eb      	b.n	8005df2 <_printf_i+0x20a>
 8005e1a:	2500      	movs	r5, #0
 8005e1c:	f104 0619 	add.w	r6, r4, #25
 8005e20:	e7f5      	b.n	8005e0e <_printf_i+0x226>
 8005e22:	bf00      	nop
 8005e24:	08006251 	.word	0x08006251
 8005e28:	08006262 	.word	0x08006262

08005e2c <__sflush_r>:
 8005e2c:	898a      	ldrh	r2, [r1, #12]
 8005e2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e32:	4605      	mov	r5, r0
 8005e34:	0710      	lsls	r0, r2, #28
 8005e36:	460c      	mov	r4, r1
 8005e38:	d458      	bmi.n	8005eec <__sflush_r+0xc0>
 8005e3a:	684b      	ldr	r3, [r1, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	dc05      	bgt.n	8005e4c <__sflush_r+0x20>
 8005e40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dc02      	bgt.n	8005e4c <__sflush_r+0x20>
 8005e46:	2000      	movs	r0, #0
 8005e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005e4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e4e:	2e00      	cmp	r6, #0
 8005e50:	d0f9      	beq.n	8005e46 <__sflush_r+0x1a>
 8005e52:	2300      	movs	r3, #0
 8005e54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005e58:	682f      	ldr	r7, [r5, #0]
 8005e5a:	6a21      	ldr	r1, [r4, #32]
 8005e5c:	602b      	str	r3, [r5, #0]
 8005e5e:	d032      	beq.n	8005ec6 <__sflush_r+0x9a>
 8005e60:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e62:	89a3      	ldrh	r3, [r4, #12]
 8005e64:	075a      	lsls	r2, r3, #29
 8005e66:	d505      	bpl.n	8005e74 <__sflush_r+0x48>
 8005e68:	6863      	ldr	r3, [r4, #4]
 8005e6a:	1ac0      	subs	r0, r0, r3
 8005e6c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005e6e:	b10b      	cbz	r3, 8005e74 <__sflush_r+0x48>
 8005e70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005e72:	1ac0      	subs	r0, r0, r3
 8005e74:	2300      	movs	r3, #0
 8005e76:	4602      	mov	r2, r0
 8005e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005e7a:	6a21      	ldr	r1, [r4, #32]
 8005e7c:	4628      	mov	r0, r5
 8005e7e:	47b0      	blx	r6
 8005e80:	1c43      	adds	r3, r0, #1
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	d106      	bne.n	8005e94 <__sflush_r+0x68>
 8005e86:	6829      	ldr	r1, [r5, #0]
 8005e88:	291d      	cmp	r1, #29
 8005e8a:	d82b      	bhi.n	8005ee4 <__sflush_r+0xb8>
 8005e8c:	4a29      	ldr	r2, [pc, #164]	; (8005f34 <__sflush_r+0x108>)
 8005e8e:	410a      	asrs	r2, r1
 8005e90:	07d6      	lsls	r6, r2, #31
 8005e92:	d427      	bmi.n	8005ee4 <__sflush_r+0xb8>
 8005e94:	2200      	movs	r2, #0
 8005e96:	6062      	str	r2, [r4, #4]
 8005e98:	04d9      	lsls	r1, r3, #19
 8005e9a:	6922      	ldr	r2, [r4, #16]
 8005e9c:	6022      	str	r2, [r4, #0]
 8005e9e:	d504      	bpl.n	8005eaa <__sflush_r+0x7e>
 8005ea0:	1c42      	adds	r2, r0, #1
 8005ea2:	d101      	bne.n	8005ea8 <__sflush_r+0x7c>
 8005ea4:	682b      	ldr	r3, [r5, #0]
 8005ea6:	b903      	cbnz	r3, 8005eaa <__sflush_r+0x7e>
 8005ea8:	6560      	str	r0, [r4, #84]	; 0x54
 8005eaa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005eac:	602f      	str	r7, [r5, #0]
 8005eae:	2900      	cmp	r1, #0
 8005eb0:	d0c9      	beq.n	8005e46 <__sflush_r+0x1a>
 8005eb2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005eb6:	4299      	cmp	r1, r3
 8005eb8:	d002      	beq.n	8005ec0 <__sflush_r+0x94>
 8005eba:	4628      	mov	r0, r5
 8005ebc:	f7ff fbea 	bl	8005694 <_free_r>
 8005ec0:	2000      	movs	r0, #0
 8005ec2:	6360      	str	r0, [r4, #52]	; 0x34
 8005ec4:	e7c0      	b.n	8005e48 <__sflush_r+0x1c>
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	4628      	mov	r0, r5
 8005eca:	47b0      	blx	r6
 8005ecc:	1c41      	adds	r1, r0, #1
 8005ece:	d1c8      	bne.n	8005e62 <__sflush_r+0x36>
 8005ed0:	682b      	ldr	r3, [r5, #0]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0c5      	beq.n	8005e62 <__sflush_r+0x36>
 8005ed6:	2b1d      	cmp	r3, #29
 8005ed8:	d001      	beq.n	8005ede <__sflush_r+0xb2>
 8005eda:	2b16      	cmp	r3, #22
 8005edc:	d101      	bne.n	8005ee2 <__sflush_r+0xb6>
 8005ede:	602f      	str	r7, [r5, #0]
 8005ee0:	e7b1      	b.n	8005e46 <__sflush_r+0x1a>
 8005ee2:	89a3      	ldrh	r3, [r4, #12]
 8005ee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ee8:	81a3      	strh	r3, [r4, #12]
 8005eea:	e7ad      	b.n	8005e48 <__sflush_r+0x1c>
 8005eec:	690f      	ldr	r7, [r1, #16]
 8005eee:	2f00      	cmp	r7, #0
 8005ef0:	d0a9      	beq.n	8005e46 <__sflush_r+0x1a>
 8005ef2:	0793      	lsls	r3, r2, #30
 8005ef4:	680e      	ldr	r6, [r1, #0]
 8005ef6:	bf08      	it	eq
 8005ef8:	694b      	ldreq	r3, [r1, #20]
 8005efa:	600f      	str	r7, [r1, #0]
 8005efc:	bf18      	it	ne
 8005efe:	2300      	movne	r3, #0
 8005f00:	eba6 0807 	sub.w	r8, r6, r7
 8005f04:	608b      	str	r3, [r1, #8]
 8005f06:	f1b8 0f00 	cmp.w	r8, #0
 8005f0a:	dd9c      	ble.n	8005e46 <__sflush_r+0x1a>
 8005f0c:	6a21      	ldr	r1, [r4, #32]
 8005f0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005f10:	4643      	mov	r3, r8
 8005f12:	463a      	mov	r2, r7
 8005f14:	4628      	mov	r0, r5
 8005f16:	47b0      	blx	r6
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	dc06      	bgt.n	8005f2a <__sflush_r+0xfe>
 8005f1c:	89a3      	ldrh	r3, [r4, #12]
 8005f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f22:	81a3      	strh	r3, [r4, #12]
 8005f24:	f04f 30ff 	mov.w	r0, #4294967295
 8005f28:	e78e      	b.n	8005e48 <__sflush_r+0x1c>
 8005f2a:	4407      	add	r7, r0
 8005f2c:	eba8 0800 	sub.w	r8, r8, r0
 8005f30:	e7e9      	b.n	8005f06 <__sflush_r+0xda>
 8005f32:	bf00      	nop
 8005f34:	dfbffffe 	.word	0xdfbffffe

08005f38 <_fflush_r>:
 8005f38:	b538      	push	{r3, r4, r5, lr}
 8005f3a:	690b      	ldr	r3, [r1, #16]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460c      	mov	r4, r1
 8005f40:	b913      	cbnz	r3, 8005f48 <_fflush_r+0x10>
 8005f42:	2500      	movs	r5, #0
 8005f44:	4628      	mov	r0, r5
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	b118      	cbz	r0, 8005f52 <_fflush_r+0x1a>
 8005f4a:	6a03      	ldr	r3, [r0, #32]
 8005f4c:	b90b      	cbnz	r3, 8005f52 <_fflush_r+0x1a>
 8005f4e:	f7ff fa9b 	bl	8005488 <__sinit>
 8005f52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0f3      	beq.n	8005f42 <_fflush_r+0xa>
 8005f5a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005f5c:	07d0      	lsls	r0, r2, #31
 8005f5e:	d404      	bmi.n	8005f6a <_fflush_r+0x32>
 8005f60:	0599      	lsls	r1, r3, #22
 8005f62:	d402      	bmi.n	8005f6a <_fflush_r+0x32>
 8005f64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f66:	f7ff fb93 	bl	8005690 <__retarget_lock_acquire_recursive>
 8005f6a:	4628      	mov	r0, r5
 8005f6c:	4621      	mov	r1, r4
 8005f6e:	f7ff ff5d 	bl	8005e2c <__sflush_r>
 8005f72:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005f74:	07da      	lsls	r2, r3, #31
 8005f76:	4605      	mov	r5, r0
 8005f78:	d4e4      	bmi.n	8005f44 <_fflush_r+0xc>
 8005f7a:	89a3      	ldrh	r3, [r4, #12]
 8005f7c:	059b      	lsls	r3, r3, #22
 8005f7e:	d4e1      	bmi.n	8005f44 <_fflush_r+0xc>
 8005f80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005f82:	f7ff fb86 	bl	8005692 <__retarget_lock_release_recursive>
 8005f86:	e7dd      	b.n	8005f44 <_fflush_r+0xc>

08005f88 <__swbuf_r>:
 8005f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8a:	460e      	mov	r6, r1
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b118      	cbz	r0, 8005f9a <__swbuf_r+0x12>
 8005f92:	6a03      	ldr	r3, [r0, #32]
 8005f94:	b90b      	cbnz	r3, 8005f9a <__swbuf_r+0x12>
 8005f96:	f7ff fa77 	bl	8005488 <__sinit>
 8005f9a:	69a3      	ldr	r3, [r4, #24]
 8005f9c:	60a3      	str	r3, [r4, #8]
 8005f9e:	89a3      	ldrh	r3, [r4, #12]
 8005fa0:	071a      	lsls	r2, r3, #28
 8005fa2:	d525      	bpl.n	8005ff0 <__swbuf_r+0x68>
 8005fa4:	6923      	ldr	r3, [r4, #16]
 8005fa6:	b31b      	cbz	r3, 8005ff0 <__swbuf_r+0x68>
 8005fa8:	6823      	ldr	r3, [r4, #0]
 8005faa:	6922      	ldr	r2, [r4, #16]
 8005fac:	1a98      	subs	r0, r3, r2
 8005fae:	6963      	ldr	r3, [r4, #20]
 8005fb0:	b2f6      	uxtb	r6, r6
 8005fb2:	4283      	cmp	r3, r0
 8005fb4:	4637      	mov	r7, r6
 8005fb6:	dc04      	bgt.n	8005fc2 <__swbuf_r+0x3a>
 8005fb8:	4621      	mov	r1, r4
 8005fba:	4628      	mov	r0, r5
 8005fbc:	f7ff ffbc 	bl	8005f38 <_fflush_r>
 8005fc0:	b9e0      	cbnz	r0, 8005ffc <__swbuf_r+0x74>
 8005fc2:	68a3      	ldr	r3, [r4, #8]
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	60a3      	str	r3, [r4, #8]
 8005fc8:	6823      	ldr	r3, [r4, #0]
 8005fca:	1c5a      	adds	r2, r3, #1
 8005fcc:	6022      	str	r2, [r4, #0]
 8005fce:	701e      	strb	r6, [r3, #0]
 8005fd0:	6962      	ldr	r2, [r4, #20]
 8005fd2:	1c43      	adds	r3, r0, #1
 8005fd4:	429a      	cmp	r2, r3
 8005fd6:	d004      	beq.n	8005fe2 <__swbuf_r+0x5a>
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	07db      	lsls	r3, r3, #31
 8005fdc:	d506      	bpl.n	8005fec <__swbuf_r+0x64>
 8005fde:	2e0a      	cmp	r6, #10
 8005fe0:	d104      	bne.n	8005fec <__swbuf_r+0x64>
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	4628      	mov	r0, r5
 8005fe6:	f7ff ffa7 	bl	8005f38 <_fflush_r>
 8005fea:	b938      	cbnz	r0, 8005ffc <__swbuf_r+0x74>
 8005fec:	4638      	mov	r0, r7
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff0:	4621      	mov	r1, r4
 8005ff2:	4628      	mov	r0, r5
 8005ff4:	f000 f806 	bl	8006004 <__swsetup_r>
 8005ff8:	2800      	cmp	r0, #0
 8005ffa:	d0d5      	beq.n	8005fa8 <__swbuf_r+0x20>
 8005ffc:	f04f 37ff 	mov.w	r7, #4294967295
 8006000:	e7f4      	b.n	8005fec <__swbuf_r+0x64>
	...

08006004 <__swsetup_r>:
 8006004:	b538      	push	{r3, r4, r5, lr}
 8006006:	4b2a      	ldr	r3, [pc, #168]	; (80060b0 <__swsetup_r+0xac>)
 8006008:	4605      	mov	r5, r0
 800600a:	6818      	ldr	r0, [r3, #0]
 800600c:	460c      	mov	r4, r1
 800600e:	b118      	cbz	r0, 8006018 <__swsetup_r+0x14>
 8006010:	6a03      	ldr	r3, [r0, #32]
 8006012:	b90b      	cbnz	r3, 8006018 <__swsetup_r+0x14>
 8006014:	f7ff fa38 	bl	8005488 <__sinit>
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800601e:	0718      	lsls	r0, r3, #28
 8006020:	d422      	bmi.n	8006068 <__swsetup_r+0x64>
 8006022:	06d9      	lsls	r1, r3, #27
 8006024:	d407      	bmi.n	8006036 <__swsetup_r+0x32>
 8006026:	2309      	movs	r3, #9
 8006028:	602b      	str	r3, [r5, #0]
 800602a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800602e:	81a3      	strh	r3, [r4, #12]
 8006030:	f04f 30ff 	mov.w	r0, #4294967295
 8006034:	e034      	b.n	80060a0 <__swsetup_r+0x9c>
 8006036:	0758      	lsls	r0, r3, #29
 8006038:	d512      	bpl.n	8006060 <__swsetup_r+0x5c>
 800603a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800603c:	b141      	cbz	r1, 8006050 <__swsetup_r+0x4c>
 800603e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006042:	4299      	cmp	r1, r3
 8006044:	d002      	beq.n	800604c <__swsetup_r+0x48>
 8006046:	4628      	mov	r0, r5
 8006048:	f7ff fb24 	bl	8005694 <_free_r>
 800604c:	2300      	movs	r3, #0
 800604e:	6363      	str	r3, [r4, #52]	; 0x34
 8006050:	89a3      	ldrh	r3, [r4, #12]
 8006052:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006056:	81a3      	strh	r3, [r4, #12]
 8006058:	2300      	movs	r3, #0
 800605a:	6063      	str	r3, [r4, #4]
 800605c:	6923      	ldr	r3, [r4, #16]
 800605e:	6023      	str	r3, [r4, #0]
 8006060:	89a3      	ldrh	r3, [r4, #12]
 8006062:	f043 0308 	orr.w	r3, r3, #8
 8006066:	81a3      	strh	r3, [r4, #12]
 8006068:	6923      	ldr	r3, [r4, #16]
 800606a:	b94b      	cbnz	r3, 8006080 <__swsetup_r+0x7c>
 800606c:	89a3      	ldrh	r3, [r4, #12]
 800606e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006076:	d003      	beq.n	8006080 <__swsetup_r+0x7c>
 8006078:	4621      	mov	r1, r4
 800607a:	4628      	mov	r0, r5
 800607c:	f000 f850 	bl	8006120 <__smakebuf_r>
 8006080:	89a0      	ldrh	r0, [r4, #12]
 8006082:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006086:	f010 0301 	ands.w	r3, r0, #1
 800608a:	d00a      	beq.n	80060a2 <__swsetup_r+0x9e>
 800608c:	2300      	movs	r3, #0
 800608e:	60a3      	str	r3, [r4, #8]
 8006090:	6963      	ldr	r3, [r4, #20]
 8006092:	425b      	negs	r3, r3
 8006094:	61a3      	str	r3, [r4, #24]
 8006096:	6923      	ldr	r3, [r4, #16]
 8006098:	b943      	cbnz	r3, 80060ac <__swsetup_r+0xa8>
 800609a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800609e:	d1c4      	bne.n	800602a <__swsetup_r+0x26>
 80060a0:	bd38      	pop	{r3, r4, r5, pc}
 80060a2:	0781      	lsls	r1, r0, #30
 80060a4:	bf58      	it	pl
 80060a6:	6963      	ldrpl	r3, [r4, #20]
 80060a8:	60a3      	str	r3, [r4, #8]
 80060aa:	e7f4      	b.n	8006096 <__swsetup_r+0x92>
 80060ac:	2000      	movs	r0, #0
 80060ae:	e7f7      	b.n	80060a0 <__swsetup_r+0x9c>
 80060b0:	24000068 	.word	0x24000068

080060b4 <_sbrk_r>:
 80060b4:	b538      	push	{r3, r4, r5, lr}
 80060b6:	4d06      	ldr	r5, [pc, #24]	; (80060d0 <_sbrk_r+0x1c>)
 80060b8:	2300      	movs	r3, #0
 80060ba:	4604      	mov	r4, r0
 80060bc:	4608      	mov	r0, r1
 80060be:	602b      	str	r3, [r5, #0]
 80060c0:	f7fa fcf6 	bl	8000ab0 <_sbrk>
 80060c4:	1c43      	adds	r3, r0, #1
 80060c6:	d102      	bne.n	80060ce <_sbrk_r+0x1a>
 80060c8:	682b      	ldr	r3, [r5, #0]
 80060ca:	b103      	cbz	r3, 80060ce <_sbrk_r+0x1a>
 80060cc:	6023      	str	r3, [r4, #0]
 80060ce:	bd38      	pop	{r3, r4, r5, pc}
 80060d0:	2400ab7c 	.word	0x2400ab7c

080060d4 <__swhatbuf_r>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	460c      	mov	r4, r1
 80060d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060dc:	2900      	cmp	r1, #0
 80060de:	b096      	sub	sp, #88	; 0x58
 80060e0:	4615      	mov	r5, r2
 80060e2:	461e      	mov	r6, r3
 80060e4:	da0d      	bge.n	8006102 <__swhatbuf_r+0x2e>
 80060e6:	89a3      	ldrh	r3, [r4, #12]
 80060e8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80060ec:	f04f 0100 	mov.w	r1, #0
 80060f0:	bf0c      	ite	eq
 80060f2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80060f6:	2340      	movne	r3, #64	; 0x40
 80060f8:	2000      	movs	r0, #0
 80060fa:	6031      	str	r1, [r6, #0]
 80060fc:	602b      	str	r3, [r5, #0]
 80060fe:	b016      	add	sp, #88	; 0x58
 8006100:	bd70      	pop	{r4, r5, r6, pc}
 8006102:	466a      	mov	r2, sp
 8006104:	f000 f848 	bl	8006198 <_fstat_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	dbec      	blt.n	80060e6 <__swhatbuf_r+0x12>
 800610c:	9901      	ldr	r1, [sp, #4]
 800610e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006112:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006116:	4259      	negs	r1, r3
 8006118:	4159      	adcs	r1, r3
 800611a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800611e:	e7eb      	b.n	80060f8 <__swhatbuf_r+0x24>

08006120 <__smakebuf_r>:
 8006120:	898b      	ldrh	r3, [r1, #12]
 8006122:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006124:	079d      	lsls	r5, r3, #30
 8006126:	4606      	mov	r6, r0
 8006128:	460c      	mov	r4, r1
 800612a:	d507      	bpl.n	800613c <__smakebuf_r+0x1c>
 800612c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006130:	6023      	str	r3, [r4, #0]
 8006132:	6123      	str	r3, [r4, #16]
 8006134:	2301      	movs	r3, #1
 8006136:	6163      	str	r3, [r4, #20]
 8006138:	b002      	add	sp, #8
 800613a:	bd70      	pop	{r4, r5, r6, pc}
 800613c:	ab01      	add	r3, sp, #4
 800613e:	466a      	mov	r2, sp
 8006140:	f7ff ffc8 	bl	80060d4 <__swhatbuf_r>
 8006144:	9900      	ldr	r1, [sp, #0]
 8006146:	4605      	mov	r5, r0
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff fb0f 	bl	800576c <_malloc_r>
 800614e:	b948      	cbnz	r0, 8006164 <__smakebuf_r+0x44>
 8006150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006154:	059a      	lsls	r2, r3, #22
 8006156:	d4ef      	bmi.n	8006138 <__smakebuf_r+0x18>
 8006158:	f023 0303 	bic.w	r3, r3, #3
 800615c:	f043 0302 	orr.w	r3, r3, #2
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	e7e3      	b.n	800612c <__smakebuf_r+0xc>
 8006164:	89a3      	ldrh	r3, [r4, #12]
 8006166:	6020      	str	r0, [r4, #0]
 8006168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800616c:	81a3      	strh	r3, [r4, #12]
 800616e:	9b00      	ldr	r3, [sp, #0]
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	9b01      	ldr	r3, [sp, #4]
 8006174:	6120      	str	r0, [r4, #16]
 8006176:	b15b      	cbz	r3, 8006190 <__smakebuf_r+0x70>
 8006178:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800617c:	4630      	mov	r0, r6
 800617e:	f000 f81d 	bl	80061bc <_isatty_r>
 8006182:	b128      	cbz	r0, 8006190 <__smakebuf_r+0x70>
 8006184:	89a3      	ldrh	r3, [r4, #12]
 8006186:	f023 0303 	bic.w	r3, r3, #3
 800618a:	f043 0301 	orr.w	r3, r3, #1
 800618e:	81a3      	strh	r3, [r4, #12]
 8006190:	89a3      	ldrh	r3, [r4, #12]
 8006192:	431d      	orrs	r5, r3
 8006194:	81a5      	strh	r5, [r4, #12]
 8006196:	e7cf      	b.n	8006138 <__smakebuf_r+0x18>

08006198 <_fstat_r>:
 8006198:	b538      	push	{r3, r4, r5, lr}
 800619a:	4d07      	ldr	r5, [pc, #28]	; (80061b8 <_fstat_r+0x20>)
 800619c:	2300      	movs	r3, #0
 800619e:	4604      	mov	r4, r0
 80061a0:	4608      	mov	r0, r1
 80061a2:	4611      	mov	r1, r2
 80061a4:	602b      	str	r3, [r5, #0]
 80061a6:	f7fa fc5a 	bl	8000a5e <_fstat>
 80061aa:	1c43      	adds	r3, r0, #1
 80061ac:	d102      	bne.n	80061b4 <_fstat_r+0x1c>
 80061ae:	682b      	ldr	r3, [r5, #0]
 80061b0:	b103      	cbz	r3, 80061b4 <_fstat_r+0x1c>
 80061b2:	6023      	str	r3, [r4, #0]
 80061b4:	bd38      	pop	{r3, r4, r5, pc}
 80061b6:	bf00      	nop
 80061b8:	2400ab7c 	.word	0x2400ab7c

080061bc <_isatty_r>:
 80061bc:	b538      	push	{r3, r4, r5, lr}
 80061be:	4d06      	ldr	r5, [pc, #24]	; (80061d8 <_isatty_r+0x1c>)
 80061c0:	2300      	movs	r3, #0
 80061c2:	4604      	mov	r4, r0
 80061c4:	4608      	mov	r0, r1
 80061c6:	602b      	str	r3, [r5, #0]
 80061c8:	f7fa fc59 	bl	8000a7e <_isatty>
 80061cc:	1c43      	adds	r3, r0, #1
 80061ce:	d102      	bne.n	80061d6 <_isatty_r+0x1a>
 80061d0:	682b      	ldr	r3, [r5, #0]
 80061d2:	b103      	cbz	r3, 80061d6 <_isatty_r+0x1a>
 80061d4:	6023      	str	r3, [r4, #0]
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	2400ab7c 	.word	0x2400ab7c

080061dc <_init>:
 80061dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061de:	bf00      	nop
 80061e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061e2:	bc08      	pop	{r3}
 80061e4:	469e      	mov	lr, r3
 80061e6:	4770      	bx	lr

080061e8 <_fini>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	bf00      	nop
 80061ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061ee:	bc08      	pop	{r3}
 80061f0:	469e      	mov	lr, r3
 80061f2:	4770      	bx	lr
